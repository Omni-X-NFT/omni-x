{
  "address": "0xe96Ce71bB49D630f075413618CCf097c4A0b7b9A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_layerZeroEndpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startMintId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endMintId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokensPerMint",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseTokenURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stableToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_boughtCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_publicSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_saleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipPublicSaleStarted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipRevealed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipSaleStarted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nbTokens",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "gaslessMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLzEndpoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemote",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokensPerMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nbTokens",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextMintId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nbTokens",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "sendFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setStablePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0ec18e3415c29c5e445a1e42adea21fd86e7f3c1f8cbb00fb18c99e9eab9676a",
  "receipt": {
    "to": null,
    "from": "0x6EF408ED5660d13303f06f33627e798305638909",
    "contractAddress": "0xe96Ce71bB49D630f075413618CCf097c4A0b7b9A",
    "transactionIndex": 16,
    "gasUsed": "4660375",
    "logsBloom": "0x
    "blockHash": "0xeb26d65dca6b40a414e1889e945b5ed557904504341f0afbb936466a502d6ad1",
    "transactionHash": "0x0ec18e3415c29c5e445a1e42adea21fd86e7f3c1f8cbb00fb18c99e9eab9676a",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 29513586,
        "transactionHash": "0x0ec18e3415c29c5e445a1e42adea21fd86e7f3c1f8cbb00fb18c99e9eab9676a",
        "address": "0xe96Ce71bB49D630f075413618CCf097c4A0b7b9A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006ef408ed5660d13303f06f33627e798305638909"
        ],
        "data": "0x",
        "logIndex": 62,
        "blockHash": "0xeb26d65dca6b40a414e1889e945b5ed557904504341f0afbb936466a502d6ad1"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 29513586,
        "transactionHash": "0x0ec18e3415c29c5e445a1e42adea21fd86e7f3c1f8cbb00fb18c99e9eab9676a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006ef408ed5660d13303f06f33627e798305638909",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000018d5e12a509c690000000000000000000000000000000000000000000000009b73db067646564f0000000000000000000000000000000000000000000000757d906009f2385da50000000000000000000000000000000000000000000000009b5b05254bf5b9e60000000000000000000000000000000000000000000000757da935eb1c88fa0e",
        "logIndex": 63,
        "blockHash": "0xeb26d65dca6b40a414e1889e945b5ed557904504341f0afbb936466a502d6ad1"
      }
    ],
    "blockNumber": 29513586,
    "cumulativeGasUsed": "6087513",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Kanpai Pandas",
    "KPD",
    "0xf69186dfBa60DdB133E91E9A4B5673624293d8F8",
    1350,
    2200,
    5,
    "ipfs://QmV8cx4TAMX4ghZJTXKFYG37Fq4uLmqXrKNB1jUTXqke3R/images/",
    "0x742DfA5Aa70a8212857966D491D67B09Ce7D6ec7"
  ],
  "numDeployments": 3,
  "solcInputHash": "2d4c4db035fbeb856d496bf5470492e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_layerZeroEndpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startMintId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endMintId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensPerMint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stableToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_boughtCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_publicSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_saleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPublicSaleStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSaleStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nbTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"gaslessMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLzEndpoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemote\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nbTokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMintId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nbTokens\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setStablePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"exakoss\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"_baseTokenURI\":\"the base URI for computing the tokenURI\",\"_endMintId\":\"the max number of mints on this chain\",\"_layerZeroEndpoint\":\"handles message transmission across chains\",\"_maxTokensPerMint\":\"the max number of tokens that could be minted in a single transaction\",\"_name\":\"the name of the token\",\"_stableToken\":\"stable coin address to be paid for minting\",\"_startMintId\":\"the starting mint number on this chain, excluded\",\"_symbol\":\"the token symbol\"}},\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"details\":\"estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenId - token Id to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"sendFrom(address,uint16,bytes,uint256,address,address,bytes)\":{\"details\":\"send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Interface of the AdvancedONFT standard\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor for the AdvancedONFT\"},\"gaslessMint(uint256,address)\":{\"notice\":\"gasless mint \"},\"mint(uint256,bytes32[])\":{\"notice\":\"Mint your ONFTs, whitelisted addresses only\"},\"publicMint(uint256)\":{\"notice\":\"Mint your ONFTs\"},\"stablePrice()\":{\"notice\":\"For stable minting\"}},\"notice\":\"this implementation supports: batch mint, payable public and private mint, reveal of metadata and EIP-2981 on-chain royalties\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/onft/extension/KanpaiPandas.sol\":\"KanpaiPandas\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayBase} from \\\"./base/GelatoRelayBase.sol\\\";\\nimport {TokenUtils} from \\\"./lib/TokenUtils.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 3 * 32;\\nuint256 constant _FEE_TOKEN_START = 2 * 32;\\nuint256 constant _FEE_START = 32;\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContext() pure returns (address) {\\n    return\\n        abi.decode(\\n            msg.data[msg.data.length - _FEE_COLLECTOR_START:],\\n            (address)\\n        );\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeTokenRelayContext() pure returns (address) {\\n    return abi.decode(msg.data[msg.data.length - _FEE_TOKEN_START:], (address));\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeRelayContext() pure returns (uint256) {\\n    return abi.decode(msg.data[msg.data.length - _FEE_START:], (uint256));\\n}\\n\\n/**\\n * @dev Context variant with feeCollector, feeToken and fee appended to msg.data\\n * Expects calldata encoding:\\n *   abi.encodePacked(bytes data, address feeCollectorAddress, address feeToken, uint256 fee)\\n * Therefore, we're expecting 3 * 32bytes to be appended to normal msgData\\n * 32bytes start offsets from calldatasize:\\n *     feeCollector: - 32 * 3\\n *     feeToken: - 32 * 2\\n *     fee: - 32\\n */\\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\\nabstract contract GelatoRelayContext is GelatoRelayBase {\\n    using TokenUtils for address;\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFee() internal {\\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContext._transferRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transfer(_getFeeCollector(), fee);\\n    }\\n\\n    // Do not confuse with OZ Context.sol _msgData()\\n    function __msgData() internal view returns (bytes calldata) {\\n        return\\n            _isGelatoRelay(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return _getFeeCollectorRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeToken() internal pure returns (address) {\\n        return _getFeeTokenRelayContext();\\n    }\\n\\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFee() internal pure returns (uint256) {\\n        return _getFeeRelayContext();\\n    }\\n}\\n\",\"keccak256\":\"0x0fc61ab59649c30e576ec082a2f20171b1bb8e08708948de6c130b9c45aa78d9\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GELATO_RELAY} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayBase {\\n    modifier onlyGelatoRelay() {\\n        require(\\n            _isGelatoRelay(msg.sender),\\n            \\\"GelatoRelayContext.onlyGelatoRelay\\\"\\n        );\\n        _;\\n    }\\n\\n    function _isGelatoRelay(address _forwarder) internal pure returns (bool) {\\n        return _forwarder == GELATO_RELAY;\\n    }\\n}\\n\",\"keccak256\":\"0x6d497388d378afb532735b7e75bdc99804e72ffedd1f1a3644c35e0e947fecda\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\n\",\"keccak256\":\"0xc5ddf2c3b6d7a1f75994f5bd42f7b8b6553d2584eec4a7bd5e00f1a58a1dfb87\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf58ba7702aa3e8aebf160c14db02a66afcc28d7dd0b94dee6a30cc7c5fa8335a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyERC20(address _token) {\\n        require(_token != NATIVE_TOKEN, \\\"TokenUtils.onlyERC20\\\");\\n        _;\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyERC20(_token) {\\n        if (_amount == 0) return;\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0x4507d23bf0b68cb763aec3e483d677fe59cd963de90f3a27958ceb960e0157df\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\",\"keccak256\":\"0x7811d2f5c1d989e5ad6a7ea15559aba181b83e52566c30a71565f78c1ea84ab0\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\r\\n}\",\"keccak256\":\"0x1214b1fcd3401fc5813f43b666207efe3d186161dcab6da747276f09b2da3475\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\",\"keccak256\":\"0x0ff4d83273ad075e9b813b6f785dbae99d3d04cce0df4260c290e4e27d1d354a\",\"license\":\"MIT\"},\"contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\r\\n\\r\\n/*\\r\\n * a generic LzReceiver implementation\\r\\n */\\r\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\r\\n    ILayerZeroEndpoint internal immutable lzEndpoint;\\r\\n\\r\\n    mapping(uint16 => bytes) internal trustedRemoteLookup;\\r\\n\\r\\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\\r\\n\\r\\n    constructor(address _endpoint) {\\r\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n\\r\\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) external override {\\r\\n        // lzReceive must be called by the endpoint for security\\r\\n        require(_msgSender() == address(lzEndpoint));\\r\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\r\\n        require(_srcAddress.length == trustedRemoteLookup[_srcChainId].length && keccak256(_srcAddress) == keccak256(trustedRemoteLookup[_srcChainId]), \\\"LzReceiver: invalid source sending contract\\\");\\r\\n\\r\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParam) internal {\\r\\n        require(trustedRemoteLookup[_dstChainId].length != 0, \\\"LzSend: destination chain is not a trusted source.\\\");\\r\\n        lzEndpoint.send{value: msg.value}(_dstChainId, trustedRemoteLookup[_dstChainId], _payload, _refundAddress, _zroPaymentAddress, _adapterParam);\\r\\n    }\\r\\n\\r\\n    //---------------------------UserApplication config----------------------------------------\\r\\n    function getConfig(uint16, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\r\\n        return lzEndpoint.getConfig(lzEndpoint.getSendVersion(address(this)), _chainId, address(this), _configType);\\r\\n    }\\r\\n\\r\\n    // generic config for LayerZero user Application\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\r\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setSendVersion(_version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setReceiveVersion(_version);\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\r\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    // allow owner to set it multiple times.\\r\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyOwner {\\r\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\r\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\r\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\r\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\r\\n    }\\r\\n\\r\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\r\\n    // interacting with the LayerZero Endpoint and remote contracts\\r\\n\\r\\n    function getTrustedRemote(uint16 _chainId) external view returns (bytes memory) {\\r\\n        return trustedRemoteLookup[_chainId];\\r\\n    }\\r\\n\\r\\n    function getLzEndpoint() external view returns (address) {\\r\\n        return address(lzEndpoint);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x29828939cae8557be9eaa83d969e6579abd4d9afed71f5eb4305c5d59f950123\",\"license\":\"MIT\"},\"contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./LzApp.sol\\\";\\r\\n\\r\\n/*\\r\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\r\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\r\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\r\\n */\\r\\nabstract contract NonblockingLzApp is LzApp {\\r\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\r\\n\\r\\n    mapping(uint16 => mapping(bytes => mapping(uint => bytes32))) public failedMessages;\\r\\n\\r\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\\r\\n\\r\\n    // overriding the virtual function in LzReceiver\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\r\\n        // try-catch all errors/exceptions\\r\\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\r\\n            // do nothing\\r\\n        } catch {\\r\\n            // error / exception\\r\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\r\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual {\\r\\n        // only internal transaction\\r\\n        require(_msgSender() == address(this), \\\"LzReceiver: caller must be LzApp\\\");\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    //@notice override this function\\r\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function retryMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes calldata _payload) external payable virtual {\\r\\n        // assert there is message to retry\\r\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\r\\n        require(payloadHash != bytes32(0), \\\"LzReceiver: no stored message\\\");\\r\\n        require(keccak256(_payload) == payloadHash, \\\"LzReceiver: invalid payload\\\");\\r\\n        // clear the stored message\\r\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\r\\n        // execute the message. revert if it fails again\\r\\n        this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x951ea5716e6e22a206a00d02b56f537a67006b80914a71aea3069aaaf5b33f9a\",\"license\":\"MIT\"},\"contracts/token/onft/IONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT Core standard\\r\\n */\\r\\ninterface IONFT721Core is IERC165 {\\r\\n    /**\\r\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\r\\n     * _dstChainId - L0 defined chain id to send tokens too\\r\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\r\\n     * _tokenId - token Id to transfer\\r\\n     * _useZro - indicates to use zro to pay L0 fees\\r\\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\\r\\n     */\\r\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    /**\\r\\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\\r\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\r\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\r\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\r\\n     */\\r\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\r\\n     * `_nonce` is the outbound nonce from\\r\\n     */\\r\\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _tokenId, uint64 _nonce);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\\r\\n     */\\r\\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint64 _nonce);\\r\\n}\\r\\n\",\"keccak256\":\"0x72270b4ba9e6b8412d9d95291bf8f83cde3ecf9a8cb0d2232fa47fdaa951a09a\",\"license\":\"MIT\"},\"contracts/token/onft/IONFT721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IONFT721Core.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFTEnumerable standard\\r\\n */\\r\\ninterface IONFT721Enumerable is IONFT721Core, IERC721Enumerable {\\r\\n\\r\\n}\",\"keccak256\":\"0x417c6893e71e3c17a6f83a3a77531ae09ce7ba89212f354f4760fbb1c4ea1ee3\",\"license\":\"MIT\"},\"contracts/token/onft/ONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IONFT721Core.sol\\\";\\r\\nimport \\\"../../lzApp/NonblockingLzApp.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\nabstract contract ONFT721Core is NonblockingLzApp, ERC165, IONFT721Core {\\r\\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return interfaceId == type(IONFT721Core).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\r\\n        // mock the payload for send()\\r\\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\\r\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\\r\\n        _send(_from, _dstChainId, _toAddress, _tokenId, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\\r\\n        _debitFrom(_from, _dstChainId, _toAddress, _tokenId);\\r\\n\\r\\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\\r\\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n\\r\\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\\r\\n        emit SendToChain(_from, _dstChainId, _toAddress, _tokenId, nonce);\\r\\n    }\\r\\n\\r\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\r\\n        // decode and load the toAddress\\r\\n        (bytes memory toAddressBytes, uint tokenId) = abi.decode(_payload, (bytes, uint));\\r\\n        address toAddress;\\r\\n        assembly {\\r\\n            toAddress := mload(add(toAddressBytes, 20))\\r\\n        }\\r\\n\\r\\n        _creditTo(_srcChainId, toAddress, tokenId);\\r\\n\\r\\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenId, _nonce);\\r\\n    }\\r\\n\\r\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId) internal virtual;\\r\\n\\r\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _tokenId) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xf8a129657412fb6e3a7cd486ee1a7f23d33f014593d0799c19f5ee2fc4abdb96\",\"license\":\"MIT\"},\"contracts/token/onft/ONFT721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IONFT721Enumerable.sol\\\";\\r\\nimport \\\"./ONFT721Core.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\n\\r\\n// NOTE: this ONFT contract has no public minting logic.\\r\\n// must implement your own minting logic in child classes\\r\\ncontract ONFT721Enumerable is ONFT721Core, ERC721Enumerable, IONFT721Enumerable {\\r\\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC721(_name, _symbol) ONFT721Core(_lzEndpoint) {}\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT721Core, ERC721Enumerable, IERC165) returns (bool) {\\r\\n        return interfaceId == type(IONFT721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), _tokenId), \\\"ONFT721Enumerable: send caller is not owner nor approved\\\");\\r\\n        require(ERC721.ownerOf(_tokenId) == _from, \\\"ONFT721Enumerable: send from incorrect owner\\\");\\r\\n        _burn(_tokenId);\\r\\n    }\\r\\n\\r\\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\\r\\n        _safeMint(_toAddress, _tokenId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x902538a1a632c22cc0edcbfc0003c2dafc0bc5cde7f0af94b3654eb5aa76f14a\",\"license\":\"MIT\"},\"contracts/token/onft/extension/KanpaiPandas.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"../ONFT721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport { GelatoRelayContext } from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\\\";\\r\\n\\r\\n/// @title Interface of the AdvancedONFT standard\\r\\n/// @author exakoss\\r\\n/// @notice this implementation supports: batch mint, payable public and private mint, reveal of metadata and EIP-2981 on-chain royalties\\r\\ncontract KanpaiPandas is ONFT721Enumerable, GelatoRelayContext, ReentrancyGuard {\\r\\n    using Strings for uint;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint public price = 0;\\r\\n    uint public nextMintId;\\r\\n    uint public maxMintId;\\r\\n    uint public maxTokensPerMint;\\r\\n\\r\\n    // royalty fee in basis points (i.e. 100% = 10000, 1% = 100)\\r\\n    uint royaltyBasisPoints = 500;\\r\\n    // address for withdrawing money and receiving royalties, separate from owner\\r\\n    address payable beneficiary;\\r\\n    // Merkle Root for WL implementation\\r\\n    bytes32 public merkleRoot;\\r\\n\\r\\n    string public contractURI;\\r\\n    string private baseURI;\\r\\n\\r\\n    mapping(address => uint) public _boughtCount;\\r\\n\\r\\n    bool public _publicSaleStarted;\\r\\n    bool public _saleStarted;\\r\\n    bool revealed;\\r\\n\\r\\n    /// For stable minting\\r\\n    uint public stablePrice = 0;\\r\\n    IERC20 public immutable stableToken;\\r\\n\\r\\n    /// @notice Constructor for the AdvancedONFT\\r\\n    /// @param _name the name of the token\\r\\n    /// @param _symbol the token symbol\\r\\n    /// @param _layerZeroEndpoint handles message transmission across chains\\r\\n    /// @param _startMintId the starting mint number on this chain, excluded\\r\\n    /// @param _endMintId the max number of mints on this chain\\r\\n    /// @param _maxTokensPerMint the max number of tokens that could be minted in a single transaction\\r\\n    /// @param _baseTokenURI the base URI for computing the tokenURI\\r\\n    /// @param _stableToken stable coin address to be paid for minting\\r\\n    constructor(string memory _name, string memory _symbol, address _layerZeroEndpoint, uint _startMintId, uint _endMintId, uint _maxTokensPerMint, string memory _baseTokenURI, address _stableToken) ONFT721Enumerable(_name, _symbol, _layerZeroEndpoint) {\\r\\n        nextMintId = _startMintId;\\r\\n        maxMintId = _endMintId;\\r\\n        maxTokensPerMint = _maxTokensPerMint;\\r\\n        //set default beneficiary to owner\\r\\n        beneficiary = payable(msg.sender);\\r\\n        baseURI = _baseTokenURI;\\r\\n        stableToken = IERC20(_stableToken);\\r\\n    }\\r\\n\\r\\n    /// @notice Mint your ONFTs\\r\\n    function publicMint(uint _nbTokens) external payable {\\r\\n        require(_publicSaleStarted == true, \\\"KanpaiPandas: Public sale has not started yet!\\\");\\r\\n        require(_saleStarted == true, \\\"KanpaiPandas: Sale has not started yet!\\\");\\r\\n        require(_nbTokens != 0, \\\"KanpaiPandas: Cannot mint 0 tokens!\\\");\\r\\n        require(_nbTokens <= maxTokensPerMint, \\\"KanpaiPandas: You cannot mint more than maxTokensPerMint tokens at once!\\\");\\r\\n        require(nextMintId + _nbTokens <= maxMintId, \\\"KanpaiPandas: max mint limit reached\\\");\\r\\n        require(_nbTokens * price <= msg.value, \\\"KanpaiPandas: Inconsistent amount sent!\\\");\\r\\n\\r\\n        //using a local variable, _mint and ++X pattern to save gas\\r\\n        uint local_nextMintId = nextMintId;\\r\\n        for (uint i; i < _nbTokens; i++) {\\r\\n            _mint(msg.sender, ++local_nextMintId);\\r\\n        }\\r\\n        nextMintId = local_nextMintId;\\r\\n    }\\r\\n\\r\\n    /// @notice Mint your ONFTs, whitelisted addresses only\\r\\n    function mint(uint _nbTokens, bytes32[] calldata _merkleProof) external payable {\\r\\n        require(_saleStarted == true, \\\"KanpaiPandas: Sale has not started yet!\\\");\\r\\n        require(_nbTokens != 0, \\\"KanpaiPandas: Cannot mint 0 tokens!\\\");\\r\\n        require(_nbTokens <= maxTokensPerMint, \\\"KanpaiPandas: You cannot mint more than maxTokensPerMint tokens at once!\\\");\\r\\n        require(nextMintId + _nbTokens <= maxMintId, \\\"KanpaiPandas: max mint limit reached\\\");\\r\\n        require(_nbTokens * price <= msg.value, \\\"KanpaiPandas: Inconsistent amount sent!\\\");\\r\\n        require(_boughtCount[msg.sender] + _nbTokens <= maxTokensPerMint, \\\"KanpaiPandas: You exceeded your token limit.\\\");\\r\\n\\r\\n        bool isWL = MerkleProof.verify(_merkleProof, merkleRoot, keccak256(abi.encodePacked(_msgSender())));\\r\\n        require(isWL == true, \\\"KanpaiPandas: Invalid Merkle Proof\\\");\\r\\n\\r\\n        _boughtCount[msg.sender] += _nbTokens;\\r\\n\\r\\n        //using a local variable, _mint and ++X pattern to save gas\\r\\n        uint local_nextMintId = nextMintId;\\r\\n        for (uint i; i < _nbTokens; i++) {\\r\\n            _mint(msg.sender, ++local_nextMintId);\\r\\n        }\\r\\n        nextMintId = local_nextMintId;\\r\\n    }\\r\\n\\r\\n    /// @notice gasless mint \\r\\n    function gaslessMint(uint _nbTokens, address minter) external onlyGelatoRelay {\\r\\n        require(_publicSaleStarted == true, \\\"KanpaiPandas: Public sale has not started yet!\\\");\\r\\n        require(_saleStarted == true, \\\"KanpaiPandas: Sale has not started yet!\\\");\\r\\n        require(_nbTokens != 0, \\\"KanpaiPandas: Cannot mint 0 tokens!\\\");\\r\\n        require(_nbTokens <= maxTokensPerMint, \\\"KanpaiPandas: You cannot mint more than maxTokensPerMint tokens at once!\\\");\\r\\n        require(nextMintId + _nbTokens <= maxMintId, \\\"KanpaiPandas: max mint limit reached\\\");\\r\\n        require(stablePrice > 0, \\\"KanpaiPandas: you need to set stable price\\\");\\r\\n        require(address(stableToken) != address(0), \\\"KanpaiPandas: not support stable mint\\\");\\r\\n\\r\\n        _transferRelayFee();\\r\\n\\r\\n        stableToken.safeTransferFrom(minter, beneficiary, stablePrice * _nbTokens);\\r\\n\\r\\n        //using a local variable, _mint and ++X pattern to save gas\\r\\n        uint local_nextMintId = nextMintId;\\r\\n        for (uint i; i < _nbTokens; i++) {\\r\\n            _mint(minter, ++local_nextMintId);\\r\\n        }\\r\\n        nextMintId = local_nextMintId;\\r\\n    }\\r\\n\\r\\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\r\\n        merkleRoot = _merkleRoot;\\r\\n    }\\r\\n\\r\\n    function setPrice(uint newPrice) external onlyOwner {\\r\\n        price = newPrice;\\r\\n    }\\r\\n\\r\\n    function setStablePrice(uint newPrice) external onlyOwner {\\r\\n        stablePrice = newPrice;\\r\\n    }\\r\\n\\r\\n    function withdraw() public virtual onlyOwner {\\r\\n        require(beneficiary != address(0), \\\"KanpaiPandas: Beneficiary not set!\\\");\\r\\n        uint _balance = address(this).balance;\\r\\n        require(payable(beneficiary).send(_balance));\\r\\n    }\\r\\n\\r\\n    function royaltyInfo(uint, uint salePrice) external view returns (address receiver, uint royaltyAmount) {\\r\\n        receiver = beneficiary;\\r\\n        royaltyAmount = (salePrice * royaltyBasisPoints) / 10000;\\r\\n    }\\r\\n\\r\\n    function setContractURI(string memory _contractURI) public onlyOwner {\\r\\n        contractURI = _contractURI;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory uri) public onlyOwner {\\r\\n        baseURI = uri;\\r\\n    }\\r\\n\\r\\n    function setRoyaltyFee(uint _royaltyBasisPoints) external onlyOwner {\\r\\n        royaltyBasisPoints = _royaltyBasisPoints;\\r\\n    }\\r\\n\\r\\n    function setBeneficiary(address payable _beneficiary) external onlyOwner {\\r\\n        beneficiary = _beneficiary;\\r\\n    }\\r\\n\\r\\n    function flipRevealed() external onlyOwner {\\r\\n        revealed = !revealed;\\r\\n    }\\r\\n\\r\\n    function flipSaleStarted() external onlyOwner {\\r\\n        _saleStarted = !_saleStarted;\\r\\n    }\\r\\n\\r\\n    function flipPublicSaleStarted() external onlyOwner {\\r\\n        _publicSaleStarted = !_publicSaleStarted;\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint tokenId) public view override(ERC721) returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n        return string(abi.encodePacked(_baseURI(), tokenId.toString()));\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0x2cf31a3bd243774a51a186025b15fbb0b0792b585fd0ad68075f20e98ec7a976\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040526000600e556101f460125560006019553480156200002157600080fd5b506040516200526c3803806200526c8339810160408190526200004491620002ba565b87878782828280806200005733620000f4565b60601b6001600160601b031916608052505081516200007e90600390602085019062000144565b5080516200009490600490602084019062000144565b50506001600d55505050600f8690555060108490556011839055601380546001600160a01b031916331790558151620000d590601690602085019062000144565b5060601b6001600160601b03191660a05250620003dd95505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805462000152906200038a565b90600052602060002090601f016020900481019282620001765760008555620001c1565b82601f106200019157805160ff1916838001178555620001c1565b82800160010185558215620001c1579182015b82811115620001c1578251825591602001919060010190620001a4565b50620001cf929150620001d3565b5090565b5b80821115620001cf5760008155600101620001d4565b80516001600160a01b03811681146200020257600080fd5b919050565b600082601f83011262000218578081fd5b81516001600160401b0380821115620002355762000235620003c7565b604051601f8301601f19908116603f01168101908282118183101715620002605762000260620003c7565b816040528381526020925086838588010111156200027c578485fd5b8491505b838210156200029f578582018301518183018401529082019062000280565b83821115620002b057848385830101525b9695505050505050565b600080600080600080600080610100898b031215620002d7578384fd5b88516001600160401b0380821115620002ee578586fd5b620002fc8c838d0162000207565b995060208b015191508082111562000312578586fd5b620003208c838d0162000207565b98506200033060408c01620001ea565b975060608b0151965060808b0151955060a08b0151945060c08b01519150808211156200035b578384fd5b506200036a8b828c0162000207565b9250506200037b60e08a01620001ea565b90509295985092959890939650565b600181811c908216806200039f57607f821691505b60208210811415620003c157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c614e16620004566000396000818161098f015281816110ff01526111b6015260008181610a4601528181610b5701528181610d550152818161125e015281816113900152818161187d015281816120e3015281816124c601528181612c4901526134580152614e166000f3fe60806040526004361061039a5760003560e01c806366ad5c8a116101dc578063a22cb46511610102578063dacbcbe2116100a0578063e985e9c51161006f578063e985e9c514610aab578063eb8d72b714610af4578063f2fde38b14610b14578063f5ecbdbc14610b3457600080fd5b8063dacbcbe214610a37578063db61e31714610a6a578063e1d4c87014610a80578063e8a3d48514610a9657600080fd5b8063ba41b0c6116100dc578063ba41b0c6146109d1578063c87b56dd146109e4578063cbed8b9c14610a04578063d1deba1f14610a2457600080fd5b8063a22cb4651461095d578063a9d75b2b1461097d578063b88d4fde146109b157600080fd5b8063899d7b381161017a578063938e3d7b11610149578063938e3d7b146108f257806395d89b4114610912578063a035b1fe14610927578063a20f04541461093d57600080fd5b8063899d7b38146108505780638da5cb5b146108655780638ee749121461088357806391b7f5ed146108d257600080fd5b806370a08231116101b657806370a08231146107dc578063715018a6146107fc5780637cb647591461081157806387c348bf1461083157600080fd5b806366ad5c8a1461078657806369b41f95146107a65780636aa99da3146107c657600080fd5b80632a55205a116102c15780633e4086e51161025f578063519056361161022e578063519056361461071957806355f804b31461072c578063600e97f61461074c5780636352211e1461076657600080fd5b80633e4086e51461069957806342842e0e146106b957806342d65a8d146106d95780634f6ccce7146106f957600080fd5b80632f745c591161029b5780632f745c591461062f5780633b2c3fb61461064f5780633ccfd60b146106645780633d8b38f61461067957600080fd5b80632a55205a146105c75780632db11544146106065780632eb4a7ab1461061957600080fd5b8063105dc7d21161033957806318160ddd1161030857806318160ddd1461053d5780631c31f7101461055257806323b872dd146105725780632a205e3d1461059257600080fd5b8063105dc7d2146104d257806310ddb137146104f25780631291e33e14610512578063174654711461052757600080fd5b806307e0db171161037557806307e0db171461041f578063081812fc1461043f578063095ea7b31461047757806309dc20ce1461049757600080fd5b80621d3567146103a657806301ffc9a7146103c857806306fdde03146103fd57600080fd5b366103a157005b600080fd5b3480156103b257600080fd5b506103c66103c136600461436f565b610b54565b005b3480156103d457600080fd5b506103e86103e336600461407d565b610c5d565b60405190151581526020015b60405180910390f35b34801561040957600080fd5b50610412610c80565b6040516103f491906146f2565b34801561042b57600080fd5b506103c661043a366004614170565b610d12565b34801561044b57600080fd5b5061045f61045a366004614065565b610dbd565b6040516001600160a01b0390911681526020016103f4565b34801561048357600080fd5b506103c661049236600461401e565b610e52565b3480156104a357600080fd5b506104c46104b2366004613e3c565b60176020526000908152604090205481565b6040519081526020016103f4565b3480156104de57600080fd5b506103c66104ed366004614499565b610f68565b3480156104fe57600080fd5b506103c661050d366004614170565b61121b565b34801561051e57600080fd5b506103c6611295565b34801561053357600080fd5b506104c460115481565b34801561054957600080fd5b50600b546104c4565b34801561055e57600080fd5b506103c661056d366004613e3c565b6112d3565b34801561057e57600080fd5b506103c661058d366004613e90565b61131f565b34801561059e57600080fd5b506105b26105ad366004614250565b611351565b604080519283526020830191909152016103f4565b3480156105d357600080fd5b506105e76105e2366004614536565b61142b565b604080516001600160a01b0390931683526020830191909152016103f4565b6103c6610614366004614065565b611461565b34801561062557600080fd5b506104c460145481565b34801561063b57600080fd5b506104c461064a36600461401e565b611584565b34801561065b57600080fd5b506103c661161a565b34801561067057600080fd5b506103c6611663565b34801561068557600080fd5b506103e86106943660046141a8565b611725565b3480156106a557600080fd5b506103c66106b4366004614065565b6117f2565b3480156106c557600080fd5b506103c66106d4366004613e90565b611821565b3480156106e557600080fd5b506103c66106f43660046141a8565b61183c565b34801561070557600080fd5b506104c4610714366004614065565b6118ed565b6103c6610727366004613f66565b61198e565b34801561073857600080fd5b506103c661074736600461412b565b61199d565b34801561075857600080fd5b506018546103e89060ff1681565b34801561077257600080fd5b5061045f610781366004614065565b6119de565b34801561079257600080fd5b506103c66107a136600461436f565b611a55565b3480156107b257600080fd5b506104126107c1366004614170565b611ab0565b3480156107d257600080fd5b506104c4600f5481565b3480156107e857600080fd5b506104c46107f7366004613e3c565b611b57565b34801561080857600080fd5b506103c6611bde565b34801561081d57600080fd5b506103c661082c366004614065565b611c14565b34801561083d57600080fd5b506018546103e890610100900460ff1681565b34801561085c57600080fd5b506103c6611c43565b34801561087157600080fd5b506000546001600160a01b031661045f565b34801561088f57600080fd5b506104c461089e3660046141fa565b6002602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156108de57600080fd5b506103c66108ed366004614065565b611c8a565b3480156108fe57600080fd5b506103c661090d36600461412b565b611cb9565b34801561091e57600080fd5b50610412611cf6565b34801561093357600080fd5b506104c4600e5481565b34801561094957600080fd5b506103c6610958366004614065565b611d05565b34801561096957600080fd5b506103c6610978366004613f39565b611d34565b34801561098957600080fd5b5061045f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156109bd57600080fd5b506103c66109cc366004613ed0565b611d3f565b6103c66109df3660046144bd565b611d71565b3480156109f057600080fd5b506104126109ff366004614065565b611feb565b348015610a1057600080fd5b506103c6610a1f36600461443a565b6120a2565b6103c6610a323660046142e1565b612159565b348015610a4357600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061045f565b348015610a7657600080fd5b506104c460195481565b348015610a8c57600080fd5b506104c460105481565b348015610aa257600080fd5b506104126122ff565b348015610ab757600080fd5b506103e8610ac6366004613e58565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b348015610b0057600080fd5b506103c6610b0f3660046141a8565b61238d565b348015610b2057600080fd5b506103c6610b2f366004613e3c565b612416565b348015610b4057600080fd5b50610412610b4f3660046143ea565b6124ae565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610b8957600080fd5b61ffff841660009081526001602052604090208054610ba790614cd6565b90508351148015610be6575061ffff8416600090815260016020526040908190209051610bd49190614617565b60405180910390208380519060200120145b610c4b5760405162461bcd60e51b815260206004820152602b60248201527f4c7a52656365697665723a20696e76616c696420736f757263652073656e646960448201526a1b99c818dbdb9d1c9858dd60aa1b60648201526084015b60405180910390fd5b610c57848484846125e6565b50505050565b60006001600160e01b031982161580610c7a5750610c7a826126d7565b92915050565b606060038054610c8f90614cd6565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbb90614cd6565b8015610d085780601f10610cdd57610100808354040283529160200191610d08565b820191906000526020600020905b815481529060010190602001808311610ceb57829003601f168201915b5050505050905090565b6000546001600160a01b03163314610d3c5760405162461bcd60e51b8152600401610c42906148bf565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610da257600080fd5b505af1158015610db6573d6000803e3d6000fd5b5050505050565b6000818152600560205260408120546001600160a01b0316610e365760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c42565b506000908152600760205260409020546001600160a01b031690565b6000610e5d826119de565b9050806001600160a01b0316836001600160a01b03161415610ecb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610c42565b336001600160a01b0382161480610ee75750610ee78133610ac6565b610f595760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610c42565b610f6383836126fc565b505050565b73abcc9b596420a9e9172fd5938620e265a0f9df923314610fd65760405162461bcd60e51b815260206004820152602260248201527f47656c61746f52656c6179436f6e746578742e6f6e6c7947656c61746f52656c604482015261617960f01b6064820152608401610c42565b60185460ff161515600114610ffd5760405162461bcd60e51b8152600401610c42906147bc565b60185460ff61010090910416151560011461102a5760405162461bcd60e51b8152600401610c429061480a565b816110475760405162461bcd60e51b8152600401610c4290614779565b6011548211156110695760405162461bcd60e51b8152600401610c4290614851565b60105482600f5461107a9190614c48565b11156110985760405162461bcd60e51b8152600401610c42906148f4565b6000601954116110fd5760405162461bcd60e51b815260206004820152602a60248201527f4b616e70616950616e6461733a20796f75206e65656420746f2073657420737460448201526961626c6520707269636560b01b6064820152608401610c42565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111815760405162461bcd60e51b815260206004820152602560248201527f4b616e70616950616e6461733a206e6f7420737570706f727420737461626c65604482015264081b5a5b9d60da1b6064820152608401610c42565b61118961276a565b6013546019546111de9183916001600160a01b03909116906111ac908690614c74565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190612795565b600f5460005b8381101561121357611201836111f984614d11565b935083612800565b8061120b81614d11565b9150506111e4565b50600f555050565b6000546001600160a01b031633146112455760405162461bcd60e51b8152600401610c42906148bf565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610d88565b6000546001600160a01b031633146112bf5760405162461bcd60e51b8152600401610c42906148bf565b6018805460ff19811660ff90911615179055565b6000546001600160a01b031633146112fd5760405162461bcd60e51b8152600401610c42906148bf565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b61132a335b8261294e565b6113465760405162461bcd60e51b8152600401610c4290614938565b610f63838383612a41565b60008060008686604051602001611369929190614705565b60408051601f198184030181529082905263040a7bb160e41b825291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb10906113cd908b90309086908b908b906004016149d0565b604080518083038186803b1580156113e457600080fd5b505afa1580156113f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141c9190614557565b92509250509550959350505050565b6013546012546001600160a01b03909116906000906127109061144e9085614c74565b6114589190614c60565b90509250929050565b60185460ff1615156001146114885760405162461bcd60e51b8152600401610c42906147bc565b60185460ff6101009091041615156001146114b55760405162461bcd60e51b8152600401610c429061480a565b806114d25760405162461bcd60e51b8152600401610c4290614779565b6011548111156114f45760405162461bcd60e51b8152600401610c4290614851565b60105481600f546115059190614c48565b11156115235760405162461bcd60e51b8152600401610c42906148f4565b34600e54826115329190614c74565b11156115505760405162461bcd60e51b8152600401610c4290614989565b600f5460005b8281101561157d5761156b336111f984614d11565b8061157581614d11565b915050611556565b50600f5550565b600061158f83611b57565b82106115f15760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610c42565b506001600160a01b03919091166000908152600960209081526040808320938352929052205490565b6000546001600160a01b031633146116445760405162461bcd60e51b8152600401610c42906148bf565b6018805462ff0000198116620100009182900460ff1615909102179055565b6000546001600160a01b0316331461168d5760405162461bcd60e51b8152600401610c42906148bf565b6013546001600160a01b03166116f05760405162461bcd60e51b815260206004820152602260248201527f4b616e70616950616e6461733a2042656e6566696369617279206e6f74207365604482015261742160f01b6064820152608401610c42565b60135460405147916001600160a01b03169082156108fc029083906000818181858888f1935050505061172257600080fd5b50565b61ffff83166000908152600160205260408120805482919061174690614cd6565b80601f016020809104026020016040519081016040528092919081815260200182805461177290614cd6565b80156117bf5780601f10611794576101008083540402835291602001916117bf565b820191906000526020600020905b8154815290600101906020018083116117a257829003601f168201915b5050505050905083836040516117d69291906145eb565b60405180910390208180519060200120149150505b9392505050565b6000546001600160a01b0316331461181c5760405162461bcd60e51b8152600401610c42906148bf565b601255565b610f6383838360405180602001604052806000815250611d3f565b6000546001600160a01b031633146118665760405162461bcd60e51b8152600401610c42906148bf565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d906118b690869086908690600401614a24565b600060405180830381600087803b1580156118d057600080fd5b505af11580156118e4573d6000803e3d6000fd5b50505050505050565b60006118f8600b5490565b821061195b5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610c42565b600b828154811061197c57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6118e487878787878787612be8565b6000546001600160a01b031633146119c75760405162461bcd60e51b8152600401610c42906148bf565b80516119da906016906020840190613c49565b5050565b6000818152600560205260408120546001600160a01b031680610c7a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610c42565b333014611aa45760405162461bcd60e51b815260206004820181905260248201527f4c7a52656365697665723a2063616c6c6572206d757374206265204c7a4170706044820152606401610c42565b610c5784848484612d3f565b61ffff81166000908152600160205260409020805460609190611ad290614cd6565b80601f0160208091040260200160405190810160405280929190818152602001828054611afe90614cd6565b8015611b4b5780601f10611b2057610100808354040283529160200191611b4b565b820191906000526020600020905b815481529060010190602001808311611b2e57829003601f168201915b50505050509050919050565b60006001600160a01b038216611bc25760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610c42565b506001600160a01b031660009081526006602052604090205490565b6000546001600160a01b03163314611c085760405162461bcd60e51b8152600401610c42906148bf565b611c126000612dda565b565b6000546001600160a01b03163314611c3e5760405162461bcd60e51b8152600401610c42906148bf565b601455565b6000546001600160a01b03163314611c6d5760405162461bcd60e51b8152600401610c42906148bf565b6018805461ff001981166101009182900460ff1615909102179055565b6000546001600160a01b03163314611cb45760405162461bcd60e51b8152600401610c42906148bf565b600e55565b6000546001600160a01b03163314611ce35760405162461bcd60e51b8152600401610c42906148bf565b80516119da906015906020840190613c49565b606060048054610c8f90614cd6565b6000546001600160a01b03163314611d2f5760405162461bcd60e51b8152600401610c42906148bf565b601955565b6119da338383612e2a565b611d49338361294e565b611d655760405162461bcd60e51b8152600401610c4290614938565b610c5784848484612ef9565b60185460ff610100909104161515600114611d9e5760405162461bcd60e51b8152600401610c429061480a565b82611dbb5760405162461bcd60e51b8152600401610c4290614779565b601154831115611ddd5760405162461bcd60e51b8152600401610c4290614851565b60105483600f54611dee9190614c48565b1115611e0c5760405162461bcd60e51b8152600401610c42906148f4565b34600e5484611e1b9190614c74565b1115611e395760405162461bcd60e51b8152600401610c4290614989565b60115433600090815260176020526040902054611e57908590614c48565b1115611eba5760405162461bcd60e51b815260206004820152602c60248201527f4b616e70616950616e6461733a20596f7520657863656564656420796f75722060448201526b3a37b5b2b7103634b6b4ba1760a11b6064820152608401610c42565b6000611f31838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506014546040516bffffffffffffffffffffffff193360601b166020820152909250603401905060405160208183030381529060405280519060200120612f2c565b9050600181151514611f905760405162461bcd60e51b815260206004820152602260248201527f4b616e70616950616e6461733a20496e76616c6964204d65726b6c652050726f60448201526137b360f11b6064820152608401610c42565b3360009081526017602052604081208054869290611faf908490614c48565b9091555050600f5460005b85811015611fe157611fcf336111f984614d11565b80611fd981614d11565b915050611fba565b50600f5550505050565b6000818152600560205260409020546060906001600160a01b031661206a5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610c42565b612072612f42565b61207b83612f51565b60405160200161208c929190614686565b6040516020818303038152906040529050919050565b6000546001600160a01b031633146120cc5760405162461bcd60e51b8152600401610c42906148bf565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906121209088908890889088908890600401614b9b565b600060405180830381600087803b15801561213a57600080fd5b505af115801561214e573d6000803e3d6000fd5b505050505050505050565b61ffff8516600090815260026020526040808220905161217a9087906145fb565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806121ee5760405162461bcd60e51b815260206004820152601d60248201527f4c7a52656365697665723a206e6f2073746f726564206d6573736167650000006044820152606401610c42565b8083836040516121ff9291906145eb565b6040518091039020146122545760405162461bcd60e51b815260206004820152601b60248201527f4c7a52656365697665723a20696e76616c6964207061796c6f616400000000006044820152606401610c42565b61ffff861660009081526002602052604080822090516122759088906145fb565b9081526040805191829003602090810183206001600160401b038916600090815291522091909155633356ae4560e11b815230906366ad5c8a906122c59089908990899089908990600401614a42565b600060405180830381600087803b1580156122df57600080fd5b505af11580156122f3573d6000803e3d6000fd5b50505050505050505050565b6015805461230c90614cd6565b80601f016020809104026020016040519081016040528092919081815260200182805461233890614cd6565b80156123855780601f1061235a57610100808354040283529160200191612385565b820191906000526020600020905b81548152906001019060200180831161236857829003601f168201915b505050505081565b6000546001600160a01b031633146123b75760405162461bcd60e51b8152600401610c42906148bf565b61ffff831660009081526001602052604090206123d5908383613ccd565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161240993929190614a24565b60405180910390a1505050565b6000546001600160a01b031633146124405760405162461bcd60e51b8152600401610c42906148bf565b6001600160a01b0381166124a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c42565b61172281612dda565b6040516304b2b47b60e11b81523060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90829063096568f69060240160206040518083038186803b15801561251857600080fd5b505afa15801561252c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612550919061418c565b6040516001600160e01b031960e084901b16815261ffff918216600482015290871660248201523060448201526064810185905260840160006040518083038186803b15801561259f57600080fd5b505afa1580156125b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125db91908101906140b5565b90505b949350505050565b604051633356ae4560e11b815230906366ad5c8a9061260f908790879087908790600401614a81565b600060405180830381600087803b15801561262957600080fd5b505af192505050801561263a575060015b610c57578080519060200120600260008661ffff1661ffff1681526020019081526020016000208460405161266f91906145fb565b9081526040805191829003602090810183206001600160401b0387166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d906126ca908690869086908690614a81565b60405180910390a1610c57565b60006001600160e01b0319821663780e9d6360e01b1480610c7a5750610c7a8261306a565b600081815260076020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612731826119de565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611c126127756130aa565b61277d6130b9565b6127856130c3565b6001600160a01b031691906130cd565b6040516001600160a01b0380851660248301528316604482015260648101829052610c579085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613119565b6001600160a01b0382166128565760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c42565b6000818152600560205260409020546001600160a01b0316156128bb5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c42565b6128c7600083836131eb565b6001600160a01b03821660009081526006602052604081208054600192906128f0908490614c48565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000818152600560205260408120546001600160a01b03166129c75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c42565b60006129d2836119de565b9050806001600160a01b0316846001600160a01b03161480612a0d5750836001600160a01b0316612a0284610dbd565b6001600160a01b0316145b806125de57506001600160a01b0380821660009081526008602090815260408083209388168352929052205460ff166125de565b826001600160a01b0316612a54826119de565b6001600160a01b031614612ab85760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610c42565b6001600160a01b038216612b1a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c42565b612b258383836131eb565b612b306000826126fc565b6001600160a01b0383166000908152600660205260408120805460019290612b59908490614c93565b90915550506001600160a01b0382166000908152600660205260408120805460019290612b87908490614c48565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612bf4878787876132a3565b60008585604051602001612c09929190614705565b6040516020818303038152906040529050612c2787828686866133a5565b604051630f428ae960e31b815261ffff881660048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a1457489060440160206040518083038186803b158015612c9357600080fd5b505afa158015612ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccb919061457a565b905086604051612cdb91906145fb565b604080519182900382208883526001600160401b03841660208401529161ffff8b16916001600160a01b038d16917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a4505050505050505050565b60008082806020019051810190612d5691906140e7565b60148201519193509150612d6b8782846134b1565b806001600160a01b031686604051612d8391906145fb565b604080519182900382208583526001600160401b03891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b03161415612e8c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c42565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612f04848484612a41565b612f10848484846134bb565b610c575760405162461bcd60e51b8152600401610c4290614727565b600082612f3985846135c5565b14949350505050565b606060168054610c8f90614cd6565b606081612f755750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612f9f5780612f8981614d11565b9150612f989050600a83614c60565b9150612f79565b6000816001600160401b03811115612fc757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ff1576020820181803683370190505b5090505b84156125de57613006600183614c93565b9150613013600a86614d2c565b61301e906030614c48565b60f81b81838151811061304157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613063600a86614c60565b9450612ff5565b60006001600160e01b031982166380ac58cd60e01b148061309b57506001600160e01b03198216635b5e139f60e01b145b80610c7a5750610c7a82613647565b60006130b461367c565b905090565b60006130b46136a3565b60006130b46136ca565b806130d757505050565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461310f57610f636001600160a01b03841683836136d9565b610f638282613709565b600061316e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138229092919063ffffffff16565b805190915015610f63578080602001905181019061318c9190614049565b610f635760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c42565b6001600160a01b0383166132465761324181600b80546000838152600c60205260408120829055600182018355919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90155565b613269565b816001600160a01b0316836001600160a01b031614613269576132698382613831565b6001600160a01b03821661328057610f63816138ce565b826001600160a01b0316826001600160a01b031614610f6357610f6382826139a7565b6132ac33611324565b61331e5760405162461bcd60e51b815260206004820152603860248201527f4f4e4654373231456e756d657261626c653a2073656e642063616c6c6572206960448201527f73206e6f74206f776e6572206e6f7220617070726f76656400000000000000006064820152608401610c42565b836001600160a01b0316613331826119de565b6001600160a01b03161461339c5760405162461bcd60e51b815260206004820152602c60248201527f4f4e4654373231456e756d657261626c653a2073656e642066726f6d20696e6360448201526b37b93932b1ba1037bbb732b960a11b6064820152608401610c42565b610c57816139eb565b61ffff8516600090815260016020526040902080546133c390614cd6565b1515905061342e5760405162461bcd60e51b815260206004820152603260248201527f4c7a53656e643a2064657374696e6174696f6e20636861696e206973206e6f746044820152711030903a393ab9ba32b21039b7bab931b29760711b6064820152608401610c42565b61ffff851660009081526001602052604090819020905162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c5803100913491613498918a91908a908a908a908a90600401614abf565b6000604051808303818588803b1580156122df57600080fd5b610f638282613a92565b60006001600160a01b0384163b156135bd57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906134ff9033908990889088906004016146b5565b602060405180830381600087803b15801561351957600080fd5b505af1925050508015613549575060408051601f3d908101601f1916820190925261354691810190614099565b60015b6135a3573d808015613577576040519150601f19603f3d011682016040523d82523d6000602084013e61357c565b606091505b50805161359b5760405162461bcd60e51b8152600401610c4290614727565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506125de565b5060016125de565b600081815b845181101561363f5760008582815181106135f557634e487b7160e01b600052603260045260246000fd5b6020026020010151905080831161361b576000838152602082905260409020925061362c565b600081815260208490526040902092505b508061363781614d11565b9150506135ca565b509392505050565b60006001600160e01b03198216637bb0080b60e01b1480610c7a57506301ffc9a760e01b6001600160e01b0319831614610c7a565b6000803661368b606082614c93565b613696928290614c20565b8101906130b49190613e3c565b600080366136b2602082614c93565b6136bd928290614c20565b8101906130b49190614065565b6000803661368b604082614c93565b6040516001600160a01b038316602482015260448101829052610f6390849063a9059cbb60e01b906064016127c9565b804710156137595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c42565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146137a6576040519150601f19603f3d011682016040523d82523d6000602084013e6137ab565b606091505b5050905080610f635760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c42565b60606125de8484600085613aac565b6000600161383e84611b57565b6138489190614c93565b6000838152600a602052604090205490915080821461389b576001600160a01b03841660009081526009602090815260408083208584528252808320548484528184208190558352600a90915290208190555b506000918252600a602090815260408084208490556001600160a01b039094168352600981528383209183525290812055565b600b546000906138e090600190614c93565b6000838152600c6020526040812054600b805493945090928490811061391657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600b838154811061394557634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600c9091526040808220849055858252812055600b80548061398b57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006139b283611b57565b6001600160a01b0390931660009081526009602090815260408083208684528252808320859055938252600a9052919091209190915550565b60006139f6826119de565b9050613a04816000846131eb565b613a0f6000836126fc565b6001600160a01b0381166000908152600660205260408120805460019290613a38908490614c93565b909155505060008281526005602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6119da828260405180602001604052806000815250613bdd565b606082471015613b0d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c42565b6001600160a01b0385163b613b645760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c42565b600080866001600160a01b03168587604051613b8091906145fb565b60006040518083038185875af1925050503d8060008114613bbd576040519150601f19603f3d011682016040523d82523d6000602084013e613bc2565b606091505b5091509150613bd2828286613c10565b979650505050505050565b613be78383612800565b613bf460008484846134bb565b610f635760405162461bcd60e51b8152600401610c4290614727565b60608315613c1f5750816117eb565b825115613c2f5782518084602001fd5b8160405162461bcd60e51b8152600401610c4291906146f2565b828054613c5590614cd6565b90600052602060002090601f016020900481019282613c775760008555613cbd565b82601f10613c9057805160ff1916838001178555613cbd565b82800160010185558215613cbd579182015b82811115613cbd578251825591602001919060010190613ca2565b50613cc9929150613d41565b5090565b828054613cd990614cd6565b90600052602060002090601f016020900481019282613cfb5760008555613cbd565b82601f10613d145782800160ff19823516178555613cbd565b82800160010185558215613cbd579182015b82811115613cbd578235825591602001919060010190613d26565b5b80821115613cc95760008155600101613d42565b6000613d69613d6484614bf9565b614bc9565b9050828152838383011115613d7d57600080fd5b828260208301376000602084830101529392505050565b60008083601f840112613da5578182fd5b5081356001600160401b03811115613dbb578182fd5b602083019150836020828501011115613dd357600080fd5b9250929050565b600082601f830112613dea578081fd5b6117eb83833560208501613d56565b600082601f830112613e09578081fd5b8151613e17613d6482614bf9565b818152846020838601011115613e2b578283fd5b6125de826020830160208701614caa565b600060208284031215613e4d578081fd5b81356117eb81614d82565b60008060408385031215613e6a578081fd5b8235613e7581614d82565b91506020830135613e8581614d82565b809150509250929050565b600080600060608486031215613ea4578081fd5b8335613eaf81614d82565b92506020840135613ebf81614d82565b929592945050506040919091013590565b60008060008060808587031215613ee5578081fd5b8435613ef081614d82565b93506020850135613f0081614d82565b92506040850135915060608501356001600160401b03811115613f21578182fd5b613f2d87828801613dda565b91505092959194509250565b60008060408385031215613f4b578182fd5b8235613f5681614d82565b91506020830135613e8581614d97565b600080600080600080600060e0888a031215613f80578485fd5b8735613f8b81614d82565b96506020880135613f9b81614dbb565b955060408801356001600160401b0380821115613fb6578687fd5b613fc28b838c01613dda565b965060608a0135955060808a01359150613fdb82614d82565b90935060a089013590613fed82614d82565b90925060c08901359080821115614002578283fd5b5061400f8a828b01613dda565b91505092959891949750929550565b60008060408385031215614030578182fd5b823561403b81614d82565b946020939093013593505050565b60006020828403121561405a578081fd5b81516117eb81614d97565b600060208284031215614076578081fd5b5035919050565b60006020828403121561408e578081fd5b81356117eb81614da5565b6000602082840312156140aa578081fd5b81516117eb81614da5565b6000602082840312156140c6578081fd5b81516001600160401b038111156140db578182fd5b6125de84828501613df9565b600080604083850312156140f9578182fd5b82516001600160401b0381111561410e578283fd5b61411a85828601613df9565b925050602083015190509250929050565b60006020828403121561413c578081fd5b81356001600160401b03811115614151578182fd5b8201601f81018413614161578182fd5b6125de84823560208401613d56565b600060208284031215614181578081fd5b81356117eb81614dbb565b60006020828403121561419d578081fd5b81516117eb81614dbb565b6000806000604084860312156141bc578081fd5b83356141c781614dbb565b925060208401356001600160401b038111156141e1578182fd5b6141ed86828701613d94565b9497909650939450505050565b60008060006060848603121561420e578081fd5b833561421981614dbb565b925060208401356001600160401b03811115614233578182fd5b61423f86828701613dda565b925050604084013590509250925092565b600080600080600060a08688031215614267578283fd5b853561427281614dbb565b945060208601356001600160401b038082111561428d578485fd5b61429989838a01613dda565b955060408801359450606088013591506142b282614d97565b909250608087013590808211156142c7578283fd5b506142d488828901613dda565b9150509295509295909350565b6000806000806000608086880312156142f8578283fd5b853561430381614dbb565b945060208601356001600160401b038082111561431e578485fd5b61432a89838a01613dda565b95506040880135915061433c82614dcb565b90935060608701359080821115614351578283fd5b5061435e88828901613d94565b969995985093965092949392505050565b60008060008060808587031215614384578182fd5b843561438f81614dbb565b935060208501356001600160401b03808211156143aa578384fd5b6143b688838901613dda565b9450604087013591506143c882614dcb565b909250606086013590808211156143dd578283fd5b50613f2d87828801613dda565b600080600080608085870312156143ff578182fd5b843561440a81614dbb565b9350602085013561441a81614dbb565b9250604085013561442a81614d82565b9396929550929360600135925050565b600080600080600060808688031215614451578283fd5b853561445c81614dbb565b9450602086013561446c81614dbb565b93506040860135925060608601356001600160401b0381111561448d578182fd5b61435e88828901613d94565b600080604083850312156144ab578182fd5b823591506020830135613e8581614d82565b6000806000604084860312156144d1578081fd5b8335925060208401356001600160401b03808211156144ee578283fd5b818601915086601f830112614501578283fd5b81358181111561450f578384fd5b8760208260051b8501011115614523578384fd5b6020830194508093505050509250925092565b60008060408385031215614548578182fd5b50508035926020909101359150565b60008060408385031215614569578182fd5b505080516020909101519092909150565b60006020828403121561458b578081fd5b81516117eb81614dcb565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526145d7816020860160208601614caa565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b6000825161460d818460208701614caa565b9190910192915050565b600080835461462581614cd6565b6001828116801561463d576001811461464e5761467a565b60ff1984168752828701945061467a565b8786526020808720875b858110156146715781548a820152908401908201614658565b50505082870194505b50929695505050505050565b60008351614698818460208801614caa565b8351908301906146ac818360208801614caa565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906146e8908301846145bf565b9695505050505050565b6020815260006117eb60208301846145bf565b60408152600061471860408301856145bf565b90508260208301529392505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526023908201527f4b616e70616950616e6461733a2043616e6e6f74206d696e74203020746f6b656040820152626e732160e81b606082015260800190565b6020808252602e908201527f4b616e70616950616e6461733a205075626c69632073616c6520686173206e6f60408201526d742073746172746564207965742160901b606082015260800190565b60208082526027908201527f4b616e70616950616e6461733a2053616c6520686173206e6f742073746172746040820152666564207965742160c81b606082015260800190565b60208082526048908201527f4b616e70616950616e6461733a20596f752063616e6e6f74206d696e74206d6f60408201527f7265207468616e206d6178546f6b656e735065724d696e7420746f6b656e73206060820152676174206f6e63652160c01b608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f4b616e70616950616e6461733a206d6178206d696e74206c696d69742072656160408201526318da195960e21b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526027908201527f4b616e70616950616e6461733a20496e636f6e73697374656e7420616d6f756e604082015266742073656e742160c81b606082015260800190565b61ffff861681526001600160a01b038516602082015260a0604082018190526000906149fe908301866145bf565b84151560608401528281036080840152614a1881856145bf565b98975050505050505050565b61ffff841681526040602082015260006125db604083018486614596565b61ffff86168152608060208201526000614a5f60808301876145bf565b6001600160401b03861660408401528281036060840152614a18818587614596565b61ffff85168152608060208201526000614a9e60808301866145bf565b6001600160401b03851660408401528281036060840152613bd281856145bf565b61ffff871681526000602060c081840152818854614adc81614cd6565b8060c087015260e0600180841660008114614afe5760018114614b1357614b3e565b60ff1985168984015261010089019550614b3e565b8d8852868820885b85811015614b365781548b8201860152908301908801614b1b565b8a0184019650505b50505050508381036040850152614b5581896145bf565b915050614b6d60608401876001600160a01b03169052565b6001600160a01b038516608084015282810360a0840152614b8e81856145bf565b9998505050505050505050565b600061ffff808816835280871660208401525084604083015260806060830152613bd2608083018486614596565b604051601f8201601f191681016001600160401b0381118282101715614bf157614bf1614d6c565b604052919050565b60006001600160401b03821115614c1257614c12614d6c565b50601f01601f191660200190565b60008085851115614c2f578182fd5b83861115614c3b578182fd5b5050820193919092039150565b60008219821115614c5b57614c5b614d40565b500190565b600082614c6f57614c6f614d56565b500490565b6000816000190483118215151615614c8e57614c8e614d40565b500290565b600082821015614ca557614ca5614d40565b500390565b60005b83811015614cc5578181015183820152602001614cad565b83811115610c575750506000910152565b600181811c90821680614cea57607f821691505b60208210811415614d0b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614d2557614d25614d40565b5060010190565b600082614d3b57614d3b614d56565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461172257600080fd5b801515811461172257600080fd5b6001600160e01b03198116811461172257600080fd5b61ffff8116811461172257600080fd5b6001600160401b038116811461172257600080fdfea264697066735822122013027fe55578c82318462bfd929dd8208e85e709f5a877fb14fcf328639f6ef064736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061039a5760003560e01c806366ad5c8a116101dc578063a22cb46511610102578063dacbcbe2116100a0578063e985e9c51161006f578063e985e9c514610aab578063eb8d72b714610af4578063f2fde38b14610b14578063f5ecbdbc14610b3457600080fd5b8063dacbcbe214610a37578063db61e31714610a6a578063e1d4c87014610a80578063e8a3d48514610a9657600080fd5b8063ba41b0c6116100dc578063ba41b0c6146109d1578063c87b56dd146109e4578063cbed8b9c14610a04578063d1deba1f14610a2457600080fd5b8063a22cb4651461095d578063a9d75b2b1461097d578063b88d4fde146109b157600080fd5b8063899d7b381161017a578063938e3d7b11610149578063938e3d7b146108f257806395d89b4114610912578063a035b1fe14610927578063a20f04541461093d57600080fd5b8063899d7b38146108505780638da5cb5b146108655780638ee749121461088357806391b7f5ed146108d257600080fd5b806370a08231116101b657806370a08231146107dc578063715018a6146107fc5780637cb647591461081157806387c348bf1461083157600080fd5b806366ad5c8a1461078657806369b41f95146107a65780636aa99da3146107c657600080fd5b80632a55205a116102c15780633e4086e51161025f578063519056361161022e578063519056361461071957806355f804b31461072c578063600e97f61461074c5780636352211e1461076657600080fd5b80633e4086e51461069957806342842e0e146106b957806342d65a8d146106d95780634f6ccce7146106f957600080fd5b80632f745c591161029b5780632f745c591461062f5780633b2c3fb61461064f5780633ccfd60b146106645780633d8b38f61461067957600080fd5b80632a55205a146105c75780632db11544146106065780632eb4a7ab1461061957600080fd5b8063105dc7d21161033957806318160ddd1161030857806318160ddd1461053d5780631c31f7101461055257806323b872dd146105725780632a205e3d1461059257600080fd5b8063105dc7d2146104d257806310ddb137146104f25780631291e33e14610512578063174654711461052757600080fd5b806307e0db171161037557806307e0db171461041f578063081812fc1461043f578063095ea7b31461047757806309dc20ce1461049757600080fd5b80621d3567146103a657806301ffc9a7146103c857806306fdde03146103fd57600080fd5b366103a157005b600080fd5b3480156103b257600080fd5b506103c66103c136600461436f565b610b54565b005b3480156103d457600080fd5b506103e86103e336600461407d565b610c5d565b60405190151581526020015b60405180910390f35b34801561040957600080fd5b50610412610c80565b6040516103f491906146f2565b34801561042b57600080fd5b506103c661043a366004614170565b610d12565b34801561044b57600080fd5b5061045f61045a366004614065565b610dbd565b6040516001600160a01b0390911681526020016103f4565b34801561048357600080fd5b506103c661049236600461401e565b610e52565b3480156104a357600080fd5b506104c46104b2366004613e3c565b60176020526000908152604090205481565b6040519081526020016103f4565b3480156104de57600080fd5b506103c66104ed366004614499565b610f68565b3480156104fe57600080fd5b506103c661050d366004614170565b61121b565b34801561051e57600080fd5b506103c6611295565b34801561053357600080fd5b506104c460115481565b34801561054957600080fd5b50600b546104c4565b34801561055e57600080fd5b506103c661056d366004613e3c565b6112d3565b34801561057e57600080fd5b506103c661058d366004613e90565b61131f565b34801561059e57600080fd5b506105b26105ad366004614250565b611351565b604080519283526020830191909152016103f4565b3480156105d357600080fd5b506105e76105e2366004614536565b61142b565b604080516001600160a01b0390931683526020830191909152016103f4565b6103c6610614366004614065565b611461565b34801561062557600080fd5b506104c460145481565b34801561063b57600080fd5b506104c461064a36600461401e565b611584565b34801561065b57600080fd5b506103c661161a565b34801561067057600080fd5b506103c6611663565b34801561068557600080fd5b506103e86106943660046141a8565b611725565b3480156106a557600080fd5b506103c66106b4366004614065565b6117f2565b3480156106c557600080fd5b506103c66106d4366004613e90565b611821565b3480156106e557600080fd5b506103c66106f43660046141a8565b61183c565b34801561070557600080fd5b506104c4610714366004614065565b6118ed565b6103c6610727366004613f66565b61198e565b34801561073857600080fd5b506103c661074736600461412b565b61199d565b34801561075857600080fd5b506018546103e89060ff1681565b34801561077257600080fd5b5061045f610781366004614065565b6119de565b34801561079257600080fd5b506103c66107a136600461436f565b611a55565b3480156107b257600080fd5b506104126107c1366004614170565b611ab0565b3480156107d257600080fd5b506104c4600f5481565b3480156107e857600080fd5b506104c46107f7366004613e3c565b611b57565b34801561080857600080fd5b506103c6611bde565b34801561081d57600080fd5b506103c661082c366004614065565b611c14565b34801561083d57600080fd5b506018546103e890610100900460ff1681565b34801561085c57600080fd5b506103c6611c43565b34801561087157600080fd5b506000546001600160a01b031661045f565b34801561088f57600080fd5b506104c461089e3660046141fa565b6002602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156108de57600080fd5b506103c66108ed366004614065565b611c8a565b3480156108fe57600080fd5b506103c661090d36600461412b565b611cb9565b34801561091e57600080fd5b50610412611cf6565b34801561093357600080fd5b506104c4600e5481565b34801561094957600080fd5b506103c6610958366004614065565b611d05565b34801561096957600080fd5b506103c6610978366004613f39565b611d34565b34801561098957600080fd5b5061045f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156109bd57600080fd5b506103c66109cc366004613ed0565b611d3f565b6103c66109df3660046144bd565b611d71565b3480156109f057600080fd5b506104126109ff366004614065565b611feb565b348015610a1057600080fd5b506103c6610a1f36600461443a565b6120a2565b6103c6610a323660046142e1565b612159565b348015610a4357600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061045f565b348015610a7657600080fd5b506104c460195481565b348015610a8c57600080fd5b506104c460105481565b348015610aa257600080fd5b506104126122ff565b348015610ab757600080fd5b506103e8610ac6366004613e58565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b348015610b0057600080fd5b506103c6610b0f3660046141a8565b61238d565b348015610b2057600080fd5b506103c6610b2f366004613e3c565b612416565b348015610b4057600080fd5b50610412610b4f3660046143ea565b6124ae565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610b8957600080fd5b61ffff841660009081526001602052604090208054610ba790614cd6565b90508351148015610be6575061ffff8416600090815260016020526040908190209051610bd49190614617565b60405180910390208380519060200120145b610c4b5760405162461bcd60e51b815260206004820152602b60248201527f4c7a52656365697665723a20696e76616c696420736f757263652073656e646960448201526a1b99c818dbdb9d1c9858dd60aa1b60648201526084015b60405180910390fd5b610c57848484846125e6565b50505050565b60006001600160e01b031982161580610c7a5750610c7a826126d7565b92915050565b606060038054610c8f90614cd6565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbb90614cd6565b8015610d085780601f10610cdd57610100808354040283529160200191610d08565b820191906000526020600020905b815481529060010190602001808311610ceb57829003601f168201915b5050505050905090565b6000546001600160a01b03163314610d3c5760405162461bcd60e51b8152600401610c42906148bf565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610da257600080fd5b505af1158015610db6573d6000803e3d6000fd5b5050505050565b6000818152600560205260408120546001600160a01b0316610e365760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c42565b506000908152600760205260409020546001600160a01b031690565b6000610e5d826119de565b9050806001600160a01b0316836001600160a01b03161415610ecb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610c42565b336001600160a01b0382161480610ee75750610ee78133610ac6565b610f595760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610c42565b610f6383836126fc565b505050565b73abcc9b596420a9e9172fd5938620e265a0f9df923314610fd65760405162461bcd60e51b815260206004820152602260248201527f47656c61746f52656c6179436f6e746578742e6f6e6c7947656c61746f52656c604482015261617960f01b6064820152608401610c42565b60185460ff161515600114610ffd5760405162461bcd60e51b8152600401610c42906147bc565b60185460ff61010090910416151560011461102a5760405162461bcd60e51b8152600401610c429061480a565b816110475760405162461bcd60e51b8152600401610c4290614779565b6011548211156110695760405162461bcd60e51b8152600401610c4290614851565b60105482600f5461107a9190614c48565b11156110985760405162461bcd60e51b8152600401610c42906148f4565b6000601954116110fd5760405162461bcd60e51b815260206004820152602a60248201527f4b616e70616950616e6461733a20796f75206e65656420746f2073657420737460448201526961626c6520707269636560b01b6064820152608401610c42565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111815760405162461bcd60e51b815260206004820152602560248201527f4b616e70616950616e6461733a206e6f7420737570706f727420737461626c65604482015264081b5a5b9d60da1b6064820152608401610c42565b61118961276a565b6013546019546111de9183916001600160a01b03909116906111ac908690614c74565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190612795565b600f5460005b8381101561121357611201836111f984614d11565b935083612800565b8061120b81614d11565b9150506111e4565b50600f555050565b6000546001600160a01b031633146112455760405162461bcd60e51b8152600401610c42906148bf565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610d88565b6000546001600160a01b031633146112bf5760405162461bcd60e51b8152600401610c42906148bf565b6018805460ff19811660ff90911615179055565b6000546001600160a01b031633146112fd5760405162461bcd60e51b8152600401610c42906148bf565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b61132a335b8261294e565b6113465760405162461bcd60e51b8152600401610c4290614938565b610f63838383612a41565b60008060008686604051602001611369929190614705565b60408051601f198184030181529082905263040a7bb160e41b825291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb10906113cd908b90309086908b908b906004016149d0565b604080518083038186803b1580156113e457600080fd5b505afa1580156113f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141c9190614557565b92509250509550959350505050565b6013546012546001600160a01b03909116906000906127109061144e9085614c74565b6114589190614c60565b90509250929050565b60185460ff1615156001146114885760405162461bcd60e51b8152600401610c42906147bc565b60185460ff6101009091041615156001146114b55760405162461bcd60e51b8152600401610c429061480a565b806114d25760405162461bcd60e51b8152600401610c4290614779565b6011548111156114f45760405162461bcd60e51b8152600401610c4290614851565b60105481600f546115059190614c48565b11156115235760405162461bcd60e51b8152600401610c42906148f4565b34600e54826115329190614c74565b11156115505760405162461bcd60e51b8152600401610c4290614989565b600f5460005b8281101561157d5761156b336111f984614d11565b8061157581614d11565b915050611556565b50600f5550565b600061158f83611b57565b82106115f15760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610c42565b506001600160a01b03919091166000908152600960209081526040808320938352929052205490565b6000546001600160a01b031633146116445760405162461bcd60e51b8152600401610c42906148bf565b6018805462ff0000198116620100009182900460ff1615909102179055565b6000546001600160a01b0316331461168d5760405162461bcd60e51b8152600401610c42906148bf565b6013546001600160a01b03166116f05760405162461bcd60e51b815260206004820152602260248201527f4b616e70616950616e6461733a2042656e6566696369617279206e6f74207365604482015261742160f01b6064820152608401610c42565b60135460405147916001600160a01b03169082156108fc029083906000818181858888f1935050505061172257600080fd5b50565b61ffff83166000908152600160205260408120805482919061174690614cd6565b80601f016020809104026020016040519081016040528092919081815260200182805461177290614cd6565b80156117bf5780601f10611794576101008083540402835291602001916117bf565b820191906000526020600020905b8154815290600101906020018083116117a257829003601f168201915b5050505050905083836040516117d69291906145eb565b60405180910390208180519060200120149150505b9392505050565b6000546001600160a01b0316331461181c5760405162461bcd60e51b8152600401610c42906148bf565b601255565b610f6383838360405180602001604052806000815250611d3f565b6000546001600160a01b031633146118665760405162461bcd60e51b8152600401610c42906148bf565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d906118b690869086908690600401614a24565b600060405180830381600087803b1580156118d057600080fd5b505af11580156118e4573d6000803e3d6000fd5b50505050505050565b60006118f8600b5490565b821061195b5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610c42565b600b828154811061197c57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6118e487878787878787612be8565b6000546001600160a01b031633146119c75760405162461bcd60e51b8152600401610c42906148bf565b80516119da906016906020840190613c49565b5050565b6000818152600560205260408120546001600160a01b031680610c7a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610c42565b333014611aa45760405162461bcd60e51b815260206004820181905260248201527f4c7a52656365697665723a2063616c6c6572206d757374206265204c7a4170706044820152606401610c42565b610c5784848484612d3f565b61ffff81166000908152600160205260409020805460609190611ad290614cd6565b80601f0160208091040260200160405190810160405280929190818152602001828054611afe90614cd6565b8015611b4b5780601f10611b2057610100808354040283529160200191611b4b565b820191906000526020600020905b815481529060010190602001808311611b2e57829003601f168201915b50505050509050919050565b60006001600160a01b038216611bc25760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610c42565b506001600160a01b031660009081526006602052604090205490565b6000546001600160a01b03163314611c085760405162461bcd60e51b8152600401610c42906148bf565b611c126000612dda565b565b6000546001600160a01b03163314611c3e5760405162461bcd60e51b8152600401610c42906148bf565b601455565b6000546001600160a01b03163314611c6d5760405162461bcd60e51b8152600401610c42906148bf565b6018805461ff001981166101009182900460ff1615909102179055565b6000546001600160a01b03163314611cb45760405162461bcd60e51b8152600401610c42906148bf565b600e55565b6000546001600160a01b03163314611ce35760405162461bcd60e51b8152600401610c42906148bf565b80516119da906015906020840190613c49565b606060048054610c8f90614cd6565b6000546001600160a01b03163314611d2f5760405162461bcd60e51b8152600401610c42906148bf565b601955565b6119da338383612e2a565b611d49338361294e565b611d655760405162461bcd60e51b8152600401610c4290614938565b610c5784848484612ef9565b60185460ff610100909104161515600114611d9e5760405162461bcd60e51b8152600401610c429061480a565b82611dbb5760405162461bcd60e51b8152600401610c4290614779565b601154831115611ddd5760405162461bcd60e51b8152600401610c4290614851565b60105483600f54611dee9190614c48565b1115611e0c5760405162461bcd60e51b8152600401610c42906148f4565b34600e5484611e1b9190614c74565b1115611e395760405162461bcd60e51b8152600401610c4290614989565b60115433600090815260176020526040902054611e57908590614c48565b1115611eba5760405162461bcd60e51b815260206004820152602c60248201527f4b616e70616950616e6461733a20596f7520657863656564656420796f75722060448201526b3a37b5b2b7103634b6b4ba1760a11b6064820152608401610c42565b6000611f31838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506014546040516bffffffffffffffffffffffff193360601b166020820152909250603401905060405160208183030381529060405280519060200120612f2c565b9050600181151514611f905760405162461bcd60e51b815260206004820152602260248201527f4b616e70616950616e6461733a20496e76616c6964204d65726b6c652050726f60448201526137b360f11b6064820152608401610c42565b3360009081526017602052604081208054869290611faf908490614c48565b9091555050600f5460005b85811015611fe157611fcf336111f984614d11565b80611fd981614d11565b915050611fba565b50600f5550505050565b6000818152600560205260409020546060906001600160a01b031661206a5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610c42565b612072612f42565b61207b83612f51565b60405160200161208c929190614686565b6040516020818303038152906040529050919050565b6000546001600160a01b031633146120cc5760405162461bcd60e51b8152600401610c42906148bf565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906121209088908890889088908890600401614b9b565b600060405180830381600087803b15801561213a57600080fd5b505af115801561214e573d6000803e3d6000fd5b505050505050505050565b61ffff8516600090815260026020526040808220905161217a9087906145fb565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806121ee5760405162461bcd60e51b815260206004820152601d60248201527f4c7a52656365697665723a206e6f2073746f726564206d6573736167650000006044820152606401610c42565b8083836040516121ff9291906145eb565b6040518091039020146122545760405162461bcd60e51b815260206004820152601b60248201527f4c7a52656365697665723a20696e76616c6964207061796c6f616400000000006044820152606401610c42565b61ffff861660009081526002602052604080822090516122759088906145fb565b9081526040805191829003602090810183206001600160401b038916600090815291522091909155633356ae4560e11b815230906366ad5c8a906122c59089908990899089908990600401614a42565b600060405180830381600087803b1580156122df57600080fd5b505af11580156122f3573d6000803e3d6000fd5b50505050505050505050565b6015805461230c90614cd6565b80601f016020809104026020016040519081016040528092919081815260200182805461233890614cd6565b80156123855780601f1061235a57610100808354040283529160200191612385565b820191906000526020600020905b81548152906001019060200180831161236857829003601f168201915b505050505081565b6000546001600160a01b031633146123b75760405162461bcd60e51b8152600401610c42906148bf565b61ffff831660009081526001602052604090206123d5908383613ccd565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161240993929190614a24565b60405180910390a1505050565b6000546001600160a01b031633146124405760405162461bcd60e51b8152600401610c42906148bf565b6001600160a01b0381166124a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c42565b61172281612dda565b6040516304b2b47b60e11b81523060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90829063096568f69060240160206040518083038186803b15801561251857600080fd5b505afa15801561252c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612550919061418c565b6040516001600160e01b031960e084901b16815261ffff918216600482015290871660248201523060448201526064810185905260840160006040518083038186803b15801561259f57600080fd5b505afa1580156125b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125db91908101906140b5565b90505b949350505050565b604051633356ae4560e11b815230906366ad5c8a9061260f908790879087908790600401614a81565b600060405180830381600087803b15801561262957600080fd5b505af192505050801561263a575060015b610c57578080519060200120600260008661ffff1661ffff1681526020019081526020016000208460405161266f91906145fb565b9081526040805191829003602090810183206001600160401b0387166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d906126ca908690869086908690614a81565b60405180910390a1610c57565b60006001600160e01b0319821663780e9d6360e01b1480610c7a5750610c7a8261306a565b600081815260076020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612731826119de565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611c126127756130aa565b61277d6130b9565b6127856130c3565b6001600160a01b031691906130cd565b6040516001600160a01b0380851660248301528316604482015260648101829052610c579085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613119565b6001600160a01b0382166128565760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610c42565b6000818152600560205260409020546001600160a01b0316156128bb5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610c42565b6128c7600083836131eb565b6001600160a01b03821660009081526006602052604081208054600192906128f0908490614c48565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000818152600560205260408120546001600160a01b03166129c75760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610c42565b60006129d2836119de565b9050806001600160a01b0316846001600160a01b03161480612a0d5750836001600160a01b0316612a0284610dbd565b6001600160a01b0316145b806125de57506001600160a01b0380821660009081526008602090815260408083209388168352929052205460ff166125de565b826001600160a01b0316612a54826119de565b6001600160a01b031614612ab85760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610c42565b6001600160a01b038216612b1a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610c42565b612b258383836131eb565b612b306000826126fc565b6001600160a01b0383166000908152600660205260408120805460019290612b59908490614c93565b90915550506001600160a01b0382166000908152600660205260408120805460019290612b87908490614c48565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612bf4878787876132a3565b60008585604051602001612c09929190614705565b6040516020818303038152906040529050612c2787828686866133a5565b604051630f428ae960e31b815261ffff881660048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a1457489060440160206040518083038186803b158015612c9357600080fd5b505afa158015612ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ccb919061457a565b905086604051612cdb91906145fb565b604080519182900382208883526001600160401b03841660208401529161ffff8b16916001600160a01b038d16917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a4505050505050505050565b60008082806020019051810190612d5691906140e7565b60148201519193509150612d6b8782846134b1565b806001600160a01b031686604051612d8391906145fb565b604080519182900382208583526001600160401b03891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b03161415612e8c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610c42565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612f04848484612a41565b612f10848484846134bb565b610c575760405162461bcd60e51b8152600401610c4290614727565b600082612f3985846135c5565b14949350505050565b606060168054610c8f90614cd6565b606081612f755750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612f9f5780612f8981614d11565b9150612f989050600a83614c60565b9150612f79565b6000816001600160401b03811115612fc757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ff1576020820181803683370190505b5090505b84156125de57613006600183614c93565b9150613013600a86614d2c565b61301e906030614c48565b60f81b81838151811061304157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350613063600a86614c60565b9450612ff5565b60006001600160e01b031982166380ac58cd60e01b148061309b57506001600160e01b03198216635b5e139f60e01b145b80610c7a5750610c7a82613647565b60006130b461367c565b905090565b60006130b46136a3565b60006130b46136ca565b806130d757505050565b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461310f57610f636001600160a01b03841683836136d9565b610f638282613709565b600061316e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166138229092919063ffffffff16565b805190915015610f63578080602001905181019061318c9190614049565b610f635760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c42565b6001600160a01b0383166132465761324181600b80546000838152600c60205260408120829055600182018355919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90155565b613269565b816001600160a01b0316836001600160a01b031614613269576132698382613831565b6001600160a01b03821661328057610f63816138ce565b826001600160a01b0316826001600160a01b031614610f6357610f6382826139a7565b6132ac33611324565b61331e5760405162461bcd60e51b815260206004820152603860248201527f4f4e4654373231456e756d657261626c653a2073656e642063616c6c6572206960448201527f73206e6f74206f776e6572206e6f7220617070726f76656400000000000000006064820152608401610c42565b836001600160a01b0316613331826119de565b6001600160a01b03161461339c5760405162461bcd60e51b815260206004820152602c60248201527f4f4e4654373231456e756d657261626c653a2073656e642066726f6d20696e6360448201526b37b93932b1ba1037bbb732b960a11b6064820152608401610c42565b610c57816139eb565b61ffff8516600090815260016020526040902080546133c390614cd6565b1515905061342e5760405162461bcd60e51b815260206004820152603260248201527f4c7a53656e643a2064657374696e6174696f6e20636861696e206973206e6f746044820152711030903a393ab9ba32b21039b7bab931b29760711b6064820152608401610c42565b61ffff851660009081526001602052604090819020905162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c5803100913491613498918a91908a908a908a908a90600401614abf565b6000604051808303818588803b1580156122df57600080fd5b610f638282613a92565b60006001600160a01b0384163b156135bd57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906134ff9033908990889088906004016146b5565b602060405180830381600087803b15801561351957600080fd5b505af1925050508015613549575060408051601f3d908101601f1916820190925261354691810190614099565b60015b6135a3573d808015613577576040519150601f19603f3d011682016040523d82523d6000602084013e61357c565b606091505b50805161359b5760405162461bcd60e51b8152600401610c4290614727565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506125de565b5060016125de565b600081815b845181101561363f5760008582815181106135f557634e487b7160e01b600052603260045260246000fd5b6020026020010151905080831161361b576000838152602082905260409020925061362c565b600081815260208490526040902092505b508061363781614d11565b9150506135ca565b509392505050565b60006001600160e01b03198216637bb0080b60e01b1480610c7a57506301ffc9a760e01b6001600160e01b0319831614610c7a565b6000803661368b606082614c93565b613696928290614c20565b8101906130b49190613e3c565b600080366136b2602082614c93565b6136bd928290614c20565b8101906130b49190614065565b6000803661368b604082614c93565b6040516001600160a01b038316602482015260448101829052610f6390849063a9059cbb60e01b906064016127c9565b804710156137595760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c42565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146137a6576040519150601f19603f3d011682016040523d82523d6000602084013e6137ab565b606091505b5050905080610f635760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c42565b60606125de8484600085613aac565b6000600161383e84611b57565b6138489190614c93565b6000838152600a602052604090205490915080821461389b576001600160a01b03841660009081526009602090815260408083208584528252808320548484528184208190558352600a90915290208190555b506000918252600a602090815260408084208490556001600160a01b039094168352600981528383209183525290812055565b600b546000906138e090600190614c93565b6000838152600c6020526040812054600b805493945090928490811061391657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600b838154811061394557634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600c9091526040808220849055858252812055600b80548061398b57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006139b283611b57565b6001600160a01b0390931660009081526009602090815260408083208684528252808320859055938252600a9052919091209190915550565b60006139f6826119de565b9050613a04816000846131eb565b613a0f6000836126fc565b6001600160a01b0381166000908152600660205260408120805460019290613a38908490614c93565b909155505060008281526005602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6119da828260405180602001604052806000815250613bdd565b606082471015613b0d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610c42565b6001600160a01b0385163b613b645760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c42565b600080866001600160a01b03168587604051613b8091906145fb565b60006040518083038185875af1925050503d8060008114613bbd576040519150601f19603f3d011682016040523d82523d6000602084013e613bc2565b606091505b5091509150613bd2828286613c10565b979650505050505050565b613be78383612800565b613bf460008484846134bb565b610f635760405162461bcd60e51b8152600401610c4290614727565b60608315613c1f5750816117eb565b825115613c2f5782518084602001fd5b8160405162461bcd60e51b8152600401610c4291906146f2565b828054613c5590614cd6565b90600052602060002090601f016020900481019282613c775760008555613cbd565b82601f10613c9057805160ff1916838001178555613cbd565b82800160010185558215613cbd579182015b82811115613cbd578251825591602001919060010190613ca2565b50613cc9929150613d41565b5090565b828054613cd990614cd6565b90600052602060002090601f016020900481019282613cfb5760008555613cbd565b82601f10613d145782800160ff19823516178555613cbd565b82800160010185558215613cbd579182015b82811115613cbd578235825591602001919060010190613d26565b5b80821115613cc95760008155600101613d42565b6000613d69613d6484614bf9565b614bc9565b9050828152838383011115613d7d57600080fd5b828260208301376000602084830101529392505050565b60008083601f840112613da5578182fd5b5081356001600160401b03811115613dbb578182fd5b602083019150836020828501011115613dd357600080fd5b9250929050565b600082601f830112613dea578081fd5b6117eb83833560208501613d56565b600082601f830112613e09578081fd5b8151613e17613d6482614bf9565b818152846020838601011115613e2b578283fd5b6125de826020830160208701614caa565b600060208284031215613e4d578081fd5b81356117eb81614d82565b60008060408385031215613e6a578081fd5b8235613e7581614d82565b91506020830135613e8581614d82565b809150509250929050565b600080600060608486031215613ea4578081fd5b8335613eaf81614d82565b92506020840135613ebf81614d82565b929592945050506040919091013590565b60008060008060808587031215613ee5578081fd5b8435613ef081614d82565b93506020850135613f0081614d82565b92506040850135915060608501356001600160401b03811115613f21578182fd5b613f2d87828801613dda565b91505092959194509250565b60008060408385031215613f4b578182fd5b8235613f5681614d82565b91506020830135613e8581614d97565b600080600080600080600060e0888a031215613f80578485fd5b8735613f8b81614d82565b96506020880135613f9b81614dbb565b955060408801356001600160401b0380821115613fb6578687fd5b613fc28b838c01613dda565b965060608a0135955060808a01359150613fdb82614d82565b90935060a089013590613fed82614d82565b90925060c08901359080821115614002578283fd5b5061400f8a828b01613dda565b91505092959891949750929550565b60008060408385031215614030578182fd5b823561403b81614d82565b946020939093013593505050565b60006020828403121561405a578081fd5b81516117eb81614d97565b600060208284031215614076578081fd5b5035919050565b60006020828403121561408e578081fd5b81356117eb81614da5565b6000602082840312156140aa578081fd5b81516117eb81614da5565b6000602082840312156140c6578081fd5b81516001600160401b038111156140db578182fd5b6125de84828501613df9565b600080604083850312156140f9578182fd5b82516001600160401b0381111561410e578283fd5b61411a85828601613df9565b925050602083015190509250929050565b60006020828403121561413c578081fd5b81356001600160401b03811115614151578182fd5b8201601f81018413614161578182fd5b6125de84823560208401613d56565b600060208284031215614181578081fd5b81356117eb81614dbb565b60006020828403121561419d578081fd5b81516117eb81614dbb565b6000806000604084860312156141bc578081fd5b83356141c781614dbb565b925060208401356001600160401b038111156141e1578182fd5b6141ed86828701613d94565b9497909650939450505050565b60008060006060848603121561420e578081fd5b833561421981614dbb565b925060208401356001600160401b03811115614233578182fd5b61423f86828701613dda565b925050604084013590509250925092565b600080600080600060a08688031215614267578283fd5b853561427281614dbb565b945060208601356001600160401b038082111561428d578485fd5b61429989838a01613dda565b955060408801359450606088013591506142b282614d97565b909250608087013590808211156142c7578283fd5b506142d488828901613dda565b9150509295509295909350565b6000806000806000608086880312156142f8578283fd5b853561430381614dbb565b945060208601356001600160401b038082111561431e578485fd5b61432a89838a01613dda565b95506040880135915061433c82614dcb565b90935060608701359080821115614351578283fd5b5061435e88828901613d94565b969995985093965092949392505050565b60008060008060808587031215614384578182fd5b843561438f81614dbb565b935060208501356001600160401b03808211156143aa578384fd5b6143b688838901613dda565b9450604087013591506143c882614dcb565b909250606086013590808211156143dd578283fd5b50613f2d87828801613dda565b600080600080608085870312156143ff578182fd5b843561440a81614dbb565b9350602085013561441a81614dbb565b9250604085013561442a81614d82565b9396929550929360600135925050565b600080600080600060808688031215614451578283fd5b853561445c81614dbb565b9450602086013561446c81614dbb565b93506040860135925060608601356001600160401b0381111561448d578182fd5b61435e88828901613d94565b600080604083850312156144ab578182fd5b823591506020830135613e8581614d82565b6000806000604084860312156144d1578081fd5b8335925060208401356001600160401b03808211156144ee578283fd5b818601915086601f830112614501578283fd5b81358181111561450f578384fd5b8760208260051b8501011115614523578384fd5b6020830194508093505050509250925092565b60008060408385031215614548578182fd5b50508035926020909101359150565b60008060408385031215614569578182fd5b505080516020909101519092909150565b60006020828403121561458b578081fd5b81516117eb81614dcb565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b600081518084526145d7816020860160208601614caa565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b6000825161460d818460208701614caa565b9190910192915050565b600080835461462581614cd6565b6001828116801561463d576001811461464e5761467a565b60ff1984168752828701945061467a565b8786526020808720875b858110156146715781548a820152908401908201614658565b50505082870194505b50929695505050505050565b60008351614698818460208801614caa565b8351908301906146ac818360208801614caa565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906146e8908301846145bf565b9695505050505050565b6020815260006117eb60208301846145bf565b60408152600061471860408301856145bf565b90508260208301529392505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526023908201527f4b616e70616950616e6461733a2043616e6e6f74206d696e74203020746f6b656040820152626e732160e81b606082015260800190565b6020808252602e908201527f4b616e70616950616e6461733a205075626c69632073616c6520686173206e6f60408201526d742073746172746564207965742160901b606082015260800190565b60208082526027908201527f4b616e70616950616e6461733a2053616c6520686173206e6f742073746172746040820152666564207965742160c81b606082015260800190565b60208082526048908201527f4b616e70616950616e6461733a20596f752063616e6e6f74206d696e74206d6f60408201527f7265207468616e206d6178546f6b656e735065724d696e7420746f6b656e73206060820152676174206f6e63652160c01b608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f4b616e70616950616e6461733a206d6178206d696e74206c696d69742072656160408201526318da195960e21b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526027908201527f4b616e70616950616e6461733a20496e636f6e73697374656e7420616d6f756e604082015266742073656e742160c81b606082015260800190565b61ffff861681526001600160a01b038516602082015260a0604082018190526000906149fe908301866145bf565b84151560608401528281036080840152614a1881856145bf565b98975050505050505050565b61ffff841681526040602082015260006125db604083018486614596565b61ffff86168152608060208201526000614a5f60808301876145bf565b6001600160401b03861660408401528281036060840152614a18818587614596565b61ffff85168152608060208201526000614a9e60808301866145bf565b6001600160401b03851660408401528281036060840152613bd281856145bf565b61ffff871681526000602060c081840152818854614adc81614cd6565b8060c087015260e0600180841660008114614afe5760018114614b1357614b3e565b60ff1985168984015261010089019550614b3e565b8d8852868820885b85811015614b365781548b8201860152908301908801614b1b565b8a0184019650505b50505050508381036040850152614b5581896145bf565b915050614b6d60608401876001600160a01b03169052565b6001600160a01b038516608084015282810360a0840152614b8e81856145bf565b9998505050505050505050565b600061ffff808816835280871660208401525084604083015260806060830152613bd2608083018486614596565b604051601f8201601f191681016001600160401b0381118282101715614bf157614bf1614d6c565b604052919050565b60006001600160401b03821115614c1257614c12614d6c565b50601f01601f191660200190565b60008085851115614c2f578182fd5b83861115614c3b578182fd5b5050820193919092039150565b60008219821115614c5b57614c5b614d40565b500190565b600082614c6f57614c6f614d56565b500490565b6000816000190483118215151615614c8e57614c8e614d40565b500290565b600082821015614ca557614ca5614d40565b500390565b60005b83811015614cc5578181015183820152602001614cad565b83811115610c575750506000910152565b600181811c90821680614cea57607f821691505b60208210811415614d0b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614d2557614d25614d40565b5060010190565b600082614d3b57614d3b614d56565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461172257600080fd5b801515811461172257600080fd5b6001600160e01b03198116811461172257600080fd5b61ffff8116811461172257600080fd5b6001600160401b038116811461172257600080fdfea264697066735822122013027fe55578c82318462bfd929dd8208e85e709f5a877fb14fcf328639f6ef064736f6c63430008040033",
  "devdoc": {
    "author": "exakoss",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "_baseTokenURI": "the base URI for computing the tokenURI",
          "_endMintId": "the max number of mints on this chain",
          "_layerZeroEndpoint": "handles message transmission across chains",
          "_maxTokensPerMint": "the max number of tokens that could be minted in a single transaction",
          "_name": "the name of the token",
          "_stableToken": "stable coin address to be paid for minting",
          "_startMintId": "the starting mint number on this chain, excluded",
          "_symbol": "the token symbol"
        }
      },
      "estimateSendFee(uint16,bytes,uint256,bool,bytes)": {
        "details": "estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenId - token Id to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "sendFrom(address,uint16,bytes,uint256,address,address,bytes)": {
        "details": "send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Interface of the AdvancedONFT standard",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor for the AdvancedONFT"
      },
      "gaslessMint(uint256,address)": {
        "notice": "gasless mint "
      },
      "mint(uint256,bytes32[])": {
        "notice": "Mint your ONFTs, whitelisted addresses only"
      },
      "publicMint(uint256)": {
        "notice": "Mint your ONFTs"
      },
      "stablePrice()": {
        "notice": "For stable minting"
      }
    },
    "notice": "this implementation supports: batch mint, payable public and private mint, reveal of metadata and EIP-2981 on-chain royalties",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 338,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14233,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 14547,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "failedMessages",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes32)))"
      },
      {
        "astId": 3037,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3039,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 3043,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_owners",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3047,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3051,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3057,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4026,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4030,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4033,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_allTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4037,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 574,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_status",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 18526,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "price",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 18528,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "nextMintId",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 18530,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "maxMintId",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 18532,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "maxTokensPerMint",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 18535,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "royaltyBasisPoints",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 18537,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "beneficiary",
        "offset": 0,
        "slot": "19",
        "type": "t_address_payable"
      },
      {
        "astId": 18539,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "20",
        "type": "t_bytes32"
      },
      {
        "astId": 18541,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "contractURI",
        "offset": 0,
        "slot": "21",
        "type": "t_string_storage"
      },
      {
        "astId": 18543,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "baseURI",
        "offset": 0,
        "slot": "22",
        "type": "t_string_storage"
      },
      {
        "astId": 18547,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_boughtCount",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18549,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_publicSaleStarted",
        "offset": 0,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 18551,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_saleStarted",
        "offset": 1,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 18553,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "revealed",
        "offset": 2,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 18557,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "stablePrice",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint256 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint256 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes32))"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}