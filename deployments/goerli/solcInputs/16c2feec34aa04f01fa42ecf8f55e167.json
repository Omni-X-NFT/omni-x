{
  "language": "Solidity",
  "sources": {
    "contracts/access/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Initializable is Context {\r\n    address private _owner;\r\n    bool private _initialized;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if not initalize called.\r\n     */\r\n    modifier onlyInitialized() {\r\n        _checkInitialized();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Initializable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not initialized.\r\n     */\r\n    function _checkInitialized() internal view virtual {\r\n        require(_initialized == true, \"Initializable: contract is not initialized\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Initializable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function initialize() public {\r\n        require(_initialized == false, \"Initializable: contract is initialized already\");\r\n        _transferOwnership(_msgSender());\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/royalty/RoyaltyFeeSetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\nimport {IRoyaltyFeeRegistry} from \"../interfaces/IRoyaltyFeeRegistry.sol\";\r\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\r\n\r\n/**\r\n * @title RoyaltyFeeSetter\r\n * @notice It is used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\r\n */\r\ncontract RoyaltyFeeSetter is AccessControl {\r\n    // ERC721 interfaceID\r\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    // ERC1155 interfaceID\r\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\r\n\r\n    // ERC2981 interfaceID\r\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n\r\n    address public immutable royaltyFeeRegistry;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _royaltyFeeRegistry address of the royalty fee registry\r\n     */\r\n    constructor(address _royaltyFeeRegistry) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        royaltyFeeRegistry = _royaltyFeeRegistry;\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection if admin\r\n     * @dev Only to be called if there is no setter address\r\n     * @param collection address of the NFT contract\r\n     * @param setter address that sets the receiver\r\n     * @param receiver receiver for the royalty fee\r\n     * @param fee fee (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyInfoForCollectionIfAdmin(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) external {\r\n        require(!IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981), \"Admin: Must not be ERC2981\");\r\n        require(msg.sender == IOwnable(collection).admin(), \"Admin: Not the admin\");\r\n\r\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(collection, setter, receiver, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection if owner\r\n     * @dev Only to be called if there is no setter address\r\n     * @param collection address of the NFT contract\r\n     * @param setter address that sets the receiver\r\n     * @param receiver receiver for the royalty fee\r\n     * @param fee fee (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyInfoForCollectionIfOwner(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) external {\r\n        require(!IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981), \"Owner: Must not be ERC2981\");\r\n        require(msg.sender == IOwnable(collection).owner(), \"Owner: Not the owner\");\r\n\r\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(collection, setter, receiver, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection\r\n     * @dev Only to be called if there msg.sender is the setter\r\n     * @param collection address of the NFT contract\r\n     * @param setter address that sets the receiver\r\n     * @param receiver receiver for the royalty fee\r\n     * @param fee fee (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyInfoForCollectionIfSetter(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) external {\r\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\r\n        require(msg.sender == currentSetter, \"Setter: Not the setter\");\r\n\r\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection\r\n     * @dev Can only be called by contract owner (of this)\r\n     * @param collection address of the NFT contract\r\n     * @param setter address that sets the receiver\r\n     * @param receiver receiver for the royalty fee\r\n     * @param fee fee (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyInfoForCollection(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) external onlyRole(ADMIN_ROLE) {\r\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Update owner of royalty fee registry\r\n     * @dev Can be used for migration of this royalty fee setter contract\r\n     * @param _owner new owner address\r\n     */\r\n    function updateOwnerOfRoyaltyFeeRegistry(address _owner) external onlyRole(ADMIN_ROLE) {\r\n        IOwnable(royaltyFeeRegistry).transferOwnership(_owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection\r\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external onlyRole(ADMIN_ROLE) {\r\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyFeeLimit(_royaltyFeeLimit);\r\n    }\r\n\r\n    /**\r\n     * @notice Check royalty info for collection\r\n     * @param collection collection address\r\n     * @return (whether there is a setter (address(0 if not)),\r\n     * Position\r\n     * 0: Royalty setter is set in the registry\r\n     * 1: ERC2981 and no setter\r\n     * 2: setter can be set using owner()\r\n     * 3: setter can be set using admin()\r\n     * 4: setter cannot be set, nor support for ERC2981\r\n     */\r\n    function checkForCollectionSetter(address collection) external view returns (address, uint8) {\r\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\r\n\r\n        if (currentSetter != address(0)) {\r\n            return (currentSetter, 0);\r\n        }\r\n\r\n        try IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981) returns (bool interfaceSupport) {\r\n            if (interfaceSupport) {\r\n                return (address(0), 1);\r\n            }\r\n        } catch {}\r\n\r\n        try IOwnable(collection).owner() returns (address setter) {\r\n            return (setter, 2);\r\n        } catch {\r\n            try IOwnable(collection).admin() returns (address setter) {\r\n                return (setter, 3);\r\n            } catch {\r\n                return (address(0), 4);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update information and perform checks before updating royalty fee registry\r\n     * @param collection address of the NFT contract\r\n     * @param setter address that sets the receiver\r\n     * @param receiver receiver for the royalty fee\r\n     * @param fee fee (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) internal {\r\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\r\n        require(currentSetter == address(0), \"Setter: Already set\");\r\n\r\n        require(\r\n            (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721) ||\r\n                IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)),\r\n            \"Setter: Not ERC721/ERC1155\"\r\n        );\r\n\r\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\r\n    }\r\n\r\n    function setAllowList(address[] calldata addresses) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            grantRole(ADMIN_ROLE, addresses[i]);\r\n        }\r\n    }\r\n}"
    },
    "contracts/interfaces/IRoyaltyFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRoyaltyFeeRegistry {\r\n    function updateRoyaltyInfoForCollection(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) external;\r\n\r\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\r\n\r\n    function royaltyInfo(address collection, uint256 amount) external view returns (address, uint256);\r\n\r\n    function royaltyFeeInfoCollection(address collection)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            address,\r\n            uint256\r\n        );\r\n}"
    },
    "contracts/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOwnable {\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function admin() external view returns (address);\r\n}"
    },
    "contracts/royalty/RoyaltyFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {AccessControl} from \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\nimport {IRoyaltyFeeRegistry} from \"../interfaces/IRoyaltyFeeRegistry.sol\";\r\n\r\n/**\r\n * @title RoyaltyFeeRegistry\r\n * @notice It is a royalty fee registry for the LooksRare exchange.\r\n */\r\ncontract RoyaltyFeeRegistry is IRoyaltyFeeRegistry, AccessControl {\r\n    struct FeeInfo {\r\n        address setter;\r\n        address receiver;\r\n        uint256 fee;\r\n    }\r\n\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n\r\n    // Limit (if enforced for fee royalty in percentage (10,000 = 100%)\r\n    uint256 public royaltyFeeLimit;\r\n\r\n    mapping(address => FeeInfo) private _royaltyFeeInfoCollection;\r\n\r\n    event NewRoyaltyFeeLimit(uint256 royaltyFeeLimit);\r\n    event RoyaltyFeeUpdate(address indexed collection, address indexed setter, address indexed receiver, uint256 fee);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\r\n     */\r\n    constructor(uint256 _royaltyFeeLimit) {\r\n        require(_royaltyFeeLimit <= 9500, \"Owner: Royalty fee limit too high\");\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        royaltyFeeLimit = _royaltyFeeLimit;\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection\r\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external override onlyRole(ADMIN_ROLE) {\r\n        require(_royaltyFeeLimit <= 9500, \"Owner: Royalty fee limit too high\");\r\n        royaltyFeeLimit = _royaltyFeeLimit;\r\n\r\n        emit NewRoyaltyFeeLimit(_royaltyFeeLimit);\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection\r\n     * @param collection address of the NFT contract\r\n     * @param setter address that sets the receiver\r\n     * @param receiver receiver for the royalty fee\r\n     * @param fee fee (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyInfoForCollection(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) external override onlyRole(ADMIN_ROLE) {\r\n        require(fee <= royaltyFeeLimit, \"Registry: Royalty fee too high\");\r\n        _royaltyFeeInfoCollection[collection] = FeeInfo({setter: setter, receiver: receiver, fee: fee});\r\n\r\n        emit RoyaltyFeeUpdate(collection, setter, receiver, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate royalty info for a collection address and a sale gross amount\r\n     * @param collection collection address\r\n     * @param amount amount\r\n     * @return receiver address and amount received by royalty recipient\r\n     */\r\n    function royaltyInfo(address collection, uint256 amount) external view override returns (address, uint256) {\r\n        return (\r\n            _royaltyFeeInfoCollection[collection].receiver,\r\n            (amount * _royaltyFeeInfoCollection[collection].fee) / 10000\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice View royalty info for a collection address\r\n     * @param collection collection address\r\n     */\r\n    function royaltyFeeInfoCollection(address collection)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            address,\r\n            address,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            _royaltyFeeInfoCollection[collection].setter,\r\n            _royaltyFeeInfoCollection[collection].receiver,\r\n            _royaltyFeeInfoCollection[collection].fee\r\n        );\r\n    }\r\n\r\n    function setAllowList(address[] calldata addresses) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            grantRole(ADMIN_ROLE, addresses[i]);\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"
    },
    "contracts/token/onft/extension/ProxyONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\r\nimport \"../ONFT721Core.sol\";\r\n\r\ncontract ProxyONFT721 is ONFT721Core, IERC721Receiver {\r\n    using ERC165Checker for address;\r\n\r\n    IERC721 public immutable token;\r\n\r\n    constructor(address _lzEndpoint, address _proxyToken) ONFT721Core(_lzEndpoint) {\r\n        require(_proxyToken.supportsInterface(type(IERC721).interfaceId), \"ProxyONFT721: invalid ERC721 token\");\r\n        token = IERC721(_proxyToken);\r\n    }\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC721Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\r\n        require(_from == _msgSender(), \"ProxyONFT721: owner is not send caller\");\r\n        token.safeTransferFrom(_from, address(this), _tokenId);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\r\n        token.safeTransferFrom(address(this), _toAddress, _tokenId);\r\n    }\r\n\r\n    function onERC721Received(address _operator, address, uint, bytes memory) public virtual override returns (bytes4) {\r\n        // only allow `this` to tranfser token from others\r\n        if (_operator != address(this)) return bytes4(0);\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/token/onft/ONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT721Core.sol\";\r\nimport \"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract ONFT721Core is NonblockingLzApp, ERC165, IONFT721Core {\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT721Core).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        // mock the payload for send()\r\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _send(_from, _dstChainId, _toAddress, _tokenId, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\r\n    }\r\n\r\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\r\n        _debitFrom(_from, _dstChainId, _toAddress, _tokenId);\r\n\r\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\r\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams, _nativeFee);\r\n\r\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\r\n        emit SendToChain(_from, _dstChainId, _toAddress, _tokenId, nonce);\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // decode and load the toAddress\r\n        (bytes memory toAddressBytes, uint tokenId) = abi.decode(_payload, (bytes, uint));\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n\r\n        _creditTo(_srcChainId, toAddress, tokenId);\r\n\r\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenId, _nonce);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId) internal virtual;\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _tokenId) internal virtual;\r\n}\r\n"
    },
    "contracts/token/onft/IONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT Core standard\r\n */\r\ninterface IONFT721Core is IERC165 {\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _tokenId - token Id to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n     */\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    /**\r\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce from\r\n     */\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n}\r\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./LzApp.sol\";\nimport \"../util/ExcessivelySafeCall.sol\";\n\n/*\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\n */\nabstract contract NonblockingLzApp is LzApp {\n    using ExcessivelySafeCall for address;\n\n    constructor(address _endpoint) LzApp(_endpoint) {}\n\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\n\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\n\n    // overriding the virtual function in LzReceiver\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\n        // try-catch all errors/exceptions\n        if (!success) {\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\n        }\n    }\n\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\n    }\n\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\n        // only internal transaction\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    //@notice override this function\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\n\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\n        // assert there is message to retry\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\n        // clear the stored message\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\n        // execute the message. revert if it fails again\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/ILayerZeroReceiver.sol\";\nimport \"../interfaces/ILayerZeroUserApplicationConfig.sol\";\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\nimport \"../util/BytesLib.sol\";\n\n/*\n * a generic LzReceiver implementation\n */\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\n    using BytesLib for bytes;\n\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\n\n    ILayerZeroEndpoint public immutable lzEndpoint;\n    mapping(uint16 => bytes) public trustedRemoteLookup;\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\n    address public precrime;\n\n    event SetPrecrime(address precrime);\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\n\n    constructor(address _endpoint) {\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\n    }\n\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\n        // lzReceive must be called by the endpoint for security\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\n\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \"LzApp: invalid source sending contract\");\n\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\n\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\n        _checkPayloadSize(_dstChainId, _payload.length);\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\n    }\n\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\n        uint providedGasLimit = _getGasLimit(_adapterParams);\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\n        require(providedGasLimit >= minGasLimit, \"LzApp: gas limit is too low\");\n    }\n\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\n        require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\n        assembly {\n            gasLimit := mload(add(_adapterParams, 34))\n        }\n    }\n\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\n        if (payloadSizeLimit == 0) { // use default if not set\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\n        }\n        require(_payloadSize <= payloadSizeLimit, \"LzApp: payload size is too large\");\n    }\n\n    //---------------------------UserApplication config----------------------------------------\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\n    }\n\n    // generic config for LayerZero user Application\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\n    }\n\n    function setSendVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setSendVersion(_version);\n    }\n\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setReceiveVersion(_version);\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\n    }\n\n    // _path = abi.encodePacked(remoteAddress, localAddress)\n    // this function set the trusted path for the cross-chain communication\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\n        trustedRemoteLookup[_srcChainId] = _path;\n        emit SetTrustedRemote(_srcChainId, _path);\n    }\n\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\n    }\n\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\n        require(path.length != 0, \"LzApp: no trusted path record\");\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\n    }\n\n    function setPrecrime(address _precrime) external onlyOwner {\n        precrime = _precrime;\n        emit SetPrecrime(_precrime);\n    }\n\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\n        require(_minGas > 0, \"LzApp: invalid minGas\");\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\n    }\n\n    // if the size is 0, it means default size limit\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\n        payloadSizeLimitLookup[_dstChainId] = _size;\n    }\n\n    //--------------------------- VIEW FUNCTION ----------------------------------------\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\n        return keccak256(trustedSource) == keccak256(_srcAddress);\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.7.6;\n\nlibrary ExcessivelySafeCall {\n    uint256 constant LOW_28_MASK =\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n            _gas, // gas\n            _target, // recipient\n            0, // ether value\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeStaticCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n            _gas, // gas\n            _target, // recipient\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /**\n     * @notice Swaps function selectors in encoded contract calls\n     * @dev Allows reuse of encoded calldata for functions with identical\n     * argument types but different names. It simply swaps out the first 4 bytes\n     * for the new selector. This function modifies memory in place, and should\n     * only be used with caution.\n     * @param _newSelector The new 4-byte selector\n     * @param _buf The encoded contract args\n     */\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\n    internal\n    pure\n    {\n        require(_buf.length >= 4);\n        uint256 _mask = LOW_28_MASK;\n        assembly {\n        // load the first word of\n            let _word := mload(add(_buf, 0x20))\n        // mask out the top 4 bytes\n        // /x\n            _word := and(_word, _mask)\n            _word := or(_newSelector, _word)\n            mstore(add(_buf, 0x20), _word)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroReceiver {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroUserApplicationConfig {\n    // @notice set the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    // @param _config - configuration in the bytes. can encode arbitrary content.\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\n\n    // @notice set the send() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setSendVersion(uint16 _version) external;\n\n    // @notice set the lzReceive() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setReceiveVersion(uint16 _version) external;\n\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n    // @param _srcChainId - the chainId of the source chain\n    // @param _srcAddress - the contract address of the source contract at the source chain\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ILayerZeroUserApplicationConfig.sol\";\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\n\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n        // Get a location of some free memory and store it in tempBytes as\n        // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n        // Store the length of the first bytes array at the beginning of\n        // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n        // Maintain a memory counter for the current write location in the\n        // temp bytes array by adding the 32 bytes for the array length to\n        // the starting location.\n            let mc := add(tempBytes, 0x20)\n        // Stop copying when the memory counter reaches the length of the\n        // first bytes array.\n            let end := add(mc, length)\n\n            for {\n            // Initialize a copy counter to the start of the _preBytes data,\n            // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n            // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n            // Write the _preBytes data into the tempBytes memory 32 bytes\n            // at a time.\n                mstore(mc, mload(cc))\n            }\n\n        // Add the length of _postBytes to the current length of tempBytes\n        // and store it as the new length in the first 32 bytes of the\n        // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n        // Move the memory counter back from a multiple of 0x20 to the\n        // actual end of the _preBytes data.\n            mc := end\n        // Stop copying when the memory counter reaches the new combined\n        // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n        // Update the free-memory pointer by padding our last write location\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n        // next 32 byte block, then round down to the nearest multiple of\n        // 32. If the sum of the length of the two arrays is zero then add\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n            not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n        // Read the first 32 bytes of _preBytes storage, which is the length\n        // of the array. (We don't need to use the offset into the slot\n        // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n        // Arrays of 31 bytes or less have an even value in their slot,\n        // while longer arrays have an odd value. The actual length is\n        // the slot divided by two for odd values, and the lowest order\n        // byte divided by two for even values.\n        // If the slot is even, bitwise and the slot with 255 and divide by\n        // two to get the length. If the slot is odd, bitwise and the slot\n        // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n        // slength can contain both the length and contents of the array\n        // if length < 32 bytes so let's prepare for that\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n            // Since the new array still fits in the slot, we just need to\n            // update the contents of the slot.\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                _preBytes.slot,\n                // all the modifications to the slot are inside this\n                // next block\n                add(\n                // we can just add to the slot contents because the\n                // bytes we want to change are the LSBs\n                fslot,\n                add(\n                mul(\n                div(\n                // load the bytes from memory\n                mload(add(_postBytes, 0x20)),\n                // zero all bytes to the right\n                exp(0x100, sub(32, mlength))\n                ),\n                // and now shift left the number of bytes to\n                // leave space for the length in the slot\n                exp(0x100, sub(32, newlength))\n                ),\n                // increase length by the double of the memory\n                // bytes length\n                mul(mlength, 2)\n                )\n                )\n                )\n            }\n            case 1 {\n            // The stored value fits in the slot, but the combined value\n            // will exceed it.\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // The contents of the _postBytes array start 32 bytes into\n            // the structure. Our first read should obtain the `submod`\n            // bytes that can fit into the unused space in the last word\n            // of the stored array. To get this, we read 32 bytes starting\n            // from `submod`, so the data we read overlaps with the array\n            // contents by `submod` bytes. Masking the lowest-order\n            // `submod` bytes allows us to add that value directly to the\n            // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                sc,\n                add(\n                and(\n                fslot,\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                ),\n                and(mload(mc), mask)\n                )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n            // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // Copy over the first `submod` bytes of the new data as in\n            // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n            // The first word of the slice result is potentially a partial\n            // word read from the original array. To read it, we calculate\n            // the length of that partial word and start copying that many\n            // bytes into the array. The first word we copy will start with\n            // data we don't care about, but the last `lengthmod` bytes will\n            // land at the beginning of the contents of the new array. When\n            // we're done copying, we overwrite the full first word with\n            // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n            // The multiplication in the next line is necessary\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\n            // the following copy loop was copying the origin's length\n            // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                // The multiplication in the next line has the same exact purpose\n                // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n            //update free-memory pointer\n            //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n            //zero out the 32 bytes slice we are about to return\n            //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n            // cb is a circuit breaker in the for loop since there's\n            //  no said feature for inline assembly loops\n            // cb = 1 - don't breaker\n            // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                    // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    view\n    returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n        // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n        // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                    // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                        // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                    // cb is a circuit breaker in the for loop since there's\n                    //  no said feature for inline assembly loops\n                    // cb = 1 - don't breaker\n                    // cb = 0 - break\n                        let cb := 1\n\n                    // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                            // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    },
    "contracts/token/onft/ONFT1155Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT1155Core.sol\";\r\nimport \"@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\";\r\n\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract ONFT1155Core is NonblockingLzApp, ERC165, IONFT1155Core {\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT1155Core).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, uint _amount, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        return estimateSendBatchFee(_dstChainId, _toAddress, _toSingletonArray(_tokenId), _toSingletonArray(_amount), _useZro, _adapterParams);\r\n    }\r\n\r\n    function estimateSendBatchFee(uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        bytes memory payload = abi.encode(_toAddress, _tokenIds, _amounts);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _sendBatch(_from, _dstChainId, _toAddress, _toSingletonArray(_tokenId), _toSingletonArray(_amount), _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\r\n    }\r\n\r\n    function sendBatchFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _sendBatch(_from, _dstChainId, _toAddress, _tokenIds, _amounts, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\r\n    }\r\n\r\n    function _sendBatch(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\r\n        _debitFrom(_from, _dstChainId, _toAddress, _tokenIds, _amounts);\r\n\r\n        bytes memory payload = abi.encode(_toAddress, _tokenIds, _amounts);\r\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams, _nativeFee);\r\n\r\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\r\n        if (_tokenIds.length == 1) {\r\n            emit SendToChain(_from, _dstChainId, _toAddress, _tokenIds[0], _amounts[0], nonce);\r\n        } else if (_tokenIds.length > 1) {\r\n            emit SendBatchToChain(_from, _dstChainId, _toAddress, _tokenIds, _amounts, nonce);\r\n        }\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // decode and load the toAddress\r\n        (bytes memory toAddressBytes, uint[] memory tokenIds, uint[] memory amounts) = abi.decode(_payload, (bytes, uint[], uint[]));\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n\r\n        _creditTo(_srcChainId, toAddress, tokenIds, amounts);\r\n\r\n        if (tokenIds.length == 1) {\r\n            emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenIds[0], amounts[0], _nonce);\r\n        } else if (tokenIds.length > 1) {\r\n            emit ReceiveBatchFromChain(_srcChainId, _srcAddress, toAddress, tokenIds, amounts, _nonce);\r\n        }\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual;\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual;\r\n\r\n    function _toSingletonArray(uint element) internal pure returns (uint[] memory) {\r\n        uint[] memory array = new uint[](1);\r\n        array[0] = element;\r\n        return array;\r\n    }\r\n\r\n    \r\n}\r\n"
    },
    "contracts/token/onft/IONFT1155Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT Core standard\r\n */\r\ninterface IONFT1155Core is IERC165 {\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _tokenId, uint _amount, uint64 _nonce);\r\n    event SendBatchToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint[] _tokenIds, uint[] _amounts, uint64 _nonce);\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint _amount, uint64 _nonce);\r\n    event ReceiveBatchFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint[] _tokenIds, uint[] _amounts, uint64 _nonce);\r\n\r\n    // _from - address where tokens should be deducted from on behalf of\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenId - token Id to transfer\r\n    // _amount - amount of the tokens to transfer\r\n    // _refundAddress - address on src that will receive refund for any overpayment of L0 fees\r\n    // _zroPaymentAddress - if paying in zro, pass the address to use. using 0x0 indicates not paying fees in zro\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // _from - address where tokens should be deducted from on behalf of\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenIds - token Ids to transfer\r\n    // _amounts - amounts of the tokens to transfer\r\n    // _refundAddress - address on src that will receive refund for any overpayment of L0 fees\r\n    // _zroPaymentAddress - if paying in zro, pass the address to use. using 0x0 indicates not paying fees in zro\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function sendBatchFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint[] calldata _tokenIds, uint[] calldata _amounts, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenId - token Id to transfer\r\n    // _amount - amount of the tokens to transfer\r\n    // _useZro - indicates to use zro to pay L0 fees\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenIds - tokens Id to transfer\r\n    // _amounts - amounts of the tokens to transfer\r\n    // _useZro - indicates to use zro to pay L0 fees\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function estimateSendBatchFee(uint16 _dstChainId, bytes calldata _toAddress, uint[] calldata _tokenIds, uint[] calldata _amounts, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n}\r\n"
    },
    "contracts/token/onft/extension/ProxyONFT1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ONFT1155Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\r\n\r\ncontract ProxyONFT1155 is ONFT1155Core, IERC1155Receiver {\r\n    using ERC165Checker for address;\r\n\r\n    IERC1155 public immutable token;\r\n\r\n    constructor(address _lzEndpoint, address _proxyToken) ONFT1155Core(_lzEndpoint) {\r\n        require(_proxyToken.supportsInterface(type(IERC1155).interfaceId), \"ProxyONFT1155: invalid ERC1155 token\");\r\n        token = IERC1155(_proxyToken);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT1155Core, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        require(_from == _msgSender(), \"ProxyONFT1155: owner is not send caller\");\r\n        token.safeBatchTransferFrom(_from, address(this), _tokenIds, _amounts, \"\");\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        token.safeBatchTransferFrom(address(this), _toAddress, _tokenIds, _amounts, \"\");\r\n    }\r\n\r\n    function onERC1155Received(address _operator, address, uint, uint, bytes memory) public virtual override returns (bytes4) {\r\n        // only allow `this` to tranfser token from others\r\n        if (_operator != address(this)) return bytes4(0);\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address _operator, address, uint[] memory, uint[] memory, bytes memory) public virtual override returns (bytes4) {\r\n        // only allow `this` to tranfser token from others\r\n        if (_operator != address(this)) return bytes4(0);\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/OmniBridge1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"./interfaces/IOmniBridge1155.sol\";\r\nimport \"./interfaces/IERC1155Persistent.sol\";\r\nimport \"./lzApp/NonblockingLzApp.sol\";\r\nimport \"./token/ERC1155Persistent.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\nerror NoZeroAddress();\r\n\r\ncontract OmniBridge1155 is\r\n    NonblockingLzApp,\r\n    ERC1155Holder,\r\n    IOmniBridge1155,\r\n    Pausable\r\n{\r\n\r\n    event LzReceive(address ercAddress, address toAddress, uint tokenId, uint amount, bytes payload, address onftaddress);\r\n\r\n    // regular address => PersistentNFT address\r\n    mapping(address => address) public persistentAddresses;\r\n    // PersistentNFT address => regular address\r\n    mapping(address => address) public originAddresses;\r\n    mapping(address => uint256) public collectionLockedCounter;\r\n\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function wrap(\r\n        uint16 _dstChainId,\r\n        address _toAddress,\r\n        address _erc1155Address,\r\n        uint256 _tokenId,\r\n        uint256 _amount,\r\n        bytes memory _adapterParams\r\n    ) external override payable {\r\n        if (_erc1155Address == address(0)) revert NoZeroAddress();\r\n\r\n        string memory tokenURI;\r\n        address erc1155Address;\r\n        if (originAddresses[_erc1155Address] != address(0)) {\r\n            // In case re-send ONFT to sender chain\r\n            erc1155Address = originAddresses[_erc1155Address];\r\n            tokenURI = IERC1155MetadataURI(_erc1155Address).uri(_tokenId);\r\n            IERC1155Persistent(_erc1155Address).burn(_msgSender(), _tokenId, _amount);\r\n        } else {\r\n            erc1155Address = _erc1155Address;\r\n            IERC1155(_erc1155Address).safeTransferFrom(\r\n                _msgSender(),\r\n                address(this),\r\n                _tokenId,\r\n                _amount,\r\n                \"\"\r\n            );\r\n            tokenURI = IERC1155MetadataURI(_erc1155Address).uri(_tokenId);\r\n        }\r\n\r\n        // encode the payload with the number of tokenAddress, toAddress, tokenId\r\n        bytes memory payload = abi.encode(erc1155Address, _toAddress, tokenURI, _tokenId, _amount);\r\n\r\n        // get the fees we need to pay to LayerZero for message delivery\r\n        (uint messageFee, ) = lzEndpoint.estimateFees(_dstChainId, address(this), payload, false, _adapterParams);\r\n        require(msg.value >= messageFee, \"Insufficient fee amount\");\r\n\r\n        _lzSend(_dstChainId, payload, payable(msg.sender), address(0x0), _adapterParams, msg.value);\r\n    }\r\n\r\n    function withdraw(address _persistentAddress, uint256 _tokenId, uint256 _amount)\r\n        external\r\n        override\r\n    {\r\n        if (originAddresses[_persistentAddress] == address(0)) revert NoZeroAddress();\r\n\r\n        IERC1155Persistent(_persistentAddress).burn(_msgSender(), _tokenId, _amount);\r\n\r\n        IERC1155(originAddresses[_persistentAddress]).safeTransferFrom(address(this), msg.sender, _tokenId, _amount, \"\");\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(\r\n        uint16,\r\n        bytes memory,\r\n        uint64,\r\n        bytes memory _payload\r\n    ) internal override {\r\n        // decode the parameter\r\n        (address _tokenAddress, address _toAddress, string memory _tokenURI, uint _tokenId, uint _amount) = abi.decode(_payload, (address, address, string, uint, uint));\r\n\r\n        address persistentAddress;\r\n        if (persistentAddresses[_tokenAddress] == address(0)) {\r\n            ERC1155Persistent persistentNFT = new ERC1155Persistent();\r\n            persistentNFT.mint(_toAddress, _tokenId, _amount);\r\n            persistentNFT.setURI(_tokenId, _tokenURI);\r\n            persistentAddresses[_tokenAddress] = address(persistentNFT);\r\n            originAddresses[address(persistentNFT)] = _tokenAddress;\r\n            collectionLockedCounter[address(persistentNFT)] += 1;\r\n            persistentAddress = address(persistentNFT);\r\n        } else {\r\n            IERC1155Persistent(persistentAddresses[_tokenAddress]).mint(_toAddress, _tokenId, _amount);\r\n            IERC1155Persistent(persistentAddresses[_tokenAddress]).setURI(_tokenId, _tokenURI);\r\n            collectionLockedCounter[persistentAddresses[_tokenAddress]] += 1;\r\n            persistentAddress = persistentAddresses[_tokenAddress];\r\n        }\r\n        emit LzReceive(_tokenAddress, _toAddress, _tokenId, _amount, _payload, persistentAddress);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return interfaceId == type(IOmniBridge1155).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IOmniBridge1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the Omni Bridge\r\n */\r\ninterface IOmniBridge1155 {\r\n    /**\r\n     * @dev \r\n     */\r\n    function wrap(uint16 _dstChainId, address _toAddress, address _erc1155Address, uint256 _tokenId, uint256 _amount, bytes memory _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev \r\n     */\r\n    function withdraw(address _onftAddress, uint256 _tokenId, uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce from\r\n     */\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n}"
    },
    "contracts/interfaces/IERC1155Persistent.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC721 Persistent with URI\r\n */\r\ninterface IERC1155Persistent {\r\n    function setURI(uint _tokenId, string memory newuri) external;\r\n\r\n    function mint(address account, uint256 id, uint256 amount) external;\r\n\r\n    function burn(address account, uint256 id, uint256 value) external;\r\n}\r\n"
    },
    "contracts/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./LzApp.sol\";\r\n\r\n/*\r\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\r\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\r\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\r\n */\r\nabstract contract NonblockingLzApp is LzApp {\r\n    constructor(address _endpoint) LzApp(_endpoint) {}\r\n\r\n    mapping(uint16 => mapping(bytes => mapping(uint => bytes32))) public failedMessages;\r\n\r\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\r\n\r\n    // overriding the virtual function in LzReceiver\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // try-catch all errors/exceptions\r\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\r\n            // do nothing\r\n        } catch {\r\n            // error / exception\r\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\r\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\r\n        }\r\n    }\r\n\r\n    function nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual {\r\n        // only internal transaction\r\n        require(_msgSender() == address(this), \"LzReceiver: caller must be LzApp\");\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function retryMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes calldata _payload) external payable virtual {\r\n        // assert there is message to retry\r\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\r\n        require(payloadHash != bytes32(0), \"LzReceiver: no stored message\");\r\n        require(keccak256(_payload) == payloadHash, \"LzReceiver: invalid payload\");\r\n        // clear the stored message\r\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\r\n        // execute the message. revert if it fails again\r\n        this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n}"
    },
    "contracts/token/ERC1155Persistent.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./../interfaces/IERC1155Persistent.sol\";\r\n\r\ncontract ERC1155Persistent is IERC1155Persistent, ERC1155, Ownable {\r\n    mapping(uint256 => string) public _uris;\r\n\r\n    constructor() ERC1155(\"\") {}\r\n\r\n    function setURI(uint _tokenId, string memory newuri) external override onlyOwner {\r\n        _setURI(newuri);\r\n        _uris[_tokenId] = newuri;\r\n    }\r\n\r\n    function mint(address account, uint256 id, uint256 amount)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        _mint(account, id, amount, \"\");\r\n    }\r\n\r\n    function burn(address account, uint256 id, uint256 value) external override onlyOwner {\r\n        _burn(account, id, value);\r\n    }\r\n\r\n    function uri(uint _tokenId) public override view returns (string memory) {\r\n        return _uris[_tokenId];\r\n    }\r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/ILayerZeroReceiver.sol\";\r\nimport \"../interfaces/ILayerZeroUserApplicationConfig.sol\";\r\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\r\nimport \"../libraries/BytesLib.sol\"; \r\n\r\n/*\r\n * a generic LzReceiver implementation\r\n */\r\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\r\n    using BytesLib for bytes;\r\n\r\n    ILayerZeroEndpoint public immutable lzEndpoint;\r\n    mapping(uint16 => bytes) public trustedRemoteLookup;\r\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\r\n    address public precrime;\r\n\r\n    event SetPrecrime(address precrime);\r\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\r\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\r\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\r\n\r\n    constructor(address _endpoint) {\r\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\r\n    }\r\n\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\r\n        // lzReceive must be called by the endpoint for security\r\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\r\n\r\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\r\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\r\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \"LzApp: invalid source sending contract\");\r\n\r\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\r\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\r\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\r\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\r\n        uint providedGasLimit = _getGasLimit(_adapterParams);\r\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\r\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\r\n        require(providedGasLimit >= minGasLimit, \"LzApp: gas limit is too low\");\r\n    }\r\n\r\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\r\n        require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\r\n        assembly {\r\n            gasLimit := mload(add(_adapterParams, 34))\r\n        }\r\n    }\r\n\r\n    //---------------------------UserApplication config----------------------------------------\r\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\r\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\r\n    }\r\n\r\n    // generic config for LayerZero user Application\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\r\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\r\n    }\r\n\r\n    function setSendVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setSendVersion(_version);\r\n    }\r\n\r\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setReceiveVersion(_version);\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\r\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    // _path = abi.encodePacked(remoteAddress, localAddress)\r\n    // this function set the trusted path for the cross-chain communication\r\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\r\n        trustedRemoteLookup[_srcChainId] = _path;\r\n        emit SetTrustedRemote(_srcChainId, _path);\r\n    }\r\n\r\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\r\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\r\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\r\n    }\r\n\r\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\r\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\r\n        require(path.length != 0, \"LzApp: no trusted path record\");\r\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\r\n    }\r\n\r\n    function setPrecrime(address _precrime) external onlyOwner {\r\n        precrime = _precrime;\r\n        emit SetPrecrime(_precrime);\r\n    }\r\n\r\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\r\n        require(_minGas > 0, \"LzApp: invalid minGas\");\r\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\r\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\r\n    }\r\n\r\n    //--------------------------- VIEW FUNCTION ----------------------------------------\r\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\r\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\r\n        return keccak256(trustedSource) == keccak256(_srcAddress);\r\n    }\r\n}"
    },
    "contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface ILayerZeroReceiver {\r\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\r\n    // @param _srcChainId - the source endpoint identifier\r\n    // @param _srcAddress - the source sending contract address from the source chain\r\n    // @param _nonce - the ordered message nonce\r\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\r\n}"
    },
    "contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface ILayerZeroUserApplicationConfig {\r\n    // @notice set the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    // @param _config - configuration in the bytes. can encode arbitrary content.\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\r\n\r\n    // @notice set the send() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setSendVersion(uint16 _version) external;\r\n\r\n    // @notice set the lzReceive() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setReceiveVersion(uint16 _version) external;\r\n\r\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\r\n    // @param _srcChainId - the chainId of the source chain\r\n    // @param _srcAddress - the contract address of the source contract at the source chain\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\r\n}"
    },
    "contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./ILayerZeroUserApplicationConfig.sol\";\r\n\r\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\r\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\r\n    // @param _payload - a custom bytes payload to send to the destination contract\r\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\r\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\r\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\r\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // @notice used by the messaging library to publish verified payload\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source contract (as bytes) at the source chain\r\n    // @param _dstAddress - the address on destination chain\r\n    // @param _nonce - the unbound message ordering nonce\r\n    // @param _gasLimit - the gas limit for external contract execution\r\n    // @param _payload - verified payload to send to the destination contract\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\r\n\r\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\r\n\r\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\r\n    // @param _srcAddress - the source chain contract address\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // @notice get this Endpoint's immutable source identifier\r\n    function getChainId() external view returns (uint16);\r\n\r\n    // @notice the interface to retry failed message on this Endpoint destination\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    // @param _payload - the payload to be retried\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\r\n\r\n    // @notice query if any STORED payload (message blocking) at the endpoint.\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    // @notice query if the _libraryAddress is valid for sending msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the _libraryAddress is valid for receiving msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the non-reentrancy guard for send() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isSendingPayload() external view returns (bool);\r\n\r\n    // @notice query if the non-reentrancy guard for receive() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isReceivingPayload() external view returns (bool);\r\n\r\n    // @notice get the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _userApplication - the contract address of the user application\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\r\n\r\n    // @notice get the send() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getSendVersion(address _userApplication) external view returns (uint16);\r\n\r\n    // @notice get the lzReceive() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\r\n}"
    },
    "contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\n/*\r\n * @title Solidity Bytes Arrays Utils\r\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\r\n *\r\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\r\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\r\n */\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\nlibrary BytesLib {\r\n    function concat(\r\n        bytes memory _preBytes,\r\n        bytes memory _postBytes\r\n    )\r\n    internal\r\n    pure\r\n    returns (bytes memory)\r\n    {\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n        // Get a location of some free memory and store it in tempBytes as\r\n        // Solidity does for memory variables.\r\n            tempBytes := mload(0x40)\r\n\r\n        // Store the length of the first bytes array at the beginning of\r\n        // the memory for tempBytes.\r\n            let length := mload(_preBytes)\r\n            mstore(tempBytes, length)\r\n\r\n        // Maintain a memory counter for the current write location in the\r\n        // temp bytes array by adding the 32 bytes for the array length to\r\n        // the starting location.\r\n            let mc := add(tempBytes, 0x20)\r\n        // Stop copying when the memory counter reaches the length of the\r\n        // first bytes array.\r\n            let end := add(mc, length)\r\n\r\n            for {\r\n            // Initialize a copy counter to the start of the _preBytes data,\r\n            // 32 bytes into its memory.\r\n                let cc := add(_preBytes, 0x20)\r\n            } lt(mc, end) {\r\n            // Increase both counters by 32 bytes each iteration.\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n            // Write the _preBytes data into the tempBytes memory 32 bytes\r\n            // at a time.\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n        // Add the length of _postBytes to the current length of tempBytes\r\n        // and store it as the new length in the first 32 bytes of the\r\n        // tempBytes memory.\r\n            length := mload(_postBytes)\r\n            mstore(tempBytes, add(length, mload(tempBytes)))\r\n\r\n        // Move the memory counter back from a multiple of 0x20 to the\r\n        // actual end of the _preBytes data.\r\n            mc := end\r\n        // Stop copying when the memory counter reaches the new combined\r\n        // length of the arrays.\r\n            end := add(mc, length)\r\n\r\n            for {\r\n                let cc := add(_postBytes, 0x20)\r\n            } lt(mc, end) {\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n        // Update the free-memory pointer by padding our last write location\r\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\r\n        // next 32 byte block, then round down to the nearest multiple of\r\n        // 32. If the sum of the length of the two arrays is zero then add\r\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\r\n            mstore(0x40, and(\r\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\r\n            not(31) // Round down to the nearest 32 bytes.\r\n            ))\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\r\n        assembly {\r\n        // Read the first 32 bytes of _preBytes storage, which is the length\r\n        // of the array. (We don't need to use the offset into the slot\r\n        // because arrays use the entire slot.)\r\n            let fslot := sload(_preBytes.slot)\r\n        // Arrays of 31 bytes or less have an even value in their slot,\r\n        // while longer arrays have an odd value. The actual length is\r\n        // the slot divided by two for odd values, and the lowest order\r\n        // byte divided by two for even values.\r\n        // If the slot is even, bitwise and the slot with 255 and divide by\r\n        // two to get the length. If the slot is odd, bitwise and the slot\r\n        // with -1 and divide by two.\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n            let newlength := add(slength, mlength)\r\n        // slength can contain both the length and contents of the array\r\n        // if length < 32 bytes so let's prepare for that\r\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n            switch add(lt(slength, 32), lt(newlength, 32))\r\n            case 2 {\r\n            // Since the new array still fits in the slot, we just need to\r\n            // update the contents of the slot.\r\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\r\n                sstore(\r\n                _preBytes.slot,\r\n                // all the modifications to the slot are inside this\r\n                // next block\r\n                add(\r\n                // we can just add to the slot contents because the\r\n                // bytes we want to change are the LSBs\r\n                fslot,\r\n                add(\r\n                mul(\r\n                div(\r\n                // load the bytes from memory\r\n                mload(add(_postBytes, 0x20)),\r\n                // zero all bytes to the right\r\n                exp(0x100, sub(32, mlength))\r\n                ),\r\n                // and now shift left the number of bytes to\r\n                // leave space for the length in the slot\r\n                exp(0x100, sub(32, newlength))\r\n                ),\r\n                // increase length by the double of the memory\r\n                // bytes length\r\n                mul(mlength, 2)\r\n                )\r\n                )\r\n                )\r\n            }\r\n            case 1 {\r\n            // The stored value fits in the slot, but the combined value\r\n            // will exceed it.\r\n            // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes.slot)\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n            // save new length\r\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\r\n\r\n            // The contents of the _postBytes array start 32 bytes into\r\n            // the structure. Our first read should obtain the `submod`\r\n            // bytes that can fit into the unused space in the last word\r\n            // of the stored array. To get this, we read 32 bytes starting\r\n            // from `submod`, so the data we read overlaps with the array\r\n            // contents by `submod` bytes. Masking the lowest-order\r\n            // `submod` bytes allows us to add that value directly to the\r\n            // stored value.\r\n\r\n                let submod := sub(32, slength)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(\r\n                sc,\r\n                add(\r\n                and(\r\n                fslot,\r\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\r\n                ),\r\n                and(mload(mc), mask)\r\n                )\r\n                )\r\n\r\n                for {\r\n                    mc := add(mc, 0x20)\r\n                    sc := add(sc, 1)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n            default {\r\n            // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes.slot)\r\n            // Start copying to the last used word of the stored array.\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n            // save new length\r\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\r\n\r\n            // Copy over the first `submod` bytes of the new data as in\r\n            // case 1 above.\r\n                let slengthmod := mod(slength, 32)\r\n                let mlengthmod := mod(mlength, 32)\r\n                let submod := sub(32, slengthmod)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\r\n\r\n                for {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n        }\r\n    }\r\n\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint256 _start,\r\n        uint256 _length\r\n    )\r\n    internal\r\n    pure\r\n    returns (bytes memory)\r\n    {\r\n        require(_length + 31 >= _length, \"slice_overflow\");\r\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n            // Get a location of some free memory and store it in tempBytes as\r\n            // Solidity does for memory variables.\r\n                tempBytes := mload(0x40)\r\n\r\n            // The first word of the slice result is potentially a partial\r\n            // word read from the original array. To read it, we calculate\r\n            // the length of that partial word and start copying that many\r\n            // bytes into the array. The first word we copy will start with\r\n            // data we don't care about, but the last `lengthmod` bytes will\r\n            // land at the beginning of the contents of the new array. When\r\n            // we're done copying, we overwrite the full first word with\r\n            // the actual length of the slice.\r\n                let lengthmod := and(_length, 31)\r\n\r\n            // The multiplication in the next line is necessary\r\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n            // the following copy loop was copying the origin's length\r\n            // and then ending prematurely not copying everything it should.\r\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                let end := add(mc, _length)\r\n\r\n                for {\r\n                // The multiplication in the next line has the same exact purpose\r\n                // as the one above.\r\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, _length)\r\n\r\n            //update free-memory pointer\r\n            //allocating the array padded to 32 bytes like the compiler does now\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            //if we want a zero-length slice let's just return a zero-length array\r\n            default {\r\n                tempBytes := mload(0x40)\r\n            //zero out the 32 bytes slice we are about to return\r\n            //we need to do it because Solidity does not garbage collect\r\n                mstore(tempBytes, 0)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\r\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\r\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\r\n        uint8 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x1), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\r\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\r\n        uint16 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x2), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\r\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\r\n        uint32 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x4), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\r\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\r\n        uint64 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x8), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\r\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\r\n        uint96 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0xc), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\r\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\r\n        uint128 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x10), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\r\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\r\n        uint256 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\r\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\r\n        bytes32 tempBytes32;\r\n\r\n        assembly {\r\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempBytes32;\r\n    }\r\n\r\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\r\n        bool success = true;\r\n\r\n        assembly {\r\n            let length := mload(_preBytes)\r\n\r\n        // if lengths don't match the arrays are not equal\r\n            switch eq(length, mload(_postBytes))\r\n            case 1 {\r\n            // cb is a circuit breaker in the for loop since there's\r\n            //  no said feature for inline assembly loops\r\n            // cb = 1 - don't breaker\r\n            // cb = 0 - break\r\n                let cb := 1\r\n\r\n                let mc := add(_preBytes, 0x20)\r\n                let end := add(mc, length)\r\n\r\n                for {\r\n                    let cc := add(_postBytes, 0x20)\r\n                // the next line is the loop condition:\r\n                // while(uint256(mc < end) + cb == 2)\r\n                } eq(add(lt(mc, end), cb), 2) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                // if any of these checks fails then arrays are not equal\r\n                    if iszero(eq(mload(mc), mload(cc))) {\r\n                    // unsuccess:\r\n                        success := 0\r\n                        cb := 0\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n            // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    function equalStorage(\r\n        bytes storage _preBytes,\r\n        bytes memory _postBytes\r\n    )\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        bool success = true;\r\n\r\n        assembly {\r\n        // we know _preBytes_offset is 0\r\n            let fslot := sload(_preBytes.slot)\r\n        // Decode the length of the stored array like in concatStorage().\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n\r\n        // if lengths don't match the arrays are not equal\r\n            switch eq(slength, mlength)\r\n            case 1 {\r\n            // slength can contain both the length and contents of the array\r\n            // if length < 32 bytes so let's prepare for that\r\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n                if iszero(iszero(slength)) {\r\n                    switch lt(slength, 32)\r\n                    case 1 {\r\n                    // blank the last byte which is the length\r\n                        fslot := mul(div(fslot, 0x100), 0x100)\r\n\r\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\r\n                        // unsuccess:\r\n                            success := 0\r\n                        }\r\n                    }\r\n                    default {\r\n                    // cb is a circuit breaker in the for loop since there's\r\n                    //  no said feature for inline assembly loops\r\n                    // cb = 1 - don't breaker\r\n                    // cb = 0 - break\r\n                        let cb := 1\r\n\r\n                    // get the keccak hash to get the contents of the array\r\n                        mstore(0x0, _preBytes.slot)\r\n                        let sc := keccak256(0x0, 0x20)\r\n\r\n                        let mc := add(_postBytes, 0x20)\r\n                        let end := add(mc, mlength)\r\n\r\n                    // the next line is the loop condition:\r\n                    // while(uint256(mc < end) + cb == 2)\r\n                        for {} eq(add(lt(mc, end), cb), 2) {\r\n                            sc := add(sc, 1)\r\n                            mc := add(mc, 0x20)\r\n                        } {\r\n                            if iszero(eq(sload(sc), mload(mc))) {\r\n                            // unsuccess:\r\n                                success := 0\r\n                                cb := 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n            // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/transfer/TransferManagerLzBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {ITransferManagerNFT} from \"../interfaces/ITransferManagerNFT.sol\";\r\nimport {NonblockingLzApp} from \"../lzApp/NonblockingLzApp.sol\";\r\nimport \"hardhat/console.sol\";\r\n/**\r\n * @title TransferManagerGhosts\r\n * @notice It allows the transfer of GhostlyGhosts tokens.\r\n */\r\nabstract contract TransferManagerLzBase is ITransferManagerNFT {\r\n    /**\r\n     * @notice Constructor\r\n     */\r\n    constructor() { }\r\n\r\n    /**\r\n     * @notice Transfer ERC721 token\r\n     * @param collection address of the collection on from chain\r\n     * @param from address of the sender\r\n     * @param to address of the recipient\r\n     * @param tokenId tokenId\r\n     * @dev For ERC721, amount is not used\r\n     */\r\n    function transferNFT(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external override {\r\n        _normalTransfer(collection, from, to, tokenId, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice normal send from maker to taker.\r\n     * @dev this function is called when maker and taker is on same chain\r\n     */\r\n    function _normalTransfer(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) virtual internal;\r\n}"
    },
    "contracts/interfaces/ITransferManagerNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITransferManagerNFT {\r\n    function transferNFT(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external;\r\n}"
    },
    "contracts/transfer/TransferManagerERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {TransferManagerLzBase} from \"./TransferManagerLzBase.sol\";\r\n\r\n/**\r\n * @title TransferManagerERC721\r\n * @notice It allows the transfer of ERC721 tokens.\r\n */\r\ncontract TransferManagerERC721 is TransferManagerLzBase {\r\n    constructor() {}\r\n\r\n    function _normalTransfer(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 \r\n    ) virtual internal override {\r\n        IERC721(collection).safeTransferFrom(from, to, tokenId);\r\n    }\r\n}"
    },
    "contracts/token/onft/IGregs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT standard\r\n */\r\ninterface IGregs is IERC721 {\r\n    function sendNFT(uint16 _chainId, uint tokenId) external payable;\r\n}\r\n"
    },
    "contracts/token/onft/extension/AdvancedONFT721GaslessClaim.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8;\r\n\r\nimport \"./AdvancedONFT721Gasless.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/// @title Interface of the Elements standard\r\n/// @author green9016\r\n/// @notice this implementation supports: batch mint, payable public and private mint, reveal of metadata and EIP-2981 on-chain royalties\r\ncontract AdvancedONFT721GaslessClaim is AdvancedONFT721Gasless {\r\n    // claimable\r\n    bool public _claimable;\r\n    uint public _claimableTokenCount;\r\n    uint public _claimedTokenCount;\r\n    mapping(uint => address) public _claimedTokens;\r\n    IERC721 public _claimableCollection;\r\n\r\n    /// @notice Constructor for the AdvancedONFT\r\n    /// @param _name the name of the token\r\n    /// @param _symbol the token symbol\r\n    /// @param _layerZeroEndpoint handles message transmission across chains\r\n    /// @param _startMintId the starting mint number on this chain, excluded\r\n    /// @param _endMintId the max number of mints on this chain\r\n    /// @param _maxTokensPerMint the max number of tokens that could be minted in a single transaction\r\n    /// @param _baseTokenURI the base URI for computing the tokenURI\r\n    /// @param _hiddenURI the URI for computing the hiddenMetadataUri\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _layerZeroEndpoint,\r\n        uint _startMintId,\r\n        uint _endMintId,\r\n        uint _maxTokensPerMint,\r\n        string memory _baseTokenURI,\r\n        string memory _hiddenURI,\r\n        address _stableToken,\r\n        uint _tax,\r\n        address _taxRecipient\r\n    ) AdvancedONFT721Gasless(_name, _symbol, _layerZeroEndpoint, _startMintId, _endMintId, _maxTokensPerMint, _baseTokenURI, _hiddenURI, _stableToken, _tax, _taxRecipient) {}\r\n\r\n    function claim(address claimer, uint tokenId) external onlyGelatoRelay {\r\n        require(_claimable == true, \"ElementONFT721: Sale has not started yet!\");\r\n        require(nextMintId + 1 <= maxMintId, \"ElementONFT721: max mint limit reached\");\r\n        require(_claimedTokenCount + 1 <= _claimableTokenCount, \"ElementONFT721: max claim limit reached\");\r\n        require(_claimableCollection.ownerOf(tokenId) == claimer, \"ElementONFT721: not owner of\");\r\n        require(_claimedTokens[tokenId] == address(0), \"ElementONFT721: already claimed\");\r\n\r\n        _transferRelayFee();\r\n\r\n        _claimedTokens[tokenId] = claimer;\r\n        ++_claimedTokenCount;\r\n\r\n        _mintTokens(claimer, 1);\r\n    }\r\n\r\n    function startClaim(uint claimableTokenCount, address claimableCollection) external onlyOwner {\r\n        _claimable = true;\r\n        _claimableTokenCount = claimableTokenCount;\r\n        _claimableCollection = IERC721(claimableCollection);\r\n    }\r\n\r\n    function stopClaim() external onlyOwner {\r\n        _claimable = false;\r\n    }\r\n}"
    },
    "contracts/token/onft/extension/AdvancedONFT721Gasless.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8;\r\n\r\nimport \"../ONFT721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport { GelatoRelayContext } from \"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\";\r\n\r\n/// @title Interface of the AdvancedONFT standard\r\n/// @author exakoss\r\n/// @notice this implementation supports: batch mint, payable public and private mint, reveal of metadata and EIP-2981 on-chain royalties\r\ncontract AdvancedONFT721Gasless is ONFT721, GelatoRelayContext, ReentrancyGuard {\r\n    using Strings for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint public tax = 1000; // 10% = 1000, 100 % = 10000\r\n    uint public price = 0;\r\n    uint public nextMintId;\r\n    uint public maxMintId;\r\n    uint public maxTokensPerMint;\r\n\r\n    // address for withdrawing money and receiving royalties, separate from owner\r\n    address payable beneficiary;\r\n    // address for tax recipient;\r\n    address payable taxRecipient;\r\n    // Merkle Root for WL implementation\r\n    bytes32 public merkleRoot;\r\n\r\n    string public contractURI;\r\n    string private baseURI;\r\n    string private hiddenMetadataURI;\r\n\r\n    bool public _publicSaleStarted;\r\n    bool public _saleStarted;\r\n    bool revealed;\r\n\r\n    IERC20 public stableToken;\r\n\r\n    modifier onlyBeneficiaryAndOwner() {\r\n        require(msg.sender == beneficiary || msg.sender == owner() , \"AdvancedONFT1155Gasless: caller is not the beneficiary\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Constructor for the AdvancedONFT\r\n    /// @param _name the name of the token\r\n    /// @param _symbol the token symbol\r\n    /// @param _layerZeroEndpoint handles message transmission across chains\r\n    /// @param _startMintId the starting mint number on this chain, excluded\r\n    /// @param _endMintId the max number of mints on this chain\r\n    /// @param _maxTokensPerMint the max number of tokens that could be minted in a single transaction\r\n    /// @param _baseTokenURI the base URI for computing the tokenURI\r\n    /// @param _hiddenURI the URI for computing the hiddenMetadataUri\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _layerZeroEndpoint,\r\n        uint _startMintId,\r\n        uint _endMintId,\r\n        uint _maxTokensPerMint,\r\n        string memory _baseTokenURI,\r\n        string memory _hiddenURI,\r\n        address _stableToken,\r\n        uint _tax,\r\n        address _taxRecipient\r\n    ) ONFT721(_name, _symbol, _layerZeroEndpoint) {\r\n        nextMintId = _startMintId;\r\n        maxMintId = _endMintId;\r\n        maxTokensPerMint = _maxTokensPerMint;\r\n        //set default beneficiary to owner\r\n        beneficiary = payable(msg.sender);\r\n        baseURI = _baseTokenURI;\r\n        hiddenMetadataURI = _hiddenURI;\r\n        stableToken = IERC20(_stableToken);\r\n        tax = _tax;\r\n        taxRecipient = payable(_taxRecipient);\r\n    }\r\n\r\n    function setMintRange(uint _startMintId, uint _endMintId, uint _maxTokensPerMint) external onlyOwner {\r\n        nextMintId = _startMintId;\r\n        maxMintId = _endMintId;\r\n        maxTokensPerMint = _maxTokensPerMint;\r\n    }\r\n\r\n    function setTax(uint _tax) external onlyOwner {\r\n        tax = _tax;\r\n    }\r\n\r\n    function setTaxRecipient(address payable _taxRecipient) external onlyOwner {\r\n        taxRecipient = payable(_taxRecipient);\r\n    }\r\n\r\n    /// @notice mint with stable coin\r\n    function _mintTokens(address minter, uint _nbTokens) internal {\r\n        //using a local variable, _mint and ++X pattern to save gas\r\n        uint local_nextMintId = nextMintId;\r\n        for (uint i; i < _nbTokens; i++) {\r\n            _mint(minter, ++local_nextMintId);\r\n        }\r\n        nextMintId = local_nextMintId;\r\n    }\r\n\r\n    /// @notice gasless mint \r\n    function publicMintGasless(uint _nbTokens, address minter) external onlyGelatoRelay {\r\n        require(_publicSaleStarted == true, \"ONFT721Gasless: Public sale has not started yet!\");\r\n        require(_saleStarted == true, \"ONFT721Gasless: Sale has not started yet!\");\r\n        require(_nbTokens != 0, \"ONFT721Gasless: Cannot mint 0 tokens!\");\r\n        require(_nbTokens <= maxTokensPerMint, \"ONFT721Gasless: You cannot mint more than maxTokensPerMint tokens at once!\");\r\n        require(nextMintId + _nbTokens <= maxMintId, \"ONFT721Gasless: max mint limit reached\");\r\n        require(price > 0, \"ONFT721Gasless: you need to set stable price\");\r\n        require(address(stableToken) != address(0), \"ONFT721Gasless: not support stable token\");\r\n\r\n        _transferRelayFee();\r\n\r\n        stableToken.safeTransferFrom(minter, address(this), price * _nbTokens);\r\n\r\n        _mintTokens(minter, _nbTokens);\r\n    }\r\n\r\n\r\n    /// @notice Gasless Mint your ONFTs, whitelisted addresses only\r\n    function mintGasless(uint _nbTokens, address minter, bytes32[] calldata _merkleProof) external onlyGelatoRelay {\r\n        require(_saleStarted == true, \"ONFT721Gasless: Sale has not started yet!\");\r\n        require(_nbTokens != 0, \"ONFT721Gasless: Cannot mint 0 tokens!\");\r\n        require(_nbTokens <= maxTokensPerMint, \"ONFT721Gasless: You cannot mint more than maxTokensPerMint tokens at once!\");\r\n        require(nextMintId + _nbTokens <= maxMintId, \"ONFT721Gasless: max mint limit reached\");\r\n\r\n        bool isWL = MerkleProof.verify(_merkleProof, merkleRoot, keccak256(abi.encodePacked(minter, _nbTokens)));\r\n        require(isWL == true, \"ONFT721Gasless: Invalid Merkle Proof\");\r\n\r\n        _transferRelayFee();\r\n\r\n        stableToken.safeTransferFrom(minter, address(this), price * _nbTokens);\r\n        \r\n        _mintTokens(minter, _nbTokens);\r\n    }\r\n\r\n\r\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\r\n        merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    function setPrice(uint newPrice) external onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n\r\n\r\n    function withdraw() public virtual onlyBeneficiaryAndOwner {\r\n        require(beneficiary != address(0), \"AdvancedONFT721: Beneficiary not set!\");\r\n\r\n        uint _balance = stableToken.balanceOf(address(this));\r\n        uint _taxFee = _balance * tax / 10000;\r\n\r\n        stableToken.safeTransfer(taxRecipient, _taxFee);\r\n        stableToken.safeTransfer(beneficiary, _balance - _taxFee);\r\n    }\r\n\r\n    function setContractURI(string memory _contractURI) public onlyOwner {\r\n        contractURI = _contractURI;\r\n    }\r\n\r\n    function setBaseURI(string memory uri) public onlyOwner {\r\n        baseURI = uri;\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) external onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function setHiddenMetadataUri(string memory _hiddenMetadataUri) external onlyOwner {\r\n        hiddenMetadataURI = _hiddenMetadataUri;\r\n    }\r\n\r\n    function setStableToken(address _stableToken) external onlyOwner {\r\n        stableToken = IERC20(_stableToken);\r\n    }\r\n\r\n    function flipRevealed() external onlyOwner {\r\n        revealed = !revealed;\r\n    }\r\n\r\n    function flipSaleStarted() external onlyOwner {\r\n        _saleStarted = !_saleStarted;\r\n    }\r\n\r\n    function flipPublicSaleStarted() external onlyOwner {\r\n        _publicSaleStarted = !_publicSaleStarted;\r\n    }\r\n\r\n    // The following functions are overrides required by Solidity.\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    function tokenURI(uint tokenId) public view override(ERC721) returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        if (!revealed) {\r\n            return hiddenMetadataURI;\r\n        }\r\n        return string(abi.encodePacked(_baseURI(), tokenId.toString()));\r\n    }\r\n\r\n    receive() external payable {}\r\n}"
    },
    "contracts/token/onft/ONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT721.sol\";\r\nimport \"./ONFT721Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"operator-filter-registry/src/DefaultOperatorFilterer.sol\";\r\n\r\n\r\n// NOTE: this ONFT contract has no public minting logic.\r\n// must implement your own minting logic in child classes\r\ncontract ONFT721 is ONFT721Core, ERC721, IONFT721, DefaultOperatorFilterer{\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC721(_name, _symbol) ONFT721Core(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT721Core, ERC721, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT721).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), _tokenId), \"ONFT721: send caller is not owner nor approved\");\r\n        require(ERC721.ownerOf(_tokenId) == _from, \"ONFT721: send from incorrect owner\");\r\n        _burn(_tokenId);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\r\n        _safeMint(_toAddress, _tokenId);\r\n    }\r\n     /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\r\n     */\r\n  \r\n    function setApprovalForAll(address operator, bool approved) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {\r\n        super.setApprovalForAll(operator, approved);\r\n    }\r\n\r\n    function approve(address operator, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {\r\n        super.approve(operator, tokenId);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperator(from) {\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperator(from) {\r\n        super.safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\r\n        public\r\n        override(ERC721, IERC721)\r\n        onlyAllowedOperator(from)\r\n    {\r\n        super.safeTransferFrom(from, to, tokenId, data);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GelatoRelayBase} from \"./base/GelatoRelayBase.sol\";\nimport {TokenUtils} from \"./lib/TokenUtils.sol\";\n\nuint256 constant _FEE_COLLECTOR_START = 72; // offset: address + address + uint256\nuint256 constant _FEE_TOKEN_START = 52; // offset: address + uint256\nuint256 constant _FEE_START = 32; // offset: uint256\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\n    assembly {\n        feeCollector := shr(\n            96,\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\n        )\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\n    assembly {\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\n    }\n}\n\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContext\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\n    assembly {\n        fee := calldataload(sub(calldatasize(), _FEE_START))\n    }\n}\n\n/**\n * @dev Context variant with feeCollector, feeToken and fee appended to msg.data\n * Expects calldata encoding:\n * abi.encodePacked( _data,\n *                   _feeCollector,\n *                   _feeToken,\n *                   _fee);\n * Therefore, we're expecting 20 + 20 + 32 = 72 bytes to be appended to normal msgData\n * 32bytes start offsets from calldatasize:\n *     feeCollector: - 72 bytes\n *     feeToken: - 52 bytes\n *     fee: - 32 bytes\n */\n/// @dev Do not use with GelatoRelayFeeCollector - pick only one\nabstract contract GelatoRelayContext is GelatoRelayBase {\n    using TokenUtils for address;\n\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\n    function _transferRelayFee() internal {\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\n    }\n\n    // DANGER! Only use with onlyGelatoRelay `_isGelatoRelay` before transferring\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\n        uint256 fee = _getFee();\n        require(\n            fee <= _maxFee,\n            \"GelatoRelayContext._transferRelayFeeCapped: maxFee\"\n        );\n        _getFeeToken().transfer(_getFeeCollector(), fee);\n    }\n\n    function _getMsgData() internal view returns (bytes calldata) {\n        return\n            _isGelatoRelay(msg.sender)\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\n                : msg.data;\n    }\n\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFeeCollector() internal pure returns (address) {\n        return _getFeeCollectorRelayContext();\n    }\n\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFeeToken() internal pure returns (address) {\n        return _getFeeTokenRelayContext();\n    }\n\n    // Only use with previous onlyGelatoRelay or `_isGelatoRelay` checks\n    function _getFee() internal pure returns (uint256) {\n        return _getFeeRelayContext();\n    }\n}\n"
    },
    "contracts/token/onft/IONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT721Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT standard\r\n */\r\ninterface IONFT721 is IONFT721Core, IERC721 {\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "operator-filter-registry/src/DefaultOperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\nimport {CANONICAL_CORI_SUBSCRIPTION} from \"./lib/Constants.sol\";\n/**\n * @title  DefaultOperatorFilterer\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "operator-filter-registry/src/OperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\nimport {CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS} from \"./lib/Constants.sol\";\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract OperatorFilterer {\n    /// @dev Emitted when an operator is not allowed.\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n        IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\n\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator approval is allowed.\n     */\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
    },
    "operator-filter-registry/src/lib/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n"
    },
    "operator-filter-registry/src/IOperatorFilterRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    /**\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\n     *         true if supplied registrant address is not registered.\n     */\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n\n    /**\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\n     */\n    function register(address registrant) external;\n\n    /**\n     * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\n     */\n    function registerAndSubscribe(address registrant, address subscription) external;\n\n    /**\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\n     *         address without subscribing.\n     */\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\n     *         Note that this does not remove any filtered addresses or codeHashes.\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\n     */\n    function unregister(address addr) external;\n\n    /**\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\n     */\n    function updateOperator(address registrant, address operator, bool filtered) external;\n\n    /**\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\n     */\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n\n    /**\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\n     */\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n\n    /**\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\n     */\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n\n    /**\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\n     *         subscription if present.\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\n     *         used.\n     */\n    function subscribe(address registrant, address registrantToSubscribe) external;\n\n    /**\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\n     */\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    /**\n     * @notice Get the subscription address of a given registrant, if any.\n     */\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    /**\n     * @notice Get the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscribers(address registrant) external returns (address[] memory);\n\n    /**\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\n     */\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Returns true if operator is filtered by a given address or its subscription.\n     */\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n\n    /**\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\n     */\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n\n    /**\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\n     */\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n\n    /**\n     * @notice Returns a list of filtered operators for a given address or its subscription.\n     */\n    function filteredOperators(address addr) external returns (address[] memory);\n\n    /**\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n\n    /**\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n\n    /**\n     * @notice Returns true if an address has registered\n     */\n    function isRegistered(address addr) external returns (bool);\n\n    /**\n     * @dev Convenience method to compute the code hash of an arbitrary contract\n     */\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GELATO_RELAY} from \"../constants/GelatoRelay.sol\";\n\nabstract contract GelatoRelayBase {\n    modifier onlyGelatoRelay() {\n        require(_isGelatoRelay(msg.sender), \"onlyGelatoRelay\");\n        _;\n    }\n\n    function _isGelatoRelay(address _forwarder) internal pure returns (bool) {\n        return _forwarder == GELATO_RELAY;\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {NATIVE_TOKEN} from \"../constants/Tokens.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary TokenUtils {\n    using SafeERC20 for IERC20;\n\n    modifier onlyERC20(address _token) {\n        require(_token != NATIVE_TOKEN, \"TokenUtils.onlyERC20\");\n        _;\n    }\n\n    function transfer(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_amount == 0) return;\n        _token == NATIVE_TOKEN\n            ? Address.sendValue(payable(_to), _amount)\n            : IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function transferFrom(\n        address _token,\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal onlyERC20(_token) {\n        if (_amount == 0) return;\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\n    }\n\n    function getBalance(address token, address user)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            token == NATIVE_TOKEN\n                ? user.balance\n                : IERC20(token).balanceOf(user);\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\naddress constant GELATO_RELAY_ERC2771 = 0xBf175FCC7086b4f9bd59d5EAE8eA67b8f940DE0d;\n"
    },
    "@gelatonetwork/relay-context/contracts/constants/Tokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n"
    },
    "contracts/token/onft/extension/AdvancedONFT1155GaslessOpen.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8;\r\n\r\nimport \"../ONFT1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport { GelatoRelayContext } from \"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\";\r\n\r\n/// @title Interface of the AdvancedONFT1155GaslessOpen standard\r\n/// @author exakoss\r\n/// @notice this implementation supports: publicMintGasless, mintGasless\r\ncontract AdvancedONFT1155GaslessOpen is ONFT1155, GelatoRelayContext, ReentrancyGuard {\r\n    using Strings for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint public tax = 1000; // 100% = 10000\r\n    uint public price = 0;\r\n\r\n    // address for withdrawing money and receiving royalties, separate from owner\r\n    address payable beneficiary;\r\n    // address for tax recipient;\r\n    address payable taxRecipient;\r\n\r\n    string public contractURI;\r\n    string private hiddenMetadataURI;\r\n\r\n    bool public _openEditionStarted;\r\n    uint public openEditionEndedBy;\r\n    bool revealed;\r\n\r\n    IERC20 public stableToken;\r\n\r\n    modifier onlyBeneficiaryAndOwner() {\r\n        require(msg.sender == beneficiary || msg.sender == owner() , \"AdvancedONFT1155Gasless: caller is not the beneficiary\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Constructor for the AdvancedONFT1155GaslessOpen\r\n    /// @param _layerZeroEndpoint handles message transmission across chains\r\n    /// @param _baseTokenURI the base URI for computing the tokenURI\r\n    /// @param _hiddenURI the URI for computing the hiddenMetadataUri\r\n    constructor(\r\n        address _layerZeroEndpoint,\r\n        string memory _baseTokenURI,\r\n        string memory _hiddenURI,\r\n        uint _tax,\r\n        address _taxRecipient\r\n    ) ONFT1155(_baseTokenURI, _layerZeroEndpoint) {\r\n        beneficiary = payable(msg.sender);\r\n        hiddenMetadataURI = _hiddenURI;\r\n        tax = _tax;\r\n        taxRecipient = payable(_taxRecipient);\r\n    }\r\n\r\n    function setTax(uint _tax) external onlyOwner {\r\n        tax = _tax;\r\n    }\r\n\r\n    function setTaxRecipient(address payable _taxRecipient) external onlyOwner {\r\n        taxRecipient = _taxRecipient;\r\n    }\r\n\r\n    /// @notice Mint your ONFTs\r\n    function mintGasless(uint _tokenId, uint _amount, address _minter) external onlyGelatoRelay {\r\n        require(_openEditionStarted == true, \"AdvancedONFT1155GaslessOpen: Open Edition has not started yet!\");\r\n        require(openEditionEndedBy >= block.timestamp, \"AdvancedONFT1155GaslessOpen: Open Edition has been ended.\");\r\n        require(_tokenId != 0, \"AdvancedONFT1155GaslessOpen: Cannot invalid token id!\");\r\n        require(price > 0, \"AdvancedONFT1155GaslessOpen: you need to set stable price\");\r\n        require(address(stableToken) != address(0), \"AdvancedONFT1155GaslessOpen: not support stable token\");\r\n        \r\n        _transferRelayFee();\r\n\r\n        stableToken.safeTransferFrom(_minter, address(this), price * _amount);\r\n\r\n        _mint(_minter, _tokenId, _amount, bytes(\"\"));\r\n    }\r\n\r\n    /// @notice Mint your ONFTs, whitelisted addresses only\r\n    function mint(uint _tokenId, uint _amount, bytes32[] calldata _merkleProof) external {\r\n        require(_openEditionStarted == true, \"AdvancedONFT1155GaslessOpen: Open Edition has not started yet!\");\r\n        require(openEditionEndedBy >= block.timestamp, \"AdvancedONFT1155GaslessOpen: Open Edition has been ended.\");\r\n        require(_tokenId != 0, \"AdvancedONFT1155GaslessOpen: Cannot mint 0 tokens!\");\r\n        require(price > 0, \"AdvancedONFT1155GaslessOpen: you need to set stable price\");\r\n        require(address(stableToken) != address(0), \"AdvancedONFT1155GaslessOpen: not support stable token\");\r\n\r\n        stableToken.safeTransferFrom(msg.sender, address(this), price * _amount);\r\n\r\n        _mint(msg.sender, _tokenId, _amount, bytes(\"\"));\r\n    }\r\n\r\n    function setPrice(uint newPrice) external onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n    function withdraw() public virtual onlyBeneficiaryAndOwner {\r\n        require(beneficiary != address(0), \"AdvancedONFT1155GaslessOpen: Beneficiary not set!\");\r\n        uint _balance = address(this).balance;\r\n        // tax: 100% = 10000\r\n        uint _taxFee = _balance * tax / 10000;\r\n        require(payable(beneficiary).send(_balance - _taxFee));\r\n        require(payable(taxRecipient).send(_taxFee));\r\n    }\r\n\r\n    function setContractURI(string memory _contractURI) public onlyOwner {\r\n        contractURI = _contractURI;\r\n    }\r\n\r\n    function setBaseURI(string memory baseUri) public onlyOwner {\r\n        _setURI(baseUri);\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) external onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function setHiddenMetadataUri(string memory _hiddenMetadataUri) external onlyOwner {\r\n        hiddenMetadataURI = _hiddenMetadataUri;\r\n    }\r\n\r\n    function flipRevealed() external onlyOwner {\r\n        revealed = !revealed;\r\n    }\r\n\r\n    function startOpenEdition(uint openEditionStoppedBy) external onlyOwner {\r\n        _openEditionStarted = true;\r\n        openEditionEndedBy = openEditionStoppedBy;\r\n    }\r\n\r\n    function stopOpenEdition() external onlyOwner {\r\n        _openEditionStarted = false;\r\n    }\r\n\r\n    function uri(uint tokenId) public view override(ERC1155) returns (string memory) {\r\n        if (!revealed) {\r\n            return hiddenMetadataURI;\r\n        }\r\n        return string(abi.encodePacked(super.uri(tokenId), tokenId.toString()));\r\n    }\r\n}"
    },
    "contracts/token/onft/ONFT1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT1155.sol\";\r\nimport \"./ONFT1155Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\r\nimport \"operator-filter-registry/src/DefaultOperatorFilterer.sol\";\r\n\r\n\r\n\r\n// NOTE: this ONFT contract has no public minting logic.\r\n// must implement your own minting logic in child classes\r\ncontract ONFT1155 is ONFT1155Core, ERC1155Supply, DefaultOperatorFilterer, IONFT1155 {\r\n    constructor(string memory _uri, address _lzEndpoint) ERC1155(_uri) ONFT1155Core(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT1155Core, ERC1155, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT1155).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        address spender = _msgSender();\r\n        require(spender == _from || isApprovedForAll(_from, spender), \"ONFT1155: send caller is not owner nor approved\");\r\n        _burnBatch(_from, _tokenIds, _amounts);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        _mintBatch(_toAddress, _tokenIds, _amounts, \"\");\r\n    }\r\n    function setApprovalForAll(address operator, bool approved) public override(ERC1155, IERC1155) onlyAllowedOperatorApproval(operator) {\r\n        super.setApprovalForAll(operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes memory data)\r\n        public\r\n        override(ERC1155, IERC1155)\r\n        onlyAllowedOperator(from)\r\n    {\r\n        super.safeTransferFrom(from, to, tokenId, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     *      In this example the added modifier ensures that the operator is allowed by the OperatorFilterRegistry.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override(ERC1155, IERC1155) onlyAllowedOperator(from) {\r\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n  \r\n}\r\n\r\n"
    },
    "contracts/token/onft/IONFT1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT1155Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT standard\r\n */\r\ninterface IONFT1155 is IONFT1155Core, IERC1155 {\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155Supply.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] -= amounts[i];\n            }\n        }\n    }\n}\n"
    },
    "contracts/token/onft/extension/AdvancedONFT1155Gasless.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8;\r\n\r\nimport \"../ONFT1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\n\r\nimport { GelatoRelayContext } from \"@gelatonetwork/relay-context/contracts/GelatoRelayContext.sol\";\r\n\r\n/// @title Interface of the AdvancedONFT1155Gasless standard\r\n/// @author exakoss\r\n/// @notice this implementation supports: publicMintGasless, mintGasless\r\ncontract AdvancedONFT1155Gasless is ONFT1155, GelatoRelayContext, ReentrancyGuard {\r\n\r\n    using Strings for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint public tax = 1000; // 100% = 10000\r\n    uint public price = 0;\r\n    \r\n\r\n    // address for withdrawing money and receiving royalties, separate from owner\r\n    address payable beneficiary;\r\n    // address for tax recipient;\r\n    address payable taxRecipient;\r\n    //Merkle Root for WL implementation\r\n    bytes32 public merkleRoot;\r\n\r\n\r\n    string public contractURI;\r\n    string private hiddenMetadataURI;\r\n\r\n    bool public _publicSaleStarted;\r\n    bool public _saleStarted;\r\n    bool revealed;\r\n\r\n    IERC20 public stableToken;\r\n    uint public maxTokensPerMint;\r\n    uint public maxTokenPerID;\r\n\r\n    \r\n    uint public ableToMint;\r\n\r\n    modifier onlyBeneficiaryAndOwner() {\r\n        require(msg.sender == beneficiary || msg.sender == owner() , \"AdvancedONFT1155Gasless: caller is not the beneficiary\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Constructor for the AdvancedONFT1155Gasless\r\n    /// @param _layerZeroEndpoint handles message transmission across chains\r\n    /// @param _baseTokenURI the base URI for computing the tokenURI\r\n    /// @param _hiddenURI the URI for computing the hiddenMetadataUri\r\n    constructor(\r\n        address _layerZeroEndpoint,\r\n        string memory _baseTokenURI,\r\n        string memory _hiddenURI,\r\n        uint _tax,\r\n        address _taxRecipient,\r\n        address _stableToken,\r\n        uint _maxTokensPerMint,\r\n        uint _ableToMint,\r\n        uint _maxTokenPerID\r\n\r\n   \r\n    ) ONFT1155(_baseTokenURI, _layerZeroEndpoint) {\r\n        beneficiary = payable(msg.sender);\r\n        hiddenMetadataURI = _hiddenURI;\r\n        tax = _tax;\r\n        taxRecipient = payable(_taxRecipient);\r\n        stableToken = IERC20(_stableToken);\r\n        maxTokensPerMint = _maxTokensPerMint;\r\n        maxTokenPerID = _maxTokenPerID;\r\n        ableToMint = _ableToMint;\r\n      \r\n       \r\n    }\r\n\r\n    function setTax(uint _tax) external onlyOwner {\r\n        tax = _tax;\r\n    }\r\n\r\n    function setTaxRecipient(address payable _taxRecipient) external onlyOwner {\r\n        taxRecipient = _taxRecipient;\r\n    }\r\n\r\n     function mintGasless(uint _tokenId, uint _amount, bytes32[] calldata _merkleProof, address _minter) external onlyGelatoRelay {\r\n        require(_saleStarted == true, \"AdvancedONFT1155Gasless: Sale has not started yet!\");\r\n        require(_publicSaleStarted == true, \"AdvancedONFT1155: Public sale has not started yet!\");\r\n        require(_saleStarted == true, \"AdvancedONFT1155: Sale has not started yet!\");\r\n        require(_tokenId == ableToMint, \"AdvancedONFT1155Gasless: trying to mint from an invalid chain\");\r\n        require(_amount <= maxTokensPerMint, \"AdvancedONFT1155Gasless: trying to mint too many tokens at once\");\r\n        require(totalSupply(_tokenId)+ _amount <= maxTokenPerID, \"AdvancedONFT1155Gasless: token limit exceeded\");\r\n        require(_tokenId != 0 , \"AdvancedONFT1155Gasless: Invalid token ID\");\r\n        require(price > 0, \"AdvancedONFT1155Gasless: you need to set stable price\");\r\n        require(address(stableToken) != address(0), \"ONFT721Gasless: not support stable token\");\r\n\r\n        bool isWL = MerkleProof.verify(_merkleProof, merkleRoot, keccak256(abi.encodePacked(_msgSender(), _tokenId, _amount)));\r\n        require(isWL == true, \"AdvancedONFT1155Gasless: Invalid Merkle Proof\");\r\n        \r\n        _transferRelayFee();\r\n\r\n        stableToken.safeTransferFrom(_minter, address(this), price * _amount);\r\n\r\n        _mint(_minter, _tokenId, _amount, bytes(\"\"));\r\n    }\r\n\r\n\r\n    /// @notice Mint your ONFTs\r\n    function publicMintGasless(uint _tokenId, uint _amount, address _minter) external onlyGelatoRelay {\r\n    \r\n        require(_tokenId == ableToMint, \"AdvancedONFT1155Gasless: trying to mint from an invalid chain\");\r\n        require(_amount <= maxTokensPerMint, \"AdvancedONFT1155Gasless: trying to mint too many tokens\");\r\n        require(totalSupply(_tokenId)+ _amount <= maxTokenPerID, \"AdvancedONFT1155Gasless: token limit exceeded\");\r\n\r\n        require(_tokenId != 0 , \"AdvancedONFT1155Gasless: Invalid token ID\");\r\n\r\n        require(price > 0, \"AdvancedONFT1155Gasless: you need to set stable price\");\r\n        require(address(stableToken) != address(0), \"ONFT721Gasless: not support stable token\");\r\n        \r\n        _transferRelayFee();\r\n\r\n        stableToken.safeTransferFrom(_minter, address(this), price * _amount);\r\n\r\n        _mint(_minter, _tokenId, _amount, bytes(\"\"));\r\n        \r\n        \r\n    }\r\n\r\n\r\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\r\n        merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    function setPrice(uint newPrice) external onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n    function withdraw() public virtual onlyBeneficiaryAndOwner {\r\n        require(beneficiary != address(0), \"A9\");\r\n        uint _balance = address(this).balance;\r\n        // tax: 100% = 10000\r\n        uint _taxFee = _balance * tax / 10000;\r\n        require(payable(beneficiary).send(_balance - _taxFee));\r\n        require(payable(taxRecipient).send(_taxFee));\r\n    }\r\n\r\n    function setContractURI(string memory _contractURI) public onlyOwner {\r\n        contractURI = _contractURI;\r\n    }\r\n\r\n    function setBaseURI(string memory baseUri) public onlyOwner {\r\n        _setURI(baseUri);\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) external onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function setHiddenMetadataUri(string memory _hiddenMetadataUri) external onlyOwner {\r\n        hiddenMetadataURI = _hiddenMetadataUri;\r\n    }\r\n\r\n    function flipRevealed() external onlyOwner {\r\n        revealed = !revealed;\r\n    }\r\n\r\n    function flipSaleStarted() external onlyOwner {\r\n        _saleStarted = !_saleStarted;\r\n    }\r\n\r\n    function flipPublicSaleStarted() external onlyOwner {\r\n        _publicSaleStarted = !_publicSaleStarted;\r\n    }\r\n\r\n    function uri(uint tokenId) public view override(ERC1155) returns (string memory) {\r\n        if (!revealed) {\r\n            return hiddenMetadataURI;\r\n        }\r\n        return string(abi.encodePacked(super.uri(tokenId), tokenId.toString()));\r\n    }\r\n}"
    },
    "contracts/token/onft/extension/AdvancedONFT721.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8;\r\n\r\nimport \"../ONFT721.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\n/// @title Interface of the AdvancedONFT standard\r\n/// @author exakoss\r\n/// @notice this implementation supports: batch mint, payable public and private mint, reveal of metadata and EIP-2981 on-chain royalties\r\ncontract AdvancedONFT721 is ONFT721, ReentrancyGuard {\r\n    using Strings for uint;\r\n\r\n    uint public tax = 1000; // 100% = 10000\r\n    uint public price = 0;\r\n    uint public nextMintId;\r\n    uint public maxMintId;\r\n    uint public maxTokensPerMint;\r\n\r\n\r\n    // address for withdrawing money and receiving royalties, separate from owner\r\n    address payable beneficiary;\r\n    // address for tax recipient;\r\n    address payable taxRecipient;\r\n    // Merkle Root for WL implementation\r\n    bytes32 public merkleRoot;\r\n\r\n    string public contractURI;\r\n    string private baseURI;\r\n    string private hiddenMetadataURI;\r\n\r\n    bool public _publicSaleStarted;\r\n    bool public _saleStarted;\r\n    bool revealed;\r\n\r\n\r\n    modifier onlyBeneficiaryAndOwner() {\r\n        require(msg.sender == beneficiary || msg.sender == owner() , \"AdvancedONFT1155Gasless: caller is not the beneficiary\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Constructor for the AdvancedONFT\r\n    /// @param _name the name of the token\r\n    /// @param _symbol the token symbol\r\n    /// @param _layerZeroEndpoint handles message transmission across chains\r\n    /// @param _startMintId the starting mint number on this chain, excluded\r\n    /// @param _endMintId the max number of mints on this chain\r\n    /// @param _maxTokensPerMint the max number of tokens that could be minted in a single transaction\r\n    /// @param _baseTokenURI the base URI for computing the tokenURI\r\n    /// @param _hiddenURI the URI for computing the hiddenMetadataUri\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _layerZeroEndpoint,\r\n        uint _startMintId,\r\n        uint _endMintId,\r\n        uint _maxTokensPerMint,\r\n        string memory _baseTokenURI,\r\n        string memory _hiddenURI,\r\n        uint _tax,\r\n        address _taxRecipient\r\n    ) ONFT721(_name, _symbol, _layerZeroEndpoint) {\r\n        nextMintId = _startMintId;\r\n        maxMintId = _endMintId;\r\n        maxTokensPerMint = _maxTokensPerMint;\r\n        //set default beneficiary to owner\r\n        beneficiary = payable(msg.sender);\r\n        baseURI = _baseTokenURI;\r\n        hiddenMetadataURI = _hiddenURI;\r\n        tax = _tax;\r\n        taxRecipient = payable(_taxRecipient);\r\n    }\r\n\r\n    function setMintRange(uint _startMintId, uint _endMintId, uint _maxTokensPerMint) external onlyOwner {\r\n        nextMintId = _startMintId;\r\n        maxMintId = _endMintId;\r\n        maxTokensPerMint = _maxTokensPerMint;\r\n    }\r\n\r\n    function setTax(uint _tax) external onlyOwner {\r\n        tax = _tax;\r\n    }\r\n\r\n    function setTaxRecipient(address payable _taxRecipient) external onlyOwner {\r\n        taxRecipient = _taxRecipient;\r\n    }\r\n\r\n    /// @notice Mint your ONFTs\r\n    function publicMint(uint _nbTokens) external payable {\r\n        require(_publicSaleStarted == true, \"AdvancedONFT721: Public sale has not started yet!\");\r\n        require(_saleStarted == true, \"AdvancedONFT721: Sale has not started yet!\");\r\n        require(_nbTokens != 0, \"AdvancedONFT721: Cannot mint 0 tokens!\");\r\n        require(_nbTokens <= maxTokensPerMint, \"AdvancedONFT721: You cannot mint more than maxTokensPerMint tokens at once!\");\r\n        require(nextMintId + _nbTokens <= maxMintId, \"AdvancedONFT721: max mint limit reached\");\r\n        require(_nbTokens * price <= msg.value, \"AdvancedONFT721: Inconsistent amount sent!\");\r\n\r\n        //using a local variable, _mint and ++X pattern to save gas\r\n        uint local_nextMintId = nextMintId;\r\n        for (uint i; i < _nbTokens; i++) {\r\n            _mint(msg.sender, ++local_nextMintId);\r\n        }\r\n        nextMintId = local_nextMintId;\r\n    }\r\n\r\n    /// @notice Mint your ONFTs, whitelisted addresses only\r\n    function mint(uint _nbTokens, bytes32[] calldata _merkleProof) external payable {\r\n        require(_saleStarted == true, \"AdvancedONFT721: Sale has not started yet!\");\r\n        require(_nbTokens != 0, \"AdvancedONFT721: Cannot mint 0 tokens!\");\r\n        require(_nbTokens <= maxTokensPerMint, \"AdvancedONFT721: You cannot mint more than maxTokensPerMint tokens at once!\");\r\n        require(nextMintId + _nbTokens <= maxMintId, \"AdvancedONFT721: max mint limit reached\");\r\n        require(_nbTokens * price <= msg.value, \"AdvancedONFT721: Inconsistent amount sent!\");\r\n\r\n        bool isWL = MerkleProof.verify(_merkleProof, merkleRoot, keccak256(abi.encodePacked(_msgSender())));\r\n        require(isWL == true, \"AdvancedONFT721: Invalid Merkle Proof\");\r\n\r\n        //using a local variable, _mint and ++X pattern to save gas\r\n        uint local_nextMintId = nextMintId;\r\n        for (uint i; i < _nbTokens; i++) {\r\n            _mint(msg.sender, ++local_nextMintId);\r\n        }\r\n        nextMintId = local_nextMintId;\r\n    }\r\n\r\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\r\n        merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    function setPrice(uint newPrice) external onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n    function withdraw() public virtual onlyBeneficiaryAndOwner {\r\n        require(beneficiary != address(0), \"AdvancedONFT721: Beneficiary not set!\");\r\n        uint _balance = address(this).balance;\r\n        // tax: 100% = 10000\r\n        uint _taxFee = _balance * tax / 10000;\r\n        require(payable(beneficiary).send(_balance - _taxFee));\r\n        require(payable(taxRecipient).send(_taxFee));\r\n    }\r\n\r\n    function setContractURI(string memory _contractURI) public onlyOwner {\r\n        contractURI = _contractURI;\r\n    }\r\n\r\n    function setBaseURI(string memory uri) public onlyOwner {\r\n        baseURI = uri;\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) external onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function setHiddenMetadataUri(string memory _hiddenMetadataUri) external onlyOwner {\r\n        hiddenMetadataURI = _hiddenMetadataUri;\r\n    }\r\n\r\n    function flipRevealed() external onlyOwner {\r\n        revealed = !revealed;\r\n    }\r\n\r\n    function flipSaleStarted() external onlyOwner {\r\n        _saleStarted = !_saleStarted;\r\n    }\r\n\r\n    function flipPublicSaleStarted() external onlyOwner {\r\n        _publicSaleStarted = !_publicSaleStarted;\r\n    }\r\n\r\n    // The following functions are overrides required by Solidity.\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    function tokenURI(uint tokenId) public view override(ERC721) returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        if (!revealed) {\r\n            return hiddenMetadataURI;\r\n        }\r\n        return string(abi.encodePacked(_baseURI(), tokenId.toString()));\r\n    }\r\n}"
    },
    "contracts/token/onft/extension/AdvancedONFT1155.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8;\r\n\r\nimport \"../ONFT1155.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\n/// @title Interface of the AdvancedONFT1155 standard\r\n/// @author exakoss\r\n/// @notice this implementation supports: batch mint, payable public and private mint, reveal of metadata and EIP-2981 on-chain royalties\r\ncontract AdvancedONFT1155 is ONFT1155, ReentrancyGuard {\r\n    using Strings for uint;\r\n\r\n    uint public tax = 1000; // 100% = 10000\r\n    uint public price = 0;\r\n\r\n\r\n    // address for withdrawing money and receiving royalties, separate from owner\r\n    address payable beneficiary;\r\n    // address for tax recipient;\r\n    address payable taxRecipient;\r\n    // Merkle Root for WL implementation\r\n    bytes32 public merkleRoot;\r\n\r\n    string public contractURI;\r\n    string private hiddenMetadataURI;\r\n\r\n    bool public _publicSaleStarted;\r\n    bool public _saleStarted;\r\n    bool revealed;\r\n\r\n    modifier onlyBeneficiaryAndOwner() {\r\n        require(msg.sender == beneficiary || msg.sender == owner() , \"AdvancedONFT1155Gasless: caller is not the beneficiary\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Constructor for the AdvancedONFT1155\r\n    /// @param _layerZeroEndpoint handles message transmission across chains\r\n    /// @param _baseTokenURI the base URI for computing the tokenURI\r\n    /// @param _hiddenURI the URI for computing the hiddenMetadataUri\r\n    constructor(\r\n        address _layerZeroEndpoint,\r\n        string memory _baseTokenURI,\r\n        string memory _hiddenURI,\r\n        uint _tax,\r\n        address _taxRecipient\r\n    ) ONFT1155(_baseTokenURI, _layerZeroEndpoint) {\r\n        beneficiary = payable(msg.sender);\r\n        hiddenMetadataURI = _hiddenURI;\r\n        tax = _tax;\r\n        taxRecipient = payable(_taxRecipient);\r\n    }\r\n\r\n    function setTax(uint _tax) external onlyOwner {\r\n        tax = _tax;\r\n    }\r\n\r\n    function setTaxRecipient(address payable _taxRecipient) external onlyOwner {\r\n        taxRecipient = _taxRecipient;\r\n    }\r\n\r\n    /// @notice Mint your ONFTs\r\n    function publicMint(uint _tokenId, uint _amount) external payable {\r\n        require(_publicSaleStarted == true, \"AdvancedONFT1155: Public sale has not started yet!\");\r\n        require(_saleStarted == true, \"AdvancedONFT1155: Sale has not started yet!\");\r\n        require(_tokenId != 0, \"AdvancedONFT1155: Cannot invalid token id!\");\r\n        require(_amount * price <= msg.value, \"AdvancedONFT1155: Inconsistent amount sent!\");\r\n\r\n        _mint(msg.sender, _tokenId, _amount, bytes(\"\"));\r\n    }\r\n\r\n    /// @notice Mint your ONFTs, whitelisted addresses only\r\n    function mint(uint _tokenId, uint _amount, bytes32[] calldata _merkleProof) external payable {\r\n        require(_saleStarted == true, \"AdvancedONFT1155: Sale has not started yet!\");\r\n        require(_tokenId != 0, \"AdvancedONFT1155: Cannot mint 0 tokens!\");\r\n        require(_amount * price <= msg.value, \"AdvancedONFT1155: Inconsistent amount sent!\");\r\n\r\n        bool isWL = MerkleProof.verify(_merkleProof, merkleRoot, keccak256(abi.encodePacked(_msgSender())));\r\n        require(isWL == true, \"AdvancedONFT1155: Invalid Merkle Proof\");\r\n\r\n        _mint(msg.sender, _tokenId, _amount, bytes(\"\"));\r\n    }\r\n\r\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\r\n        merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    function setPrice(uint newPrice) external onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n    function withdraw() public virtual onlyBeneficiaryAndOwner {\r\n        require(beneficiary != address(0), \"AdvancedONFT1155: Beneficiary not set!\");\r\n        uint _balance = address(this).balance;\r\n        // tax: 100% = 10000\r\n        uint _taxFee = _balance * tax / 10000;\r\n        require(payable(beneficiary).send(_balance - _taxFee));\r\n        require(payable(taxRecipient).send(_taxFee));\r\n    }\r\n\r\n    function setContractURI(string memory _contractURI) public onlyOwner {\r\n        contractURI = _contractURI;\r\n    }\r\n\r\n    function setBaseURI(string memory baseUri) public onlyOwner {\r\n        _setURI(baseUri);\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) external onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function setHiddenMetadataUri(string memory _hiddenMetadataUri) external onlyOwner {\r\n        hiddenMetadataURI = _hiddenMetadataUri;\r\n    }\r\n\r\n    function flipRevealed() external onlyOwner {\r\n        revealed = !revealed;\r\n    }\r\n\r\n    function flipSaleStarted() external onlyOwner {\r\n        _saleStarted = !_saleStarted;\r\n    }\r\n\r\n    function flipPublicSaleStarted() external onlyOwner {\r\n        _publicSaleStarted = !_publicSaleStarted;\r\n    }\r\n\r\n    function uri(uint tokenId) public view override(ERC1155) returns (string memory) {\r\n        if (!revealed) {\r\n            return hiddenMetadataURI;\r\n        }\r\n        return string(abi.encodePacked(super.uri(tokenId), tokenId.toString()));\r\n    }\r\n}"
    },
    "contracts/token/onft/extension/UniversalONFT721.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8;\r\n\r\nimport \"../ONFT721.sol\";\r\n\r\n/// @title Interface of the UniversalONFT standard\r\ncontract UniversalONFT721 is ONFT721 {\r\n    uint public nextMintId;\r\n    uint public maxMintId;\r\n\r\n    /// @notice Constructor for the UniversalONFT\r\n    /// @param _name the name of the token\r\n    /// @param _symbol the token symbol\r\n    /// @param _layerZeroEndpoint handles message transmission across chains\r\n    /// @param _startMintId the starting mint number on this chain\r\n    /// @param _endMintId the max number of mints on this chain\r\n    constructor(string memory _name, string memory _symbol, address _layerZeroEndpoint, uint _startMintId, uint _endMintId) ONFT721(_name, _symbol, _layerZeroEndpoint) {\r\n        nextMintId = _startMintId;\r\n        maxMintId = _endMintId;\r\n    }\r\n\r\n    /// @notice Mint your ONFT\r\n    function mint() external payable {\r\n        require(nextMintId <= maxMintId, \"UniversalONFT721: max mint limit reached\");\r\n\r\n        uint newId = nextMintId;\r\n        nextMintId++;\r\n\r\n        _safeMint(msg.sender, newId);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ONFT721Mock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8;\r\n\r\nimport \"../token/onft/ONFT721.sol\";\r\n\r\ncontract ONFT721Mock is ONFT721 {\r\n    constructor(string memory _name, string memory _symbol, address _layerZeroEndpoint) ONFT721(_name, _symbol, _layerZeroEndpoint) {}\r\n\r\n    function mint(address _tokenOwner, uint _newId) external payable {\r\n        _safeMint(_tokenOwner, _newId);\r\n    }\r\n}\r\n"
    },
    "contracts/token/ERC721Vanila.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract ERC721Vanila is ERC721, Ownable {\r\n    uint public nextMintId;\r\n    uint public maxMintId;\r\n    uint public maxTokensPerMint;\r\n    string private baseURI;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseTokenURI,\r\n        uint _startMintId,\r\n        uint _endMintId,\r\n        uint _maxTokensPerMint\r\n    ) ERC721(_name, _symbol) {\r\n        nextMintId = _startMintId;\r\n        maxMintId = _endMintId;\r\n        maxTokensPerMint = _maxTokensPerMint;\r\n        baseURI = _baseTokenURI;\r\n    }\r\n\r\n    function publicMint(uint _nbTokens) external {\r\n        require(_nbTokens != 0, \"ERC721Vanila: Cannot mint 0 tokens!\");\r\n        require(_nbTokens <= maxTokensPerMint, \"ERC721Vanila: You cannot mint more than maxTokensPerMint tokens at once!\");\r\n        require(nextMintId + _nbTokens <= maxMintId, \"ERC721Vanila: max mint limit reached\");\r\n\r\n        uint local_nextMintId = nextMintId;\r\n        for (uint i; i < _nbTokens; i++) {\r\n            _safeMint(msg.sender, ++local_nextMintId);\r\n        }\r\n        nextMintId = local_nextMintId;\r\n    }\r\n\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n}"
    },
    "contracts/strategy/StrategyStargateSaleForCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\r\n\r\n/**\r\n * @title StrategyStargateSaleForCollection\r\n * @notice Strategy that executes an order at a fixed price that\r\n * can be taken either by a bid or an ask.\r\n */\r\ncontract StrategyStargateSaleForCollection is Ownable, IExecutionStrategy {\r\n    // Event if the protocol fee changes\r\n    event NewProtocolFee(uint256 protocolFee);\r\n\r\n    // Protocol fee\r\n    uint256 internal _protocolFee = 200;\r\n\r\n    using OrderTypes for OrderTypes.TakerOrder;\r\n\r\n    function comparePrice(uint256 price1, uint256 price2, uint256 currencyRate) internal pure returns (bool) {\r\n        // if currencyRate is greater than 100, currencyRate is negative\r\n        if (currencyRate == 0) {\r\n            return price1 == price2;\r\n        }\r\n        else if (currencyRate < 100) {\r\n            return (price1 == price2 * 10 ** currencyRate);\r\n        }\r\n        else {\r\n            return (price1 == price2 / 10 ** (currencyRate - 100));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether a taker ask order can be executed against a maker bid\r\n     * @param takerAsk taker ask order\r\n     * @param makerBid maker bid order\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (,,,,uint256 currencyRate) = takerAsk.decodeParams();\r\n        return (\r\n            (comparePrice(makerBid.price, takerAsk.price, currencyRate) &&\r\n                (makerBid.startTime <= block.timestamp) &&\r\n                (makerBid.endTime >= block.timestamp)),\r\n            makerBid.tokenId,\r\n            makerBid.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether a taker bid order can be executed against a maker ask\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata, OrderTypes.MakerOrder calldata)\r\n        external\r\n        pure\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (false, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Set new protocol fee for this strategy\r\n     * @param newProtocolFee protocol fee\r\n     */\r\n    function setProtocolFee(uint256 newProtocolFee) external onlyOwner {\r\n        _protocolFee = newProtocolFee;\r\n\r\n        emit NewProtocolFee(newProtocolFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Return protocol fee for this strategy\r\n     * @return protocol fee\r\n     */\r\n    function viewProtocolFee() external view override returns (uint256) {\r\n        return _protocolFee;\r\n    }\r\n}"
    },
    "contracts/libraries/OrderTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\r\n\r\n/**\r\n * @title OrderTypes\r\n * @notice This library contains order types for the OmniX exchange.\r\n */\r\nlibrary OrderTypes {\r\n    using ECDSA for bytes32;\r\n\r\n    // keccak256(\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,bytes params)\")\r\n    // you can generate keccak256 on this link https://keccak-256.cloxy.net/\r\n    bytes32 internal constant MAKER_ORDER_HASH = 0x5ecbfd19307447ee7e4f336494603909c6ececa499f9a16b338a0639daa8ea2f;\r\n    struct MakerOrder {\r\n        bool isOrderAsk; // true --> ask / false --> bid\r\n        address signer; // signer of the maker order\r\n        address collection; // collection address\r\n        uint256 price; // price (used as )\r\n        uint256 tokenId; // id of the token\r\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\r\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\r\n        address currency; // currency (e.g., WETH)\r\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\r\n        uint256 startTime; // startTime in timestamp\r\n        uint256 endTime; // endTime in timestamp\r\n        bytes params; // additional parameters: chainId\r\n        bytes signature; // signature\r\n    }\r\n\r\n    struct TakerOrder {\r\n        bool isOrderAsk; // true --> ask / false --> bid\r\n        address taker; // msg.sender\r\n        uint256 price; // final price for the purchase\r\n        uint256 tokenId;\r\n        bytes params; // other params (e.g. chainId)\r\n    }\r\n\r\n    struct PartyData {\r\n        address currency;   // currency\r\n        address strategy;   // strategy\r\n        address party;      // party address. seller or buyer address.\r\n        uint16 chainId;     // lz chain id\r\n    }\r\n\r\n    function hash(MakerOrder memory makerOrder) internal pure returns (bytes32) {\r\n        bytes memory structHash = abi.encode(\r\n            MAKER_ORDER_HASH,\r\n            makerOrder.isOrderAsk,\r\n            makerOrder.signer,\r\n            makerOrder.collection,\r\n            makerOrder.price,\r\n            makerOrder.tokenId,\r\n            makerOrder.amount,\r\n            makerOrder.strategy,\r\n            makerOrder.currency,\r\n            makerOrder.nonce,\r\n            makerOrder.startTime,\r\n            makerOrder.endTime,\r\n            keccak256(makerOrder.params)\r\n        );\r\n        return keccak256(structHash);\r\n    }\r\n\r\n    function decodeParams(MakerOrder memory makerOrder) internal pure returns (uint16) {\r\n        // lzChainId\r\n        return abi.decode(makerOrder.params, (uint16));\r\n    }\r\n\r\n    function getRoyaltyInfo(MakerOrder memory makerOrder) internal pure returns (bytes memory) {\r\n        // lzChainId\r\n        (, bytes memory royaltyInfo) = abi.decode(makerOrder.params, (uint16, bytes));\r\n        return royaltyInfo;\r\n    }\r\n\r\n    function decodeParams(TakerOrder memory takerOrder) internal pure \r\n        returns (uint16, address, address, address, uint256)\r\n    {\r\n        // lzChainId, currency, collection, strategy, currencyRate\r\n        return abi.decode(takerOrder.params, (uint16, address, address, address, uint256));\r\n    }\r\n\r\n    function checkValid(MakerOrder memory makerOrder, bytes32 orderHash) internal pure {\r\n        // Verify the signer is not address(0)\r\n        require(makerOrder.signer != address(0), \"Order: Invalid signer\");\r\n\r\n        // Verify the amount is not 0\r\n        require(makerOrder.amount > 0, \"Order: Amount cannot be 0\");\r\n\r\n        // Verify the validity of the signature\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", orderHash));\r\n        require(\r\n            digest.toEthSignedMessageHash().recover(makerOrder.signature) == makerOrder.signer,\r\n            \"Signature: Invalid\"\r\n        );\r\n    }\r\n}"
    },
    "contracts/interfaces/IExecutionStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\n\r\ninterface IExecutionStrategy {\r\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function viewProtocolFee() external view returns (uint256);\r\n}"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/strategy/StrategyStargateSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\r\n\r\n/**\r\n * @title StrategyStargateSale\r\n * @notice Strategy that executes an order at a fixed price that\r\n * can be taken either by a bid or an ask.\r\n */\r\ncontract StrategyStargateSale is Ownable, IExecutionStrategy {\r\n    // Event if the protocol fee changes\r\n    event NewProtocolFee(uint256 protocolFee);\r\n\r\n    // Protocol fee\r\n    uint256 internal _protocolFee = 200;\r\n\r\n    using OrderTypes for OrderTypes.TakerOrder;\r\n\r\n    function comparePrice(uint256 price1, uint256 price2, uint256 currencyRate) internal pure returns (bool) {\r\n        // if currencyRate is greater than 100, currencyRate is negative\r\n        if (currencyRate == 0) {\r\n            return price1 == price2;\r\n        }\r\n        else if (currencyRate < 100) {\r\n            return (price1 == price2 * 10 ** currencyRate);\r\n        }\r\n        else {\r\n            return (price1 == price2 / 10 ** (currencyRate - 100));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether a taker ask order can be executed against a maker bid\r\n     * @param takerAsk taker ask order\r\n     * @param makerBid maker bid order\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (,,,,uint256 currencyRate) = takerAsk.decodeParams();\r\n        return (\r\n            (comparePrice(makerBid.price, takerAsk.price, currencyRate) &&\r\n                (makerBid.tokenId == takerAsk.tokenId) &&\r\n                (makerBid.startTime <= block.timestamp) &&\r\n                (makerBid.endTime >= block.timestamp)),\r\n            makerBid.tokenId,\r\n            makerBid.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether a taker bid order can be executed against a maker ask\r\n     * @param takerBid taker bid order\r\n     * @param makerAsk maker ask order\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (,,,,uint256 currencyRate) = takerBid.decodeParams();\r\n        return (\r\n            (comparePrice(makerAsk.price, takerBid.price, currencyRate) &&\r\n                (makerAsk.tokenId == takerBid.tokenId) &&\r\n                (makerAsk.startTime <= block.timestamp) &&\r\n                (makerAsk.endTime >= block.timestamp)),\r\n            makerAsk.tokenId,\r\n            makerAsk.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Set new protocol fee for this strategy\r\n     * @param newProtocolFee protocol fee\r\n     */\r\n    function setProtocolFee(uint256 newProtocolFee) external onlyOwner {\r\n        _protocolFee = newProtocolFee;\r\n\r\n        emit NewProtocolFee(newProtocolFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Return protocol fee for this strategy\r\n     * @return protocol fee\r\n     */\r\n    function viewProtocolFee() external view override returns (uint256) {\r\n        return _protocolFee;\r\n    }\r\n}"
    },
    "contracts/strategy/StrategyStandardSaleForCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\r\n\r\n/**\r\n * @title StrategyStandardSaleForCollection\r\n * @notice Strategy that executes an order at a fixed price that\r\n * can be taken either by a bid or an ask.\r\n */\r\ncontract StrategyStandardSaleForCollection is Ownable, IExecutionStrategy {\r\n    // Event if the protocol fee changes\r\n    event NewProtocolFee(uint256 protocolFee);\r\n\r\n    // Protocol fee\r\n    uint256 internal _protocolFee = 200;\r\n\r\n    /**\r\n     * @notice Check whether a taker ask order can be executed against a maker bid\r\n     * @param takerAsk taker ask order\r\n     * @param makerBid maker bid order\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            ((makerBid.price == takerAsk.price) &&\r\n                (makerBid.startTime <= block.timestamp) &&\r\n                (makerBid.endTime >= block.timestamp)),\r\n            takerAsk.tokenId,\r\n            makerBid.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether a taker bid order can be executed against a maker ask\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata, OrderTypes.MakerOrder calldata)\r\n        external\r\n        pure\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (false, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Set new protocol fee for this strategy\r\n     * @param newProtocolFee protocol fee\r\n     */\r\n    function setProtocolFee(uint256 newProtocolFee) external onlyOwner {\r\n        _protocolFee = newProtocolFee;\r\n\r\n        emit NewProtocolFee(newProtocolFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Return protocol fee for this strategy\r\n     * @return protocol fee\r\n     */\r\n    function viewProtocolFee() external view override returns (uint256) {\r\n        return _protocolFee;\r\n    }\r\n}"
    },
    "contracts/strategy/StrategyStandardSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\r\n\r\n/**\r\n * @title StrategyStandardSale\r\n * @notice Strategy that executes an order at a fixed price that\r\n * can be taken either by a bid or an ask.\r\n */\r\ncontract StrategyStandardSale is Ownable, IExecutionStrategy {\r\n    // Event if the protocol fee changes\r\n    event NewProtocolFee(uint256 protocolFee);\r\n\r\n    // Protocol fee\r\n    uint256 internal _protocolFee = 200;\r\n\r\n    /**\r\n     * @notice Check whether a taker ask order can be executed against a maker bid\r\n     * @param takerAsk taker ask order\r\n     * @param makerBid maker bid order\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            ((makerBid.price == takerAsk.price) &&\r\n                (makerBid.tokenId == takerAsk.tokenId) &&\r\n                (makerBid.startTime <= block.timestamp) &&\r\n                (makerBid.endTime >= block.timestamp)),\r\n            makerBid.tokenId,\r\n            makerBid.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether a taker bid order can be executed against a maker ask\r\n     * @param takerBid taker bid order\r\n     * @param makerAsk maker ask order\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            ((makerAsk.price == takerBid.price) &&\r\n                (makerAsk.tokenId == takerBid.tokenId) &&\r\n                (makerAsk.startTime <= block.timestamp) &&\r\n                (makerAsk.endTime >= block.timestamp)),\r\n            makerAsk.tokenId,\r\n            makerAsk.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Set new protocol fee for this strategy\r\n     * @param newProtocolFee protocol fee\r\n     */\r\n    function setProtocolFee(uint256 newProtocolFee) external onlyOwner {\r\n        _protocolFee = newProtocolFee;\r\n\r\n        emit NewProtocolFee(newProtocolFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Return protocol fee for this strategy\r\n     * @return protocol fee\r\n     */\r\n    function viewProtocolFee() external view override returns (uint256) {\r\n        return _protocolFee;\r\n    }\r\n}"
    },
    "contracts/strategy/StrategyPrivateSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\r\n\r\n/**\r\n * @title StrategyPrivateSale\r\n * @notice Strategy to set up an order that can only be executed by\r\n * a specific address.\r\n */\r\ncontract StrategyPrivateSale is IExecutionStrategy {\r\n    uint256 public immutable PROTOCOL_FEE;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _protocolFee: protocol fee (200 --> 2%, 400 --> 4%)\r\n     */\r\n    constructor(uint256 _protocolFee) {\r\n        PROTOCOL_FEE = _protocolFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether a taker ask order can be executed against a maker bid\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata, OrderTypes.MakerOrder calldata)\r\n        external\r\n        pure\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (false, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether a taker bid order can be executed against a maker ask\r\n     * @param takerBid taker bid order\r\n     * @param makerAsk maker ask order\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        // Retrieve target buyer\r\n        (, address targetBuyer) = abi.decode(makerAsk.params, (uint16, address));\r\n\r\n        return (\r\n            ((targetBuyer == takerBid.taker) &&\r\n                (makerAsk.price == takerBid.price) &&\r\n                (makerAsk.tokenId == takerBid.tokenId) &&\r\n                (makerAsk.startTime <= block.timestamp) &&\r\n                (makerAsk.endTime >= block.timestamp)),\r\n            makerAsk.tokenId,\r\n            makerAsk.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Return protocol fee for this strategy\r\n     * @return protocol fee\r\n     */\r\n    function viewProtocolFee() external view override returns (uint256) {\r\n        return PROTOCOL_FEE;\r\n    }\r\n}"
    },
    "contracts/rewards/airdrop/OmniXAirdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport {EIP712, ECDSA} from \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\r\n\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\nimport {OrderTypes} from \"../../libraries/OrderTypes.sol\";\r\n\r\n/**\r\n * @title OmniXAirdrop\r\n * @notice It distributes LOOKS tokens with a Merkle-tree airdrop.\r\n */\r\ncontract OmniXAirdrop is EIP712, Pausable, ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using OrderTypes for OrderTypes.MakerOrder;\r\n    using ECDSA for bytes32;\r\n\r\n\r\n    IERC20 public immutable omniXToken;\r\n\r\n    address public immutable MAIN_STRATEGY;\r\n    address public immutable TRANSFER_MANAGER_ERC721;\r\n    address public immutable TRANSFER_MANAGER_ERC1155;\r\n    address public immutable WETH;\r\n\r\n    uint256 public immutable MAXIMUM_AMOUNT_TO_CLAIM;\r\n\r\n    bool public isMerkleRootSet;\r\n\r\n    bytes32 public merkleRoot;\r\n\r\n    uint256 public endTimestamp;\r\n\r\n    mapping(address => bool) public hasClaimed;\r\n\r\n    event AirdropRewardsClaim(address indexed user, uint256 amount);\r\n    event MerkleRootSet(bytes32 merkleRoot);\r\n    event NewEndTimestamp(uint256 endTimestamp);\r\n    event TokensWithdrawn(uint256 amount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _endTimestamp end timestamp for claiming\r\n     * @param _omniXToken address of the OmniX token\r\n     * @param _transferManagerERC721 address of the transfer manager for ERC721 for OmniX exchange\r\n     * @param _transferManagerERC1155 address of the transfer manager for ERC1155 for OmniX exchange\r\n     * @param _mainStrategy main strategy (\"StandardSaleForFixedPrice\")\r\n     * @param _weth wrapped ETH address\r\n     * @param _maximumAmountToClaim maximum amount to claim per a user\r\n     */\r\n    constructor(\r\n        uint256 _endTimestamp,\r\n        uint256 _maximumAmountToClaim,\r\n        address _omniXToken,\r\n        string memory domain,\r\n        string memory domainVersion,\r\n        address _transferManagerERC721,\r\n        address _transferManagerERC1155,\r\n        address _mainStrategy,\r\n        address _weth\r\n    ) EIP712(domain, domainVersion) \r\n    {\r\n        endTimestamp = _endTimestamp;\r\n        MAXIMUM_AMOUNT_TO_CLAIM = _maximumAmountToClaim;\r\n\r\n        omniXToken = IERC20(_omniXToken);\r\n\r\n        TRANSFER_MANAGER_ERC721 = _transferManagerERC721;\r\n        TRANSFER_MANAGER_ERC1155 = _transferManagerERC1155;\r\n\r\n        MAIN_STRATEGY = _mainStrategy;\r\n        WETH = _weth;\r\n    }\r\n\r\n    /**\r\n     * @notice Claim tokens for airdrop\r\n     * @param amount amount to claim for the airdrop\r\n     * @param merkleProof array containing the merkle proof\r\n     * @param makerAsk makerAsk order\r\n     * @param isERC721 whether the order is for ERC721 (true --> ERC721/ false --> ERC1155)\r\n     */\r\n    function claim(\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof,\r\n        OrderTypes.MakerOrder calldata makerAsk,\r\n        bool isERC721\r\n    ) external whenNotPaused nonReentrant {\r\n        require(isMerkleRootSet, \"Airdrop: Merkle root not set\");\r\n        require(amount <= MAXIMUM_AMOUNT_TO_CLAIM, \"Airdrop: Amount too high\");\r\n        require(block.timestamp <= endTimestamp, \"Airdrop: Too late to claim\");\r\n\r\n        // Verify the user has claimed\r\n        require(!hasClaimed[msg.sender], \"Airdrop: Already claimed\");\r\n\r\n        // Checks on orders\r\n        require(_isOrderMatchingRequirements(makerAsk), \"Airdrop: Order not eligible for airdrop\");\r\n\r\n        // Compute the hash\r\n        bytes32 askHash = makerAsk.hash();\r\n\r\n        // Verify signature is legit\r\n        bytes32 digest = _hashTypedDataV4(askHash);\r\n        require(\r\n            digest.toEthSignedMessageHash().recover(makerAsk.signature) == makerAsk.signer,\r\n            \"Airdrop: Signature invalid\"\r\n        );\r\n\r\n        // Verify tokens are approved\r\n        if (isERC721) {\r\n            require(\r\n                IERC721(makerAsk.collection).isApprovedForAll(msg.sender, TRANSFER_MANAGER_ERC721),\r\n                \"Airdrop: Collection must be approved\"\r\n            );\r\n        } else {\r\n            require(\r\n                IERC1155(makerAsk.collection).isApprovedForAll(msg.sender, TRANSFER_MANAGER_ERC1155),\r\n                \"Airdrop: Collection must be approved\"\r\n            );\r\n        }\r\n\r\n        // Compute the node and verify the merkle proof\r\n        bytes32 node = keccak256(abi.encodePacked(msg.sender, amount));\r\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), \"Airdrop: Invalid proof\");\r\n\r\n        // Set as claimed\r\n        hasClaimed[msg.sender] = true;\r\n\r\n        // Transfer tokens\r\n        omniXToken.safeTransfer(msg.sender, amount);\r\n\r\n        emit AirdropRewardsClaim(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether it is possible to claim (it doesn't check orders)\r\n     * @param user address of the user\r\n     * @param amount amount to claim\r\n     * @param merkleProof array containing the merkle proof\r\n     */\r\n    function canClaim(\r\n        address user,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external view returns (bool) {\r\n        if (block.timestamp <= endTimestamp) {\r\n            // Compute the node and verify the merkle proof\r\n            bytes32 node = keccak256(abi.encodePacked(user, amount));\r\n            return MerkleProof.verify(merkleProof, merkleRoot, node);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Pause airdrop\r\n     */\r\n    function pauseAirdrop() external onlyOwner whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Set merkle root for airdrop\r\n     * @param _merkleRoot merkle root\r\n     */\r\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\r\n        require(!isMerkleRootSet, \"Owner: Merkle root already set\");\r\n\r\n        isMerkleRootSet = true;\r\n        merkleRoot = _merkleRoot;\r\n\r\n        emit MerkleRootSet(_merkleRoot);\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause airdrop\r\n     */\r\n    function unpauseAirdrop() external onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Update end timestamp\r\n     * @param newEndTimestamp new endtimestamp\r\n     * @dev Must be within 30 days\r\n     */\r\n    function updateEndTimestamp(uint256 newEndTimestamp) external onlyOwner {\r\n        require(block.timestamp + 30 days > newEndTimestamp, \"Owner: New timestamp too far\");\r\n        endTimestamp = newEndTimestamp;\r\n\r\n        emit NewEndTimestamp(newEndTimestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens back to owner\r\n     */\r\n    function withdrawTokenRewards() external onlyOwner {\r\n        require(block.timestamp > (endTimestamp + 1 days), \"Owner: Too early to remove rewards\");\r\n        uint256 balanceToWithdraw = omniXToken.balanceOf(address(this));\r\n        omniXToken.safeTransfer(msg.sender, balanceToWithdraw);\r\n\r\n        emit TokensWithdrawn(balanceToWithdraw);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether order is matching requirements for airdrop\r\n     * @param makerAsk makerAsk order\r\n     */\r\n    function _isOrderMatchingRequirements(OrderTypes.MakerOrder calldata makerAsk) internal view returns (bool) {\r\n        return\r\n            (makerAsk.isOrderAsk) &&\r\n            (makerAsk.signer == msg.sender) &&\r\n            (makerAsk.amount > 0) &&\r\n            (makerAsk.currency == WETH) &&\r\n            (makerAsk.strategy == MAIN_STRATEGY);\r\n    }\r\n}"
    },
    "contracts/transfer/TransferManagerERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport {TransferManagerLzBase} from \"./TransferManagerLzBase.sol\";\r\n\r\n/**\r\n * @title TransferManagerERC1155\r\n * @notice It allows the transfer of ERC1155 tokens.\r\n */\r\ncontract TransferManagerERC1155 is TransferManagerLzBase {\r\n    constructor() {}\r\n\r\n    function _normalTransfer(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) virtual internal override {\r\n        IERC1155(collection).safeTransferFrom(from, to, tokenId, amount, \"\");\r\n    }\r\n}"
    },
    "contracts/reservoir/exchanges/SeaportV12Module.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\nimport {BaseExchangeModule} from \"./BaseExchangeModule.sol\";\r\nimport {BaseModule} from \"../BaseModule.sol\";\r\nimport {ISeaport} from \"../../interfaces/ISeaport.sol\";\r\n\r\n// Notes on the Seaport module:\r\n// - supports filling listings (both ERC721/ERC1155)\r\n// - supports filling offers (both ERC721/ERC1155)\r\n\r\ncontract SeaportV12Module is BaseExchangeModule {\r\n    // --- Structs ---\r\n\r\n    struct SeaportETHListingWithPrice {\r\n        ISeaport.AdvancedOrder order;\r\n        uint256 price;\r\n    }\r\n\r\n    // --- Fields ---\r\n\r\n    ISeaport public constant EXCHANGE =\r\n        ISeaport(0x00000000000006c7676171937C444f6BDe3D6282);\r\n\r\n    // --- Constructor ---\r\n\r\n    constructor(address owner, address router)\r\n        BaseModule(owner)\r\n        BaseExchangeModule(router)\r\n    {}\r\n\r\n    // --- Fallback ---\r\n\r\n    receive() external payable {}\r\n\r\n    // --- Single ETH listing ---\r\n\r\n    function acceptETHListing(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        ETHListingParams calldata params,\r\n        Fee[] calldata fees\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        refundETHLeftover(params.refundTo)\r\n        chargeETHFees(fees, params.amount)\r\n    {\r\n        // Execute the fill\r\n        params.revertIfIncomplete\r\n            ? _fillSingleOrderWithRevertIfIncomplete(\r\n                order,\r\n                new ISeaport.CriteriaResolver[](0),\r\n                params.fillTo,\r\n                params.amount\r\n            )\r\n            : _fillSingleOrder(\r\n                order,\r\n                new ISeaport.CriteriaResolver[](0),\r\n                params.fillTo,\r\n                params.amount\r\n            );\r\n    }\r\n\r\n    // --- Single ERC20 listing ---\r\n\r\n    function acceptERC20Listing(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        ERC20ListingParams calldata params,\r\n        Fee[] calldata fees\r\n    )\r\n        external\r\n        nonReentrant\r\n        refundERC20Leftover(params.refundTo, params.token)\r\n        chargeERC20Fees(fees, params.token, params.amount)\r\n    {\r\n        // Approve the exchange if needed\r\n        _approveERC20IfNeeded(params.token, address(EXCHANGE), params.amount);\r\n\r\n        // Execute the fill\r\n        params.revertIfIncomplete\r\n            ? _fillSingleOrderWithRevertIfIncomplete(\r\n                order,\r\n                new ISeaport.CriteriaResolver[](0),\r\n                params.fillTo,\r\n                0\r\n            )\r\n            : _fillSingleOrder(\r\n                order,\r\n                new ISeaport.CriteriaResolver[](0),\r\n                params.fillTo,\r\n                0\r\n            );\r\n    }\r\n\r\n    // --- Multiple ETH listings ---\r\n\r\n    function acceptETHListings(\r\n        SeaportETHListingWithPrice[] calldata orders,\r\n        ETHListingParams calldata params,\r\n        Fee[] calldata fees\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        refundETHLeftover(params.refundTo)\r\n        chargeETHFees(fees, params.amount)\r\n    {\r\n        uint256 length = orders.length;\r\n        ISeaport.CriteriaResolver[]\r\n            memory criteriaResolvers = new ISeaport.CriteriaResolver[](0);\r\n\r\n        // Execute the fills\r\n        if (params.revertIfIncomplete) {\r\n            for (uint256 i; i < length; ) {\r\n                _fillSingleOrderWithRevertIfIncomplete(\r\n                    orders[i].order,\r\n                    criteriaResolvers,\r\n                    params.fillTo,\r\n                    orders[i].price\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        } else {\r\n            for (uint256 i; i < length; ) {\r\n                _fillSingleOrder(\r\n                    orders[i].order,\r\n                    criteriaResolvers,\r\n                    params.fillTo,\r\n                    orders[i].price\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // --- Multiple ERC20 listings ---\r\n\r\n    function acceptERC20Listings(\r\n        ISeaport.AdvancedOrder[] calldata orders,\r\n        ERC20ListingParams calldata params,\r\n        Fee[] calldata fees\r\n    )\r\n        external\r\n        nonReentrant\r\n        refundERC20Leftover(params.refundTo, params.token)\r\n        chargeERC20Fees(fees, params.token, params.amount)\r\n    {\r\n        // Approve the exchange if needed\r\n        _approveERC20IfNeeded(params.token, address(EXCHANGE), params.amount);\r\n\r\n        uint256 length = orders.length;\r\n        ISeaport.CriteriaResolver[]\r\n            memory criteriaResolvers = new ISeaport.CriteriaResolver[](0);\r\n\r\n        // Execute the fills\r\n        if (params.revertIfIncomplete) {\r\n            for (uint256 i; i < length; ) {\r\n                _fillSingleOrderWithRevertIfIncomplete(\r\n                    orders[i],\r\n                    criteriaResolvers,\r\n                    params.fillTo,\r\n                    0\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        } else {\r\n            for (uint256 i; i < length; ) {\r\n                _fillSingleOrder(\r\n                    orders[i],\r\n                    criteriaResolvers,\r\n                    params.fillTo,\r\n                    0\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // --- Single ERC721 offer ---\r\n\r\n    function acceptERC721Offer(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        // Use `memory` instead of `calldata` to avoid `Stack too deep` errors\r\n        ISeaport.CriteriaResolver[] memory criteriaResolvers,\r\n        OfferParams calldata params,\r\n        Fee[] calldata fees\r\n    ) external nonReentrant {\r\n        // Extract the ERC721 token from the consideration items\r\n        ISeaport.ConsiderationItem calldata nftItem = order\r\n            .parameters\r\n            .consideration[0];\r\n        if (\r\n            nftItem.itemType != ISeaport.ItemType.ERC721 &&\r\n            nftItem.itemType != ISeaport.ItemType.ERC721_WITH_CRITERIA\r\n        ) {\r\n            revert WrongParams();\r\n        }\r\n        IERC721 nftToken = IERC721(nftItem.token);\r\n\r\n        // Extract the payment token from the offer items\r\n        ISeaport.OfferItem calldata paymentItem = order.parameters.offer[0];\r\n        IERC20 paymentToken = IERC20(paymentItem.token);\r\n\r\n        // Approve the exchange if needed\r\n        _approveERC721IfNeeded(nftToken, address(EXCHANGE));\r\n        _approveERC20IfNeeded(\r\n            paymentToken,\r\n            address(EXCHANGE),\r\n            type(uint256).max\r\n        );\r\n\r\n        // Execute the fill\r\n        params.revertIfIncomplete\r\n            ? _fillSingleOrderWithRevertIfIncomplete(\r\n                order,\r\n                criteriaResolvers,\r\n                address(this),\r\n                0\r\n            )\r\n            : _fillSingleOrder(order, criteriaResolvers, address(this), 0);\r\n\r\n        uint256 identifier = nftItem.itemType == ISeaport.ItemType.ERC721\r\n            ? nftItem.identifierOrCriteria\r\n            : criteriaResolvers[0].identifier;\r\n\r\n        // Pay fees\r\n        if (nftToken.ownerOf(identifier) != address(this)) {\r\n            // Only pay fees if the fill was successful\r\n            uint256 feesLength = fees.length;\r\n            for (uint256 i; i < feesLength; ) {\r\n                Fee memory fee = fees[i];\r\n                _sendERC20(fee.recipient, fee.amount, paymentToken);\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Refund any ERC721 leftover\r\n        _sendAllERC721(params.refundTo, nftToken, identifier);\r\n\r\n        // Forward any left payment to the specified receiver\r\n        _sendAllERC20(params.fillTo, paymentToken);\r\n    }\r\n\r\n    // --- Single ERC1155 offer ---\r\n\r\n    function acceptERC1155Offer(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        // Use `memory` instead of `calldata` to avoid `Stack too deep` errors\r\n        ISeaport.CriteriaResolver[] memory criteriaResolvers,\r\n        OfferParams calldata params,\r\n        Fee[] calldata fees\r\n    ) external nonReentrant {\r\n        // Extract the ERC1155 token from the consideration items\r\n        ISeaport.ConsiderationItem calldata nftItem = order\r\n            .parameters\r\n            .consideration[0];\r\n        if (\r\n            nftItem.itemType != ISeaport.ItemType.ERC1155 &&\r\n            nftItem.itemType != ISeaport.ItemType.ERC1155_WITH_CRITERIA\r\n        ) {\r\n            revert WrongParams();\r\n        }\r\n        IERC1155 nftToken = IERC1155(nftItem.token);\r\n\r\n        // Extract the payment token from the offer items\r\n        ISeaport.OfferItem calldata paymentItem = order.parameters.offer[0];\r\n        IERC20 paymentToken = IERC20(paymentItem.token);\r\n\r\n        // Approve the exchange if needed\r\n        _approveERC1155IfNeeded(nftToken, address(EXCHANGE));\r\n        _approveERC20IfNeeded(\r\n            paymentToken,\r\n            address(EXCHANGE),\r\n            type(uint256).max\r\n        );\r\n\r\n        uint256 identifier = nftItem.itemType == ISeaport.ItemType.ERC1155\r\n            ? nftItem.identifierOrCriteria\r\n            : criteriaResolvers[0].identifier;\r\n\r\n        uint256 balanceBefore = nftToken.balanceOf(address(this), identifier);\r\n\r\n        // Execute the fill\r\n        params.revertIfIncomplete\r\n            ? _fillSingleOrderWithRevertIfIncomplete(\r\n                order,\r\n                criteriaResolvers,\r\n                address(this),\r\n                0\r\n            )\r\n            : _fillSingleOrder(order, criteriaResolvers, address(this), 0);\r\n\r\n        uint256 balanceAfter = nftToken.balanceOf(address(this), identifier);\r\n\r\n        // Pay fees\r\n        uint256 amountFilled = balanceBefore - balanceAfter;\r\n        if (amountFilled > 0) {\r\n            uint256 feesLength = fees.length;\r\n            for (uint256 i; i < feesLength; ) {\r\n                Fee memory fee = fees[i];\r\n                _sendERC20(\r\n                    fee.recipient,\r\n                    // Only pay fees for the amount that was actually filled\r\n                    (fee.amount * amountFilled) / order.numerator,\r\n                    paymentToken\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Refund any ERC1155 leftover\r\n        _sendAllERC1155(params.refundTo, nftToken, identifier);\r\n\r\n        // Forward any left payment to the specified receiver\r\n        _sendAllERC20(params.fillTo, paymentToken);\r\n    }\r\n\r\n    // --- Generic handler (used for Seaport-based approvals) ---\r\n\r\n    function matchOrders(\r\n        ISeaport.Order[] calldata orders,\r\n        ISeaport.Fulfillment[] calldata fulfillments\r\n    ) external nonReentrant {\r\n        // We don't perform any kind of input or return value validation,\r\n        // so this function should be used with precaution - the official\r\n        // way to use it is only for Seaport-based approvals\r\n        EXCHANGE.matchOrders(orders, fulfillments);\r\n    }\r\n\r\n    // --- ERC721 / ERC1155 hooks ---\r\n\r\n    // Single token offer acceptance can be done approval-less by using the\r\n    // standard `safeTransferFrom` method together with specifying data for\r\n    // further contract calls. An example:\r\n    // `safeTransferFrom(\r\n    //      0xWALLET,\r\n    //      0xMODULE,\r\n    //      TOKEN_ID,\r\n    //      0xABI_ENCODED_ROUTER_EXECUTION_CALLDATA_FOR_OFFER_ACCEPTANCE\r\n    // )`\r\n\r\n    function onERC721Received(\r\n        address, // operator,\r\n        address, // from\r\n        uint256, // tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4) {\r\n        if (data.length > 0) {\r\n            _makeCall(router, data, 0);\r\n        }\r\n\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address, // operator\r\n        address, // from\r\n        uint256, // tokenId\r\n        uint256, // amount\r\n        bytes calldata data\r\n    ) external returns (bytes4) {\r\n        if (data.length > 0) {\r\n            _makeCall(router, data, 0);\r\n        }\r\n\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    // --- Internal ---\r\n\r\n    // NOTE: In lots of cases, Seaport will not revert if fills were not\r\n    // fully executed. An example of that is partial filling, which will\r\n    // successfully fill any amount that is still available (including a\r\n    // zero amount). One way to ensure that we revert in case of partial\r\n    // executions is to check the order's filled amount before and after\r\n    // we trigger the fill (we can use Seaport's `getOrderStatus` method\r\n    // to check). Since this can be expensive in terms of gas, we have a\r\n    // separate method variant to be called when reverts are enabled.\r\n\r\n    function _fillSingleOrder(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        // Use `memory` instead of `calldata` to avoid `Stack too deep` errors\r\n        ISeaport.CriteriaResolver[] memory criteriaResolvers,\r\n        address receiver,\r\n        uint256 value\r\n    ) internal {\r\n        // Execute the fill\r\n        try\r\n            EXCHANGE.fulfillAdvancedOrder{value: value}(\r\n                order,\r\n                criteriaResolvers,\r\n                bytes32(0),\r\n                receiver\r\n            )\r\n        {} catch {}\r\n    }\r\n\r\n    function _fillSingleOrderWithRevertIfIncomplete(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        // Use `memory` instead of `calldata` to avoid `Stack too deep` errors\r\n        ISeaport.CriteriaResolver[] memory criteriaResolvers,\r\n        address receiver,\r\n        uint256 value\r\n    ) internal {\r\n        // Cache the order's hash\r\n        bytes32 orderHash = _getOrderHash(order.parameters);\r\n\r\n        // Before filling, get the order's filled amount\r\n        uint256 beforeFilledAmount = _getFilledAmount(orderHash);\r\n\r\n        // Execute the fill\r\n        bool success;\r\n        try\r\n            EXCHANGE.fulfillAdvancedOrder{value: value}(\r\n                order,\r\n                criteriaResolvers,\r\n                bytes32(0),\r\n                receiver\r\n            )\r\n        returns (bool fulfilled) {\r\n            success = fulfilled;\r\n        } catch {\r\n            revert UnsuccessfulFill();\r\n        }\r\n\r\n        if (!success) {\r\n            revert UnsuccessfulFill();\r\n        } else {\r\n            // After successfully filling, get the order's filled amount\r\n            uint256 afterFilledAmount = _getFilledAmount(orderHash);\r\n\r\n            // Make sure the amount filled as part of this call is correct\r\n            if (afterFilledAmount - beforeFilledAmount != order.numerator) {\r\n                revert UnsuccessfulFill();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getOrderHash(\r\n        // Must use `memory` instead of `calldata` for the below cast\r\n        ISeaport.OrderParameters memory orderParameters\r\n    ) internal view returns (bytes32 orderHash) {\r\n        // `OrderParameters` and `OrderComponents` share the exact same\r\n        // fields, apart from the last one, so here we simply treat the\r\n        // `orderParameters` argument as `OrderComponents` and then set\r\n        // the last field to the correct data\r\n        ISeaport.OrderComponents memory orderComponents;\r\n        assembly {\r\n            orderComponents := orderParameters\r\n        }\r\n        orderComponents.counter = EXCHANGE.getCounter(orderParameters.offerer);\r\n\r\n        orderHash = EXCHANGE.getOrderHash(orderComponents);\r\n    }\r\n\r\n    function _getFilledAmount(bytes32 orderHash)\r\n        internal\r\n        view\r\n        returns (uint256 totalFilled)\r\n    {\r\n        (, , totalFilled, ) = EXCHANGE.getOrderStatus(orderHash);\r\n    }\r\n}\r\n"
    },
    "contracts/reservoir/exchanges/BaseExchangeModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\nimport {BaseModule} from \"../BaseModule.sol\";\r\n\r\n// Notes:\r\n// - includes common helpers useful for all marketplace/exchange modules\r\n\r\nabstract contract BaseExchangeModule is BaseModule {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // --- Structs ---\r\n\r\n    // Every fill execution has the following parameters:\r\n    // - `fillTo`: the recipient of the received items\r\n    // - `refundTo`: the recipient of any refunds\r\n    // - `revertIfIncomplete`: whether to revert or skip unsuccessful fills\r\n\r\n    // The below `ETHListingParams` and `ERC20ListingParams` rely on the\r\n    // off-chain execution encoder to ensure that the orders filled with\r\n    // the passed in listing parameters exactly match (eg. order amounts\r\n    // and payment tokens match).\r\n\r\n    struct ETHListingParams {\r\n        address fillTo;\r\n        address refundTo;\r\n        bool revertIfIncomplete;\r\n        // The total amount of ETH to be provided when filling\r\n        uint256 amount;\r\n    }\r\n\r\n    struct ERC20ListingParams {\r\n        address fillTo;\r\n        address refundTo;\r\n        bool revertIfIncomplete;\r\n        // The ERC20 payment token for the listings\r\n        IERC20 token;\r\n        // The total amount of `token` to be provided when filling\r\n        uint256 amount;\r\n    }\r\n\r\n    struct OfferParams {\r\n        address fillTo;\r\n        address refundTo;\r\n        bool revertIfIncomplete;\r\n    }\r\n\r\n    struct Fee {\r\n        address recipient;\r\n        uint256 amount;\r\n    }\r\n\r\n    // --- Fields ---\r\n\r\n    address public immutable router;\r\n\r\n    // --- Errors ---\r\n\r\n    error UnsuccessfulFill();\r\n\r\n    // --- Constructor ---\r\n\r\n    constructor(address routerAddress) {\r\n        router = routerAddress;\r\n    }\r\n\r\n    // --- Modifiers ---\r\n\r\n    modifier refundETHLeftover(address refundTo) {\r\n        _;\r\n\r\n        uint256 leftover = address(this).balance;\r\n        if (leftover > 0) {\r\n            _sendETH(refundTo, leftover);\r\n        }\r\n    }\r\n\r\n    modifier refundERC20Leftover(address refundTo, IERC20 token) {\r\n        _;\r\n\r\n        uint256 leftover = token.balanceOf(address(this));\r\n        if (leftover > 0) {\r\n            token.safeTransfer(refundTo, leftover);\r\n        }\r\n    }\r\n\r\n    modifier chargeETHFees(Fee[] calldata fees, uint256 amount) {\r\n        if (fees.length == 0) {\r\n            _;\r\n        } else {\r\n            uint256 balanceBefore = address(this).balance;\r\n\r\n            _;\r\n\r\n            uint256 length = fees.length;\r\n            if (length > 0) {\r\n                uint256 balanceAfter = address(this).balance;\r\n                uint256 actualPaid = balanceBefore - balanceAfter;\r\n\r\n                uint256 actualFee;\r\n                for (uint256 i = 0; i < length; ) {\r\n                    // Adjust the fee to what was actually paid\r\n                    actualFee = (fees[i].amount * actualPaid) / amount;\r\n                    if (actualFee > 0) {\r\n                        _sendETH(fees[i].recipient, actualFee);\r\n                    }\r\n\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier chargeERC20Fees(\r\n        Fee[] calldata fees,\r\n        IERC20 token,\r\n        uint256 amount\r\n    ) {\r\n        if (fees.length == 0) {\r\n            _;\r\n        } else {\r\n            uint256 balanceBefore = token.balanceOf(address(this));\r\n\r\n            _;\r\n\r\n            uint256 length = fees.length;\r\n            if (length > 0) {\r\n                uint256 balanceAfter = token.balanceOf(address(this));\r\n                uint256 actualPaid = balanceBefore - balanceAfter;\r\n\r\n                uint256 actualFee;\r\n                for (uint256 i = 0; i < length; ) {\r\n                    // Adjust the fee to what was actually paid\r\n                    actualFee = (fees[i].amount * actualPaid) / amount;\r\n                    if (actualFee > 0) {\r\n                        token.safeTransfer(fees[i].recipient, actualFee);\r\n                    }\r\n\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // --- Helpers ---\r\n\r\n    function _sendAllETH(address to) internal {\r\n        _sendETH(to, address(this).balance);\r\n    }\r\n\r\n    function _sendAllERC20(address to, IERC20 token) internal {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            token.safeTransfer(to, balance);\r\n        }\r\n    }\r\n\r\n    function _sendAllERC721(\r\n        address to,\r\n        IERC721 token,\r\n        uint256 tokenId\r\n    ) internal {\r\n        if (token.ownerOf(tokenId) == address(this)) {\r\n            token.safeTransferFrom(address(this), to, tokenId);\r\n        }\r\n    }\r\n\r\n    function _sendAllERC1155(\r\n        address to,\r\n        IERC1155 token,\r\n        uint256 tokenId\r\n    ) internal {\r\n        uint256 balance = token.balanceOf(address(this), tokenId);\r\n        if (balance > 0) {\r\n            token.safeTransferFrom(address(this), to, tokenId, balance, \"\");\r\n        }\r\n    }\r\n\r\n    function _approveERC20IfNeeded(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 allowance = token.allowance(address(this), spender);\r\n        if (allowance < amount) {\r\n            token.approve(spender, amount - allowance);\r\n        }\r\n    }\r\n\r\n    function _approveERC721IfNeeded(IERC721 token, address operator) internal {\r\n        bool isApproved = token.isApprovedForAll(address(this), operator);\r\n        if (!isApproved) {\r\n            token.setApprovalForAll(operator, true);\r\n        }\r\n    }\r\n\r\n    function _approveERC1155IfNeeded(IERC1155 token, address operator)\r\n        internal\r\n    {\r\n        bool isApproved = token.isApprovedForAll(address(this), operator);\r\n        if (!isApproved) {\r\n            token.setApprovalForAll(operator, true);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/reservoir/BaseModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {TwoStepOwnable} from \"./misc/TwoStepOwnable.sol\";\r\n\r\n// Notes:\r\n// - includes common helpers useful for all modules\r\n\r\nabstract contract BaseModule is TwoStepOwnable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // --- Events ---\r\n\r\n    event CallExecuted(address target, bytes data, uint256 value);\r\n\r\n    // --- Errors ---\r\n\r\n    error UnsuccessfulCall();\r\n    error UnsuccessfulPayment();\r\n    error WrongParams();\r\n\r\n    // --- Constructor ---\r\n\r\n    constructor(address owner) TwoStepOwnable(owner) {}\r\n\r\n    // --- Owner ---\r\n\r\n    // To be able to recover anything that gets stucked by mistake in the module,\r\n    // we allow the owner to perform any arbitrary call. Since the goal is to be\r\n    // stateless, this should only happen in case of mistakes. In addition, this\r\n    // method is also useful for withdrawing any earned trading rewards.\r\n    function makeCalls(\r\n        address[] calldata targets,\r\n        bytes[] calldata data,\r\n        uint256[] calldata values\r\n    ) external payable onlyOwner nonReentrant {\r\n        uint256 length = targets.length;\r\n        for (uint256 i = 0; i < length; ) {\r\n            _makeCall(targets[i], data[i], values[i]);\r\n            emit CallExecuted(targets[i], data[i], values[i]);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    // --- Helpers ---\r\n\r\n    function _sendETH(address to, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            (bool success, ) = payable(to).call{value: amount}(\"\");\r\n            if (!success) {\r\n                revert UnsuccessfulPayment();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _sendERC20(\r\n        address to,\r\n        uint256 amount,\r\n        IERC20 token\r\n    ) internal {\r\n        if (amount > 0) {\r\n            token.safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    function _makeCall(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, ) = payable(target).call{value: value}(data);\r\n        if (!success) {\r\n            revert UnsuccessfulCall();\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ISeaport.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface ISeaport {\r\n    enum OrderType {\r\n        FULL_OPEN,\r\n        PARTIAL_OPEN,\r\n        FULL_RESTRICTED,\r\n        PARTIAL_RESTRICTED\r\n    }\r\n\r\n    enum ItemType {\r\n        NATIVE,\r\n        ERC20,\r\n        ERC721,\r\n        ERC1155,\r\n        ERC721_WITH_CRITERIA,\r\n        ERC1155_WITH_CRITERIA\r\n    }\r\n\r\n    enum Side {\r\n        OFFER,\r\n        CONSIDERATION\r\n    }\r\n\r\n    struct OfferItem {\r\n        ItemType itemType;\r\n        address token;\r\n        uint256 identifierOrCriteria;\r\n        uint256 startAmount;\r\n        uint256 endAmount;\r\n    }\r\n\r\n    struct ConsiderationItem {\r\n        ItemType itemType;\r\n        address token;\r\n        uint256 identifierOrCriteria;\r\n        uint256 startAmount;\r\n        uint256 endAmount;\r\n        address recipient;\r\n    }\r\n\r\n    struct SpentItem {\r\n        ItemType itemType;\r\n        address token;\r\n        uint256 identifier;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct ReceivedItem {\r\n        ItemType itemType;\r\n        address token;\r\n        uint256 identifier;\r\n        uint256 amount;\r\n        address recipient;\r\n    }\r\n\r\n    struct OrderComponents {\r\n        address offerer;\r\n        address zone;\r\n        OfferItem[] offer;\r\n        ConsiderationItem[] consideration;\r\n        OrderType orderType;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bytes32 zoneHash;\r\n        uint256 salt;\r\n        bytes32 conduitKey;\r\n        uint256 counter;\r\n    }\r\n\r\n    struct OrderParameters {\r\n        address offerer;\r\n        address zone;\r\n        OfferItem[] offer;\r\n        ConsiderationItem[] consideration;\r\n        OrderType orderType;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bytes32 zoneHash;\r\n        uint256 salt;\r\n        bytes32 conduitKey;\r\n        uint256 totalOriginalConsiderationItems;\r\n    }\r\n\r\n    struct Order {\r\n        OrderParameters parameters;\r\n        bytes signature;\r\n    }\r\n\r\n    struct AdvancedOrder {\r\n        OrderParameters parameters;\r\n        uint120 numerator;\r\n        uint120 denominator;\r\n        bytes signature;\r\n        bytes extraData;\r\n    }\r\n\r\n    struct CriteriaResolver {\r\n        uint256 orderIndex;\r\n        Side side;\r\n        uint256 index;\r\n        uint256 identifier;\r\n        bytes32[] criteriaProof;\r\n    }\r\n\r\n    struct FulfillmentComponent {\r\n        uint256 orderIndex;\r\n        uint256 itemIndex;\r\n    }\r\n\r\n    struct Fulfillment {\r\n        FulfillmentComponent[] offerComponents;\r\n        FulfillmentComponent[] considerationComponents;\r\n    }\r\n\r\n    struct Execution {\r\n        ReceivedItem item;\r\n        address offerer;\r\n        bytes32 conduitKey;\r\n    }\r\n\r\n    struct ZoneParameters {\r\n        bytes32 orderHash;\r\n        address fulfiller;\r\n        address offerer;\r\n        SpentItem[] offer;\r\n        ReceivedItem[] consideration;\r\n        bytes extraData;\r\n        bytes32[] orderHashes;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bytes32 zoneHash;\r\n    }\r\n\r\n    struct Schema {\r\n        uint256 id;\r\n        bytes metadata;\r\n    }\r\n\r\n    function getOrderHash(OrderComponents calldata order)\r\n        external\r\n        view\r\n        returns (bytes32 orderHash);\r\n\r\n    function getOrderStatus(bytes32 orderHash)\r\n        external\r\n        view\r\n        returns (\r\n            bool isValidated,\r\n            bool isCancelled,\r\n            uint256 totalFilled,\r\n            uint256 totalSize\r\n        );\r\n\r\n    function getCounter(address offerer)\r\n        external\r\n        view\r\n        returns (uint256 counter);\r\n\r\n    function fulfillAdvancedOrder(\r\n        AdvancedOrder calldata advancedOrder,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient\r\n    ) external payable returns (bool fulfilled);\r\n\r\n    function fulfillAvailableAdvancedOrders(\r\n        AdvancedOrder[] memory advancedOrders,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        FulfillmentComponent[][] calldata offerFulfillments,\r\n        FulfillmentComponent[][] calldata considerationFulfillments,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient,\r\n        uint256 maximumFulfilled\r\n    )\r\n        external\r\n        payable\r\n        returns (bool[] memory availableOrders, Execution[] memory executions);\r\n\r\n    function matchOrders(\r\n        Order[] calldata orders,\r\n        Fulfillment[] calldata fulfillments\r\n    ) external payable returns (Execution[] memory executions);\r\n\r\n    function matchAdvancedOrders(\r\n        AdvancedOrder[] calldata advancedOrders,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        Fulfillment[] calldata fulfillments\r\n    ) external payable returns (Execution[] memory executions);\r\n}\r\n"
    },
    "contracts/reservoir/misc/TwoStepOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n// Adapted from:\r\n// https://github.com/boringcrypto/BoringSolidity/blob/e74c5b22a61bfbadd645e51a64aa1d33734d577a/contracts/BoringOwnable.sol\r\ncontract TwoStepOwnable {\r\n    // --- Fields ---\r\n\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    // --- Events ---\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    // --- Errors ---\r\n\r\n    error InvalidParams();\r\n    error Unauthorized();\r\n\r\n    // --- Modifiers ---\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert Unauthorized();\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    // --- Constructor ---\r\n\r\n    constructor(address initialOwner) {\r\n        owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), initialOwner);\r\n    }\r\n\r\n    // --- Methods ---\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n        if (msg.sender != _pendingOwner) {\r\n            revert Unauthorized();\r\n        }\r\n\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n    }\r\n}\r\n"
    },
    "contracts/reservoir/misc/SeaportV12ApprovalOrderZone.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport {ISeaport} from \"../../interfaces/ISeaport.sol\";\r\n\r\n// One way to stay approval-less is to use one-time Seaport orders\r\n// that effectively act as gifts. These are prone to front-running\r\n// though. To prevent this, all such approval orders should ensure\r\n// the offerer matches the transaction's sender (eg. `tx.origin`).\r\n// Although relying on `tx.origin` is considered bad practice, the\r\n// validity time of these orders should be in the range of minutes\r\n// so that the risk of reusing them via a malicious contract which\r\n// forwards them is low.\r\ncontract SeaportV12ApprovalOrderZone {\r\n    // --- Errors ---\r\n\r\n    error Unauthorized();\r\n\r\n    // --- Seaport `ZoneInterface` overrides ---\r\n\r\n    function validateOrder(ISeaport.ZoneParameters calldata zoneParameters)\r\n        external\r\n        view\r\n        returns (bytes4 validOrderMagicValue)\r\n    {\r\n        if (zoneParameters.offerer != tx.origin) {\r\n            revert Unauthorized();\r\n        }\r\n\r\n        validOrderMagicValue = this.validateOrder.selector;\r\n    }\r\n\r\n    function getSeaportMetadata()\r\n        external\r\n        pure\r\n        returns (string memory name, ISeaport.Schema[] memory schemas)\r\n    {\r\n        name = \"Seaport Approval Order\";\r\n        schemas = new ISeaport.Schema[](0);\r\n    }\r\n}\r\n"
    },
    "contracts/reservoir/misc/SeaportApprovalOrderZone.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport {ISeaport} from \"../../interfaces/ISeaport.sol\";\r\n\r\n// One way to stay approval-less is to use one-time Seaport orders\r\n// that effectively act as gifts. These are prone to front-running\r\n// though. To prevent this, all such approval orders should ensure\r\n// the offerer matches the transaction's sender (eg. `tx.origin`).\r\n// Although relying on `tx.origin` is considered bad practice, the\r\n// validity time of these orders should be in the range of minutes\r\n// so that the risk of reusing them via a malicious contract which\r\n// forwards them is low.\r\ncontract SeaportApprovalOrderZone {\r\n    // --- Errors ---\r\n\r\n    error Unauthorized();\r\n\r\n    // --- Seaport `ZoneInterface` overrides ---\r\n\r\n    function isValidOrder(\r\n        bytes32,\r\n        address,\r\n        address offerer,\r\n        bytes32\r\n    ) external view returns (bytes4 validOrderMagicValue) {\r\n        if (offerer != tx.origin) {\r\n            revert Unauthorized();\r\n        }\r\n\r\n        validOrderMagicValue = this.isValidOrder.selector;\r\n    }\r\n\r\n    function isValidOrderIncludingExtraData(\r\n        bytes32,\r\n        address,\r\n        ISeaport.AdvancedOrder calldata order,\r\n        bytes32[] calldata,\r\n        ISeaport.CriteriaResolver[] calldata\r\n    ) external view returns (bytes4 validOrderMagicValue) {\r\n        if (order.parameters.offerer != tx.origin) {\r\n            revert Unauthorized();\r\n        }\r\n\r\n        validOrderMagicValue = this.isValidOrder.selector;\r\n    }\r\n}\r\n"
    },
    "contracts/reservoir/exchanges/SeaportModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\nimport {BaseExchangeModule} from \"./BaseExchangeModule.sol\";\r\nimport {BaseModule} from \"../BaseModule.sol\";\r\nimport {ISeaport} from \"../../interfaces/ISeaport.sol\";\r\n\r\n// Notes on the Seaport module:\r\n// - supports filling listings (both ERC721/ERC1155)\r\n// - supports filling offers (both ERC721/ERC1155)\r\n\r\ncontract SeaportModule is BaseExchangeModule {\r\n    // --- Structs ---\r\n\r\n    struct SeaportETHListingWithPrice {\r\n        ISeaport.AdvancedOrder order;\r\n        uint256 price;\r\n    }\r\n\r\n    // --- Fields ---\r\n\r\n    ISeaport public EXCHANGE;\r\n\r\n    // --- Constructor ---\r\n\r\n    constructor(address owner, address router)\r\n        BaseModule(owner)\r\n        BaseExchangeModule(router)\r\n    {}\r\n\r\n    // --- Fallback ---\r\n\r\n    receive() external payable {}\r\n\r\n\r\n    function setExchange(address _exchange) onlyOwner external {\r\n        EXCHANGE = ISeaport(_exchange);\r\n    }\r\n    // --- Single ETH listing ---\r\n\r\n    function acceptETHListing(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        ETHListingParams calldata params,\r\n        Fee[] calldata fees\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        refundETHLeftover(params.refundTo)\r\n        chargeETHFees(fees, params.amount)\r\n    {\r\n        // Execute the fill\r\n        params.revertIfIncomplete\r\n            ? _fillSingleOrderWithRevertIfIncomplete(\r\n                order,\r\n                new ISeaport.CriteriaResolver[](0),\r\n                params.fillTo,\r\n                params.amount\r\n            )\r\n            : _fillSingleOrder(\r\n                order,\r\n                new ISeaport.CriteriaResolver[](0),\r\n                params.fillTo,\r\n                params.amount\r\n            );\r\n    }\r\n\r\n    // --- Single ERC20 listing ---\r\n\r\n    function acceptERC20Listing(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        ERC20ListingParams calldata params,\r\n        Fee[] calldata fees\r\n    )\r\n        external\r\n        nonReentrant\r\n        refundERC20Leftover(params.refundTo, params.token)\r\n        chargeERC20Fees(fees, params.token, params.amount)\r\n    {\r\n        // Approve the exchange if needed\r\n        _approveERC20IfNeeded(params.token, address(EXCHANGE), params.amount);\r\n\r\n        // Execute the fill\r\n        params.revertIfIncomplete\r\n            ? _fillSingleOrderWithRevertIfIncomplete(\r\n                order,\r\n                new ISeaport.CriteriaResolver[](0),\r\n                params.fillTo,\r\n                0\r\n            )\r\n            : _fillSingleOrder(\r\n                order,\r\n                new ISeaport.CriteriaResolver[](0),\r\n                params.fillTo,\r\n                0\r\n            );\r\n    }\r\n\r\n    // --- Multiple ETH listings ---\r\n\r\n    function acceptETHListings(\r\n        SeaportETHListingWithPrice[] calldata orders,\r\n        ETHListingParams calldata params,\r\n        Fee[] calldata fees\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        refundETHLeftover(params.refundTo)\r\n        chargeETHFees(fees, params.amount)\r\n    {\r\n        uint256 length = orders.length;\r\n        ISeaport.CriteriaResolver[]\r\n            memory criteriaResolvers = new ISeaport.CriteriaResolver[](0);\r\n\r\n        // Execute the fills\r\n        if (params.revertIfIncomplete) {\r\n            for (uint256 i; i < length; ) {\r\n                _fillSingleOrderWithRevertIfIncomplete(\r\n                    orders[i].order,\r\n                    criteriaResolvers,\r\n                    params.fillTo,\r\n                    orders[i].price\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        } else {\r\n            for (uint256 i; i < length; ) {\r\n                _fillSingleOrder(\r\n                    orders[i].order,\r\n                    criteriaResolvers,\r\n                    params.fillTo,\r\n                    orders[i].price\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // --- Multiple ERC20 listings ---\r\n\r\n    function acceptERC20Listings(\r\n        ISeaport.AdvancedOrder[] calldata orders,\r\n        ERC20ListingParams calldata params,\r\n        Fee[] calldata fees\r\n    )\r\n        external\r\n        nonReentrant\r\n        refundERC20Leftover(params.refundTo, params.token)\r\n        chargeERC20Fees(fees, params.token, params.amount)\r\n    {\r\n        // Approve the exchange if needed\r\n        _approveERC20IfNeeded(params.token, address(EXCHANGE), params.amount);\r\n\r\n        uint256 length = orders.length;\r\n        ISeaport.CriteriaResolver[]\r\n            memory criteriaResolvers = new ISeaport.CriteriaResolver[](0);\r\n\r\n        // Execute the fills\r\n        if (params.revertIfIncomplete) {\r\n            for (uint256 i; i < length; ) {\r\n                _fillSingleOrderWithRevertIfIncomplete(\r\n                    orders[i],\r\n                    criteriaResolvers,\r\n                    params.fillTo,\r\n                    0\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        } else {\r\n            for (uint256 i; i < length; ) {\r\n                _fillSingleOrder(\r\n                    orders[i],\r\n                    criteriaResolvers,\r\n                    params.fillTo,\r\n                    0\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // --- Single ERC721 offer ---\r\n\r\n    function acceptERC721Offer(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        // Use `memory` instead of `calldata` to avoid `Stack too deep` errors\r\n        ISeaport.CriteriaResolver[] memory criteriaResolvers,\r\n        OfferParams calldata params,\r\n        Fee[] calldata fees\r\n    ) external nonReentrant {\r\n        // Extract the ERC721 token from the consideration items\r\n        ISeaport.ConsiderationItem calldata nftItem = order\r\n            .parameters\r\n            .consideration[0];\r\n        if (\r\n            nftItem.itemType != ISeaport.ItemType.ERC721 &&\r\n            nftItem.itemType != ISeaport.ItemType.ERC721_WITH_CRITERIA\r\n        ) {\r\n            revert WrongParams();\r\n        }\r\n        IERC721 nftToken = IERC721(nftItem.token);\r\n\r\n        // Extract the payment token from the offer items\r\n        ISeaport.OfferItem calldata paymentItem = order.parameters.offer[0];\r\n        IERC20 paymentToken = IERC20(paymentItem.token);\r\n\r\n        // Approve the exchange if needed\r\n        _approveERC721IfNeeded(nftToken, address(EXCHANGE));\r\n        _approveERC20IfNeeded(\r\n            paymentToken,\r\n            address(EXCHANGE),\r\n            type(uint256).max\r\n        );\r\n\r\n        // Execute the fill\r\n        params.revertIfIncomplete\r\n            ? _fillSingleOrderWithRevertIfIncomplete(\r\n                order,\r\n                criteriaResolvers,\r\n                address(this),\r\n                0\r\n            )\r\n            : _fillSingleOrder(order, criteriaResolvers, address(this), 0);\r\n\r\n        uint256 identifier = nftItem.itemType == ISeaport.ItemType.ERC721\r\n            ? nftItem.identifierOrCriteria\r\n            : criteriaResolvers[0].identifier;\r\n\r\n        // Pay fees\r\n        if (nftToken.ownerOf(identifier) != address(this)) {\r\n            // Only pay fees if the fill was successful\r\n            uint256 feesLength = fees.length;\r\n            for (uint256 i; i < feesLength; ) {\r\n                Fee memory fee = fees[i];\r\n                _sendERC20(fee.recipient, fee.amount, paymentToken);\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Refund any ERC721 leftover\r\n        _sendAllERC721(params.refundTo, nftToken, identifier);\r\n\r\n        // Forward any left payment to the specified receiver\r\n        _sendAllERC20(params.fillTo, paymentToken);\r\n    }\r\n\r\n    // --- Single ERC1155 offer ---\r\n\r\n    function acceptERC1155Offer(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        // Use `memory` instead of `calldata` to avoid `Stack too deep` errors\r\n        ISeaport.CriteriaResolver[] memory criteriaResolvers,\r\n        OfferParams calldata params,\r\n        Fee[] calldata fees\r\n    ) external nonReentrant {\r\n        // Extract the ERC1155 token from the consideration items\r\n        ISeaport.ConsiderationItem calldata nftItem = order\r\n            .parameters\r\n            .consideration[0];\r\n        if (\r\n            nftItem.itemType != ISeaport.ItemType.ERC1155 &&\r\n            nftItem.itemType != ISeaport.ItemType.ERC1155_WITH_CRITERIA\r\n        ) {\r\n            revert WrongParams();\r\n        }\r\n        IERC1155 nftToken = IERC1155(nftItem.token);\r\n\r\n        // Extract the payment token from the offer items\r\n        ISeaport.OfferItem calldata paymentItem = order.parameters.offer[0];\r\n        IERC20 paymentToken = IERC20(paymentItem.token);\r\n\r\n        // Approve the exchange if needed\r\n        _approveERC1155IfNeeded(nftToken, address(EXCHANGE));\r\n        _approveERC20IfNeeded(\r\n            paymentToken,\r\n            address(EXCHANGE),\r\n            type(uint256).max\r\n        );\r\n\r\n        uint256 identifier = nftItem.itemType == ISeaport.ItemType.ERC1155\r\n            ? nftItem.identifierOrCriteria\r\n            : criteriaResolvers[0].identifier;\r\n\r\n        uint256 balanceBefore = nftToken.balanceOf(address(this), identifier);\r\n\r\n        // Execute the fill\r\n        params.revertIfIncomplete\r\n            ? _fillSingleOrderWithRevertIfIncomplete(\r\n                order,\r\n                criteriaResolvers,\r\n                address(this),\r\n                0\r\n            )\r\n            : _fillSingleOrder(order, criteriaResolvers, address(this), 0);\r\n\r\n        uint256 balanceAfter = nftToken.balanceOf(address(this), identifier);\r\n\r\n        // Pay fees\r\n        uint256 amountFilled = balanceBefore - balanceAfter;\r\n        if (amountFilled > 0) {\r\n            uint256 feesLength = fees.length;\r\n            for (uint256 i; i < feesLength; ) {\r\n                Fee memory fee = fees[i];\r\n                _sendERC20(\r\n                    fee.recipient,\r\n                    // Only pay fees for the amount that was actually filled\r\n                    (fee.amount * amountFilled) / order.numerator,\r\n                    paymentToken\r\n                );\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Refund any ERC1155 leftover\r\n        _sendAllERC1155(params.refundTo, nftToken, identifier);\r\n\r\n        // Forward any left payment to the specified receiver\r\n        _sendAllERC20(params.fillTo, paymentToken);\r\n    }\r\n\r\n    // --- Generic handler (used for Seaport-based approvals) ---\r\n\r\n    function matchOrders(\r\n        ISeaport.Order[] calldata orders,\r\n        ISeaport.Fulfillment[] calldata fulfillments\r\n    ) external nonReentrant {\r\n        // We don't perform any kind of input or return value validation,\r\n        // so this function should be used with precaution - the official\r\n        // way to use it is only for Seaport-based approvals\r\n        EXCHANGE.matchOrders(orders, fulfillments);\r\n    }\r\n\r\n    // --- ERC721 / ERC1155 hooks ---\r\n\r\n    // Single token offer acceptance can be done approval-less by using the\r\n    // standard `safeTransferFrom` method together with specifying data for\r\n    // further contract calls. An example:\r\n    // `safeTransferFrom(\r\n    //      0xWALLET,\r\n    //      0xMODULE,\r\n    //      TOKEN_ID,\r\n    //      0xABI_ENCODED_ROUTER_EXECUTION_CALLDATA_FOR_OFFER_ACCEPTANCE\r\n    // )`\r\n\r\n    function onERC721Received(\r\n        address, // operator,\r\n        address, // from\r\n        uint256, // tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4) {\r\n        if (data.length > 0) {\r\n            _makeCall(router, data, 0);\r\n        }\r\n\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address, // operator\r\n        address, // from\r\n        uint256, // tokenId\r\n        uint256, // amount\r\n        bytes calldata data\r\n    ) external returns (bytes4) {\r\n        if (data.length > 0) {\r\n            _makeCall(router, data, 0);\r\n        }\r\n\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    // --- Internal ---\r\n\r\n    // NOTE: In lots of cases, Seaport will not revert if fills were not\r\n    // fully executed. An example of that is partial filling, which will\r\n    // successfully fill any amount that is still available (including a\r\n    // zero amount). One way to ensure that we revert in case of partial\r\n    // executions is to check the order's filled amount before and after\r\n    // we trigger the fill (we can use Seaport's `getOrderStatus` method\r\n    // to check). Since this can be expensive in terms of gas, we have a\r\n    // separate method variant to be called when reverts are enabled.\r\n\r\n    function _fillSingleOrder(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        // Use `memory` instead of `calldata` to avoid `Stack too deep` errors\r\n        ISeaport.CriteriaResolver[] memory criteriaResolvers,\r\n        address receiver,\r\n        uint256 value\r\n    ) internal {\r\n        // Execute the fill\r\n        try\r\n            EXCHANGE.fulfillAdvancedOrder{value: value}(\r\n                order,\r\n                criteriaResolvers,\r\n                bytes32(0),\r\n                receiver\r\n            )\r\n        {} catch {}\r\n    }\r\n\r\n    function _fillSingleOrderWithRevertIfIncomplete(\r\n        ISeaport.AdvancedOrder calldata order,\r\n        // Use `memory` instead of `calldata` to avoid `Stack too deep` errors\r\n        ISeaport.CriteriaResolver[] memory criteriaResolvers,\r\n        address receiver,\r\n        uint256 value\r\n    ) internal {\r\n        // Cache the order's hash\r\n        bytes32 orderHash = _getOrderHash(order.parameters);\r\n\r\n        // Before filling, get the order's filled amount\r\n        uint256 beforeFilledAmount = _getFilledAmount(orderHash);\r\n\r\n        // Execute the fill\r\n        bool success;\r\n        try\r\n            EXCHANGE.fulfillAdvancedOrder{value: value}(\r\n                order,\r\n                criteriaResolvers,\r\n                bytes32(0),\r\n                receiver\r\n            )\r\n        returns (bool fulfilled) {\r\n            success = fulfilled;\r\n        } catch {\r\n            revert UnsuccessfulFill();\r\n        }\r\n\r\n        if (!success) {\r\n            revert UnsuccessfulFill();\r\n        } else {\r\n            // // After successfully filling, get the order's filled amount\r\n            // uint256 afterFilledAmount = _getFilledAmount(orderHash);\r\n\r\n            // // Make sure the amount filled as part of this call is correct\r\n            // if (afterFilledAmount - beforeFilledAmount != order.numerator) {\r\n            //     revert UnsuccessfulFill();\r\n            // }\r\n        }\r\n    }\r\n\r\n    function _getOrderHash(\r\n        // Must use `memory` instead of `calldata` for the below cast\r\n        ISeaport.OrderParameters memory orderParameters\r\n    ) internal view returns (bytes32 orderHash) {\r\n        // `OrderParameters` and `OrderComponents` share the exact same\r\n        // fields, apart from the last one, so here we simply treat the\r\n        // `orderParameters` argument as `OrderComponents` and then set\r\n        // the last field to the correct data\r\n        ISeaport.OrderComponents memory orderComponents;\r\n        assembly {\r\n            orderComponents := orderParameters\r\n        }\r\n        orderComponents.counter = EXCHANGE.getCounter(orderParameters.offerer);\r\n\r\n        orderHash = EXCHANGE.getOrderHash(orderComponents);\r\n    }\r\n\r\n    function _getFilledAmount(bytes32 orderHash)\r\n        internal\r\n        view\r\n        returns (uint256 totalFilled)\r\n    {\r\n        (, , totalFilled, ) = EXCHANGE.getOrderStatus(orderHash);\r\n    }\r\n}\r\n"
    },
    "contracts/OmniBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\r\nimport \"./interfaces/IOmniBridge.sol\";\r\nimport \"./interfaces/IERC721Persistent.sol\";\r\nimport \"./interfaces/IERC1155Persistent.sol\";\r\nimport \"./lzApp/NonblockingLzApp.sol\";\r\nimport \"./token/ERC721Persistent.sol\";\r\nimport \"./token/ERC1155Persistent.sol\";\r\n\r\nerror NoZeroAddress();\r\n\r\ncontract OmniBridge is\r\n    NonblockingLzApp,\r\n    IOmniBridge,\r\n    Pausable\r\n{\r\n\r\n    event LzReceive(address ercAddress, address toAddress, uint tokenId, bytes payload, address persistentAddress);\r\n    // regular address => PersistentNFT address\r\n    mapping(address => address) public persistentAddresses;\r\n    // PersistentNFT address => regular address\r\n    mapping(address => address) public originAddresses;\r\n    mapping(address => uint256) public collectionLockedCounter;\r\n\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function wrap(\r\n        uint16 _dstChainId,\r\n        address _toAddress,\r\n        address _erc721Address,\r\n        uint256 _tokenId,\r\n        bytes memory _adapterParams\r\n    ) external payable override {\r\n        if (_erc721Address == address(0)) revert NoZeroAddress();\r\n\r\n        string memory name;\r\n        string memory symbol;\r\n        string memory tokenURI;\r\n        address erc721Address;\r\n        if (originAddresses[_erc721Address] != address(0)) {\r\n            // In case re-send PersistentNFT to sender chain\r\n            erc721Address = originAddresses[_erc721Address];\r\n            name = IERC721Metadata(_erc721Address).name();\r\n            symbol = IERC721Metadata(_erc721Address).symbol();\r\n            tokenURI = IERC721Metadata(_erc721Address).tokenURI(_tokenId);\r\n            IERC721Persistent(_erc721Address).burn(_tokenId);\r\n        } else {\r\n            erc721Address = _erc721Address;\r\n            IERC721(_erc721Address).transferFrom(\r\n                _msgSender(),\r\n                address(this),\r\n                _tokenId\r\n            );\r\n            name = IERC721Metadata(_erc721Address).name();\r\n            symbol = IERC721Metadata(_erc721Address).symbol();\r\n            tokenURI = IERC721Metadata(_erc721Address).tokenURI(_tokenId);\r\n        }\r\n\r\n        // encode the payload with the number of tokenAddress, toAddress, tokenId\r\n        bytes memory payload = abi.encode(erc721Address, _toAddress, name, symbol, tokenURI, _tokenId);\r\n\r\n        // get the fees we need to pay to LayerZero for message delivery\r\n        (uint messageFee, ) = lzEndpoint.estimateFees(_dstChainId, address(this), payload, false, _adapterParams);\r\n        require(msg.value >= messageFee, \"Insufficient fee amount\");\r\n\r\n        _lzSend(_dstChainId, payload, payable(msg.sender), address(0x0), _adapterParams, msg.value);\r\n    }\r\n\r\n    function withdraw(address _persistentAddress, uint256 _tokenId)\r\n        external\r\n        override\r\n    {\r\n        if (originAddresses[_persistentAddress] == address(0)) revert NoZeroAddress();\r\n\r\n        IERC721Persistent(_persistentAddress).burn(_tokenId);\r\n\r\n        IERC721(originAddresses[_persistentAddress]).transferFrom(address(this), msg.sender, _tokenId);\r\n    }\r\n\r\n    function compareOwName(string memory _name) internal pure returns (bool) {\r\n        if (bytes(_name).length <= 2) {\r\n            return false;\r\n        }\r\n        bytes memory a = new bytes(2);\r\n        a[0] = bytes(_name)[0];\r\n        a[1] = bytes(_name)[1];\r\n        return (keccak256(abi.encodePacked((string(a)))) == keccak256(abi.encodePacked((\"Ow\"))));\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(\r\n        uint16,\r\n        bytes memory,\r\n        uint64,\r\n        bytes memory _payload\r\n    ) internal override {\r\n        // decode the parameter\r\n        (address _tokenAddress, address _toAddress, string memory _name, string memory _symbol, string memory _tokenURI, uint _tokenId) = abi.decode(_payload, (address, address, string, string, string, uint));\r\n\r\n        address persistentAddress;\r\n        if (persistentAddresses[_tokenAddress] == address(0)) {\r\n            string memory _newName = _name;\r\n            if (!compareOwName(_name)) {\r\n                _newName = string(abi.encodePacked(\"Ow\", _name));\r\n            }\r\n            ERC721Persistent persistentNFT = new ERC721Persistent(_newName, _symbol, address(this));\r\n            persistentNFT.safeMint(_toAddress, _tokenId, _tokenURI);\r\n            persistentAddresses[_tokenAddress] = address(persistentNFT);\r\n            originAddresses[address(persistentNFT)] = _tokenAddress;\r\n            collectionLockedCounter[address(persistentNFT)] += 1;\r\n            persistentAddress = address(persistentNFT);\r\n        } else {\r\n            IERC721Persistent(persistentAddresses[_tokenAddress]).safeMint(_toAddress, _tokenId, _tokenURI);\r\n            collectionLockedCounter[persistentAddresses[_tokenAddress]] += 1;\r\n            persistentAddress = persistentAddresses[_tokenAddress];\r\n        }\r\n        emit LzReceive(_tokenAddress, _toAddress, _tokenId, _payload, persistentAddress);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IOmniBridge).interfaceId;\r\n    }\r\n}"
    },
    "contracts/interfaces/IOmniBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the Omni Bridge    \r\n */\r\ninterface IOmniBridge {\r\n    /**\r\n     * @dev \r\n     */\r\n    function wrap(uint16 _dstChainId, address _toAddress, address _erc721Address, uint256 _tokenId, bytes memory _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev \r\n     */\r\n    function withdraw(address _onftAddress, uint _tokenId) external;\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce from\r\n     */\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n}"
    },
    "contracts/interfaces/IERC721Persistent.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC721 Persistent with URI\r\n */\r\ninterface IERC721Persistent {\r\n    function safeMint(address to, uint256 tokenId, string memory uri) external;\r\n\r\n    function burn(uint tokenId) external;\r\n}"
    },
    "contracts/token/ERC721Persistent.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./../interfaces/IERC721Persistent.sol\";\r\n\r\ncontract ERC721Persistent is IERC721Persistent, ERC721, ERC721URIStorage, Ownable {\r\n    address private bridgeAddress;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _bridgeAddress\r\n    ) ERC721(_name, _symbol) {\r\n        require(_bridgeAddress != address(0), \"Can't be zero address\");\r\n        bridgeAddress = _bridgeAddress;\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId, string memory uri)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        _safeMint(to, tokenId);\r\n        _setTokenURI(tokenId, uri);\r\n    }\r\n\r\n    function burn(uint tokenId) external override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"1\");\r\n        require(_msgSender() == bridgeAddress, \"2\");\r\n        _burn(tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "contracts/mocks/ERC721Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\ncontract ERC721Mock is ERC721, ERC721URIStorage, Ownable {\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    constructor() ERC721(\"NFTToken\", \"MTK\") {}\r\n\r\n    function safeMint(address to, string memory _tokenURI) public onlyOwner {\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _tokenIdCounter.increment();\r\n        _safeMint(to, tokenId);\r\n        _setTokenURI(tokenId, _tokenURI);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/token/oft/OFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../lzApp/NonblockingLzApp.sol\";\r\nimport \"./IOFTCore.sol\";\r\nimport \"../../interfaces/IOmniReceiver.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract OFTCore is NonblockingLzApp, ERC165, IOFTCore {\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _amount, bool _useZro, bytes memory _adapterParams, bytes memory _payload) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        // mock the payload for send()\r\n        bytes memory payload = abi.encode(_toAddress, _amount, _payload);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, bytes memory _payload) public payable virtual override {\r\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams, _payload, msg.value);\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // decode and load the toAddress\r\n        (bytes memory toAddressBytes, uint amount, bytes memory payload) = abi.decode(_payload, (bytes, uint, bytes));\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n\r\n        _creditTo(_srcChainId, toAddress, amount);\r\n\r\n        try IOmniReceiver(toAddress).omniReceive(_srcChainId, _srcAddress, _nonce, amount, payload) {\r\n            // nothing to do\r\n        } catch {\r\n            // nothing to do\r\n        }\r\n\r\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, amount, _nonce);\r\n    }\r\n\r\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, bytes memory _payload, uint _nativeFee) internal virtual {\r\n        _debitFrom(_from, _dstChainId, _toAddress, _amount);\r\n\r\n        bytes memory payload = abi.encode(_toAddress, _amount, _payload);\r\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams, _nativeFee);\r\n\r\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\r\n        emit SendToChain(_from, _dstChainId, _toAddress, _amount, nonce);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual;\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual;\r\n}\r\n"
    },
    "contracts/token/oft/IOFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the IOFT core standard\r\n */\r\ninterface IOFTCore is IERC165 {\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _amount - amount of the tokens to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\r\n     * _payload - IOmniReceiver callback payload\r\n     */\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams, bytes calldata _payload) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    /**\r\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_from` the owner of token\r\n     * `_dstChainId` the destination chain identifier\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_amount` the quantity of tokens in wei\r\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     * `_payload` IOmniReceiver.omniReceive callback payload\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams, bytes calldata _payload) external payable;\r\n\r\n    /**\r\n     * @dev returns the circulating amount of tokens on current chain\r\n     */\r\n    function circulatingSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce\r\n     */\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _amount, uint64 _nonce);\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\r\n     * `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _amount, uint64 _nonce);\r\n}\r\n"
    },
    "contracts/interfaces/IOmniReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOmniReceiver {\r\n    function omniReceive(\r\n        uint16 _srcChainId,              // the remote chainId sending the tokens\r\n        bytes memory _srcAddress,        // the remote Bridge address\r\n        uint256 _nonce,                  \r\n        uint256 amountLD,                // the qty of local _token contract tokens  \r\n        bytes memory payload\r\n    ) external;\r\n}"
    },
    "contracts/token/oft/extension/ProxyOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFTCore.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract ProxyOFT is OFTCore {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable token;\r\n\r\n    constructor(address _lzEndpoint, address _proxyToken) OFTCore(_lzEndpoint) {\r\n        token = IERC20(_proxyToken);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        unchecked {\r\n            return token.totalSupply() - token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override {\r\n        require(_from == _msgSender(), \"ProxyOFT: owner is not send caller\");\r\n        token.safeTransferFrom(_from, address(this), _amount);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override {\r\n        token.safeTransfer(_toAddress, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/core/OmniXExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {EIP712} from \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\r\n\r\n// OmniX interfaces\r\nimport {IStargateReceiver} from \"../interfaces/IStargateReceiver.sol\";\r\nimport {IOmniReceiver} from \"../interfaces/IOmniReceiver.sol\";\r\nimport {ICurrencyManager} from \"../interfaces/ICurrencyManager.sol\";\r\nimport {IExecutionManager} from \"../interfaces/IExecutionManager.sol\";\r\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\r\nimport {IRoyaltyFeeManager} from \"../interfaces/IRoyaltyFeeManager.sol\";\r\nimport {ITransferManagerNFT} from \"../interfaces/ITransferManagerNFT.sol\";\r\nimport {ITransferSelectorNFT} from \"../interfaces/ITransferSelectorNFT.sol\";\r\nimport {IStargatePoolManager} from \"../interfaces/IStargatePoolManager.sol\";\r\nimport {IFundManager} from \"../interfaces/IFundManager.sol\";\r\nimport {IOmniXExchange} from \"../interfaces/IOmniXExchange.sol\";\r\nimport {NonblockingLzApp} from \"../lzApp/NonblockingLzApp.sol\";\r\nimport {IWETH} from \"../interfaces/IWETH.sol\";\r\nimport {IOFT} from \"../token/oft/IOFT.sol\";\r\n\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\nimport {BytesLib} from \"../libraries/BytesLib.sol\";\r\n\r\n/**\r\n * @title OmniXExchange\r\n * @notice It is the core contract of the OmniX exchange.\r\n */\r\ncontract OmniXExchange is NonblockingLzApp, EIP712, IOmniXExchange, IStargateReceiver, IOmniReceiver, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using OrderTypes for OrderTypes.MakerOrder;\r\n    using OrderTypes for OrderTypes.TakerOrder;\r\n    using BytesLib for bytes;\r\n\r\n    string private constant SIGNING_DOMAIN = \"OmniXExchange\";\r\n    string private constant SIGNATURE_VERSION = \"1\";\r\n    uint16 private constant LZ_ADAPTER_VERSION = 2;\r\n    uint8 private constant LZ_MESSAGE_ORDER_ASK = 1;\r\n    uint8 private constant LZ_MESSAGE_ORDER_BID = 2;\r\n    uint8 private constant LZ_MESSAGE_ORDER_ASK_RESP = 3;\r\n    uint8 private constant LZ_MESSAGE_ORDER_BID_RESP = 4;\r\n    uint8 private constant RESP_OK = 1;\r\n    uint8 private constant RESP_FAIL = 2;\r\n\r\n    address public immutable WETH;\r\n\r\n    address public protocolFeeRecipient;\r\n    uint256 public gasForLzReceive;\r\n\r\n    ICurrencyManager public currencyManager;\r\n    IExecutionManager public executionManager;\r\n    IRoyaltyFeeManager public royaltyFeeManager;\r\n    ITransferSelectorNFT public transferSelectorNFT;\r\n    IStargatePoolManager public stargatePoolManager;\r\n    IFundManager public fundManager;\r\n\r\n    mapping(address => mapping(uint16 => uint256)) public userMinOrderNonce;\r\n    mapping(address => mapping(uint16 => mapping(uint256 => bool))) private _isUserOrderNonceExecutedOrCancelled;\r\n\r\n    event CancelAllOrders(address indexed user, uint16 chainId, uint256 newMinNonce);\r\n    event NewCurrencyManager(address indexed currencyManager);\r\n    event NewExecutionManager(address indexed executionManager);\r\n    event NewProtocolFeeRecipient(address indexed protocolFeeRecipient);\r\n    event NewRoyaltyFeeManager(address indexed royaltyFeeManager);\r\n    event SentFunds(address indexed seller, address indexed buyer, uint price, address currency);\r\n    event RevertFunds(address indexed seller, address indexed buyer, uint price, address currency, bytes reason);\r\n    event NewTransferSelectorNFT(address indexed transferSelectorNFT);\r\n\r\n    event TakerAsk(\r\n        bytes32 orderHash, // bid hash of the maker order\r\n        uint256 orderNonce, // user order nonce\r\n        address indexed taker, // sender address for the taker ask order\r\n        address indexed maker, // maker address of the initial bid order\r\n        address indexed strategy, // strategy that defines the execution\r\n        address currency, // currency address\r\n        address collection, // collection address\r\n        uint256 tokenId, // tokenId transferred\r\n        uint256 amount, // amount of tokens transferred\r\n        uint256 price, // final transacted price\r\n        uint16 makerChainId,  // chain id\r\n        uint16 takerChainId  // chain id\r\n    );\r\n\r\n    event TakerBid(\r\n        bytes32 orderHash, // ask hash of the maker order\r\n        uint256 orderNonce, // user order nonce\r\n        address indexed taker, // sender address for the taker bid order\r\n        address indexed maker, // maker address of the initial ask order\r\n        address indexed strategy, // strategy that defines the execution\r\n        address currency, // currency address\r\n        address collection, // collection address\r\n        uint256 tokenId, // tokenId transferred\r\n        uint256 amount, // amount of tokens transferred\r\n        uint256 price, // final transacted price\r\n        uint16 makerChainId,  // chain id\r\n        uint16 takerChainId  // chain id\r\n    );\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _currencyManager currency manager address\r\n     * @param _executionManager execution manager address\r\n     * @param _royaltyFeeManager royalty fee manager address\r\n     * @param _WETH wrapped ether address (for other chains, use wrapped native asset)\r\n     * @param _protocolFeeRecipient protocol fee recipient\r\n     */\r\n    constructor(\r\n        address _currencyManager,\r\n        address _executionManager,\r\n        address _royaltyFeeManager,\r\n        address _WETH,\r\n        address _protocolFeeRecipient,\r\n        address _lzEndpoint\r\n    ) EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) NonblockingLzApp(_lzEndpoint)\r\n    {\r\n        currencyManager = ICurrencyManager(_currencyManager);\r\n        executionManager = IExecutionManager(_executionManager);\r\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\r\n        WETH = _WETH;\r\n        protocolFeeRecipient = _protocolFeeRecipient;\r\n\r\n        gasForLzReceive = 600000;\r\n    }\r\n\r\n    /**\r\n    * @notice set stargate pool manager\r\n    */\r\n    function setStargatePoolManager(address manager) external onlyOwner {\r\n        stargatePoolManager = IStargatePoolManager(manager);\r\n    }\r\n\r\n    /**\r\n    * @notice set fund manager\r\n    */\r\n    function setFundManager(address manager) external onlyOwner {\r\n        fundManager = IFundManager(manager);\r\n    }\r\n\r\n    /**\r\n    * @notice set gas for omni destination layerzero receive\r\n    */\r\n    function setGasForLzReceive(uint256 gas) external onlyOwner {\r\n        gasForLzReceive = gas;\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel all pending orders for a sender\r\n     * @param minNonce minimum user nonce\r\n     */\r\n    function cancelAllOrdersForSender(uint256 minNonce, uint16 lzChainId) onlyOwner external {\r\n        userMinOrderNonce[msg.sender][lzChainId] = minNonce;\r\n\r\n        emit CancelAllOrders(msg.sender, lzChainId, minNonce);\r\n    }\r\n\r\n    /**\r\n     * @notice get layerzero fees for matching a takerBid with a makerAsk\r\n     * @param taker taker bid order\r\n     * @param maker maker ask order\r\n     * @return (omnixFee, fundManagerFee, nftTransferManagerFee)\r\n     */\r\n    function getLzFeesForTrading(OrderTypes.TakerOrder calldata taker, OrderTypes.MakerOrder calldata maker, uint destAirdrop)\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256)\r\n    {\r\n        (uint16 makerChainId) = maker.decodeParams();\r\n        (uint16 takerChainId, address currency,,,) = taker.decodeParams();\r\n        \r\n        if (maker.isOrderAsk) {\r\n            bytes memory sgPayload = _getSgPayload(taker, maker);\r\n            uint256 currencyFee = fundManager.lzFeeTransferCurrency(\r\n                currency,\r\n                maker.signer,\r\n                taker.price,\r\n                takerChainId,\r\n                makerChainId,\r\n                sgPayload\r\n            );\r\n\r\n            uint256 omnixFee = 0;\r\n            // on this taker chain, no NFT transfer fee\r\n            // on the maker chain, there is transfer fee if using TransferManagerONFT\r\n            // uint256 nftFee = 0;\r\n\r\n            if (currencyFee == 0) {\r\n                // if the currency is not stargate swappable or not omni, then we send cross message vis lz.\r\n                (omnixFee,, ) = _getLzPayload(destAirdrop, taker, maker);\r\n            }\r\n\r\n            return (omnixFee, currencyFee, uint256(0));\r\n        }\r\n        else {\r\n            uint256 nftFee = 0;\r\n            (uint256 omnixFee,, ) = _getLzPayload(destAirdrop, taker, maker);\r\n\r\n            // on this taker ask chain, no currency fee because currency transfer tx will be executed on the maker chain\r\n            // on the maker bid chain, there is fee.\r\n            // uint256 currencyFee = 0;\r\n\r\n            return (omnixFee, uint256(0), nftFee);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Match ask with a taker bid order using ETH\r\n     * @param destAirdrop gas fee which is consumed by maker chain to transfer NFT and to send lz message to taker chain\r\n     * @param takerBid taker bid order\r\n     * @param makerAsk maker ask order\r\n     */\r\n    function matchAskWithTakerBidUsingETHAndWETH(\r\n        uint destAirdrop,\r\n        OrderTypes.TakerOrder calldata takerBid,\r\n        OrderTypes.MakerOrder calldata makerAsk\r\n    ) external payable override nonReentrant {\r\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \"Order: Wrong sides\");\r\n        require(msg.sender == takerBid.taker, \"Order: Taker must be the sender\");\r\n\r\n        // Check the maker ask order\r\n        bytes32 askHash = makerAsk.hash();\r\n        _validateOrder(makerAsk, askHash);\r\n\r\n        (, address currency,,,) = takerBid.decodeParams();\r\n        require(currency == WETH, \"Order: Currency must be WETH\");\r\n\r\n        _canExecuteTakerBid(takerBid, makerAsk);\r\n\r\n        (uint16 makerChainId) = makerAsk.decodeParams();\r\n        (uint16 takerChainId,,,,) = takerBid.decodeParams();\r\n\r\n        // validate value\r\n        {\r\n            // nft fee is zero\r\n            (uint256 omnixFee, uint256 currencyFee,) = getLzFeesForTrading(takerBid, makerAsk, destAirdrop);\r\n\r\n            uint256 totalValue = takerBid.price + omnixFee + currencyFee;\r\n\r\n            require(totalValue <= msg.value, \"Order: Msg.value too high\");\r\n            \r\n            if (makerChainId == takerChainId) {\r\n                (,,,address strategy,) = takerBid.decodeParams();\r\n\r\n                fundManager.transferFeesAndFundsWithWETH{value: takerBid.price}(strategy, makerAsk.signer, takerBid.price, makerAsk.getRoyaltyInfo());\r\n                _transferNFT(makerAsk.collection, makerAsk.signer, takerBid.taker, takerBid.tokenId, makerAsk.amount);\r\n            }\r\n            else {\r\n                if (omnixFee != 0) {\r\n                    (,,,address strategy,) = takerBid.decodeParams();\r\n                    // currency is not swappable or omni so cross message to send nft and funds instantly\r\n                    _sendCrossMessage(takerBid, makerAsk, 0);\r\n                    fundManager.transferFeesAndFundsWithWETH{value: takerBid.price}(strategy, makerAsk.signer, takerBid.price, makerAsk.getRoyaltyInfo());\r\n                }\r\n                else {\r\n                    // cross funds to maker chain's omnixexchange.\r\n                    // once sgReceive received, actual trading will be made.\r\n                    bytes memory sgPayload = _getSgPayload(takerBid, makerAsk);\r\n                    fundManager.transferProxyFunds{value: currencyFee + takerBid.price}(\r\n                        currency,\r\n                        takerBid.taker,\r\n                        takerBid.price,\r\n                        takerChainId,\r\n                        makerChainId,\r\n                        sgPayload\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update maker ask order status to true (prevents replay)\r\n        \r\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerChainId][makerAsk.nonce] = true;\r\n\r\n        emit TakerBid(\r\n            askHash,\r\n            makerAsk.nonce,\r\n            takerBid.taker,\r\n            makerAsk.signer,\r\n            makerAsk.strategy,\r\n            makerAsk.currency,\r\n            makerAsk.collection,\r\n            takerBid.tokenId,\r\n            makerAsk.amount,\r\n            takerBid.price,\r\n            makerChainId,\r\n            takerChainId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Match a takerBid with a matchAsk\r\n     * @param destAirdrop gas fee which is consumed by maker chain to transfer NFT and to send lz message to taker chain\r\n     * @param takerBid taker bid order\r\n     * @param makerAsk maker ask order\r\n     */\r\n    function matchAskWithTakerBid(uint destAirdrop, OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external\r\n        payable\r\n        override\r\n        nonReentrant\r\n    {\r\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \"Order: Wrong sides\");\r\n        require(msg.sender == takerBid.taker, \"Order: Taker must be the sender\");\r\n\r\n        // Check the maker ask order\r\n        bytes32 askHash = makerAsk.hash();\r\n        _validateOrder(makerAsk, askHash);\r\n\r\n        _canExecuteTakerBid(takerBid, makerAsk);\r\n\r\n        (uint16 makerChainId) = makerAsk.decodeParams();\r\n        (uint16 takerChainId,,,,) = takerBid.decodeParams();\r\n\r\n        {\r\n            // check fees, nft fee is zero\r\n            (uint256 omnixFee, uint256 currencyFee, ) = getLzFeesForTrading(takerBid, makerAsk, destAirdrop);\r\n            require (omnixFee+ currencyFee <= msg.value, \"Order: Insufficient value\");\r\n\r\n            (, address takerCurrency,, address takerStrategy,) = takerBid.decodeParams();\r\n            if (makerChainId == takerChainId) {\r\n                // direct transfer funds\r\n                fundManager.transferFeesAndFunds(takerStrategy, takerCurrency, takerBid.price, takerBid.taker, makerAsk.signer, makerAsk.getRoyaltyInfo());\r\n                _transferNFT(makerAsk.collection, makerAsk.signer, takerBid.taker, takerBid.tokenId, makerAsk.amount);\r\n            }\r\n            else {\r\n                if (omnixFee != 0) {\r\n                    // currency is not swappable or omni so cross message to send nft and funds instantly\r\n                    _sendCrossMessage(takerBid, makerAsk, 0);\r\n                    fundManager.transferFeesAndFunds(takerStrategy, takerCurrency, takerBid.price, takerBid.taker, makerAsk.signer, makerAsk.getRoyaltyInfo());\r\n                }\r\n                else {\r\n                    // cross funds to maker chain's omnixexchange.\r\n                    // once sgReceive received, actual trading will be made.\r\n                    bytes memory sgPayload = _getSgPayload(takerBid, makerAsk);\r\n                    fundManager.transferProxyFunds{value: currencyFee}(\r\n                        takerCurrency,\r\n                        takerBid.taker,\r\n                        takerBid.price,\r\n                        takerChainId,\r\n                        makerChainId,\r\n                        sgPayload\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Update maker ask order status to true (prevents replay)\r\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerChainId][makerAsk.nonce] = true;\r\n\r\n        emit TakerBid(\r\n            askHash,\r\n            makerAsk.nonce,\r\n            takerBid.taker,\r\n            makerAsk.signer,\r\n            makerAsk.strategy,\r\n            makerAsk.currency,\r\n            makerAsk.collection,\r\n            takerBid.tokenId,\r\n            makerAsk.amount,\r\n            takerBid.price,\r\n            makerChainId,\r\n            takerChainId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Match a takerAsk with a makerBid\r\n     *         This function is being used for auction and be called on maker chain.\r\n     * @param takerAsk seller\r\n     * @param makerBid bidder\r\n     */\r\n    function matchBidWithTakerAsk(uint destAirdrop, OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external\r\n        payable\r\n        override\r\n        nonReentrant\r\n    {\r\n        require((!makerBid.isOrderAsk) && (takerAsk.isOrderAsk), \"Order: Wrong sides\");\r\n        require(msg.sender == takerAsk.taker, \"Order: Taker must be the sender\");\r\n\r\n        // Check the maker bid order\r\n        bytes32 bidHash = makerBid.hash();\r\n        _validateOrder(makerBid, bidHash);\r\n\r\n        _canExecuteTakerAsk(takerAsk, makerBid);\r\n\r\n        (uint16 toChainId) = makerBid.decodeParams();\r\n        (uint16 fromChainId,,,,) = takerAsk.decodeParams();\r\n\r\n        {\r\n            // currency fee is zero\r\n            (uint256 omnixFee, , uint256 nftFee) = getLzFeesForTrading(takerAsk, makerBid, destAirdrop);\r\n            require (omnixFee + nftFee <= msg.value, \"Order: Insufficient value\");\r\n\r\n            (,, address takerCollection,,) = takerAsk.decodeParams();\r\n\r\n            if (fromChainId == toChainId) {\r\n                // direct transfer funds\r\n                fundManager.transferFeesAndFunds(makerBid.strategy, makerBid.currency, makerBid.price, makerBid.signer, takerAsk.taker, makerBid.getRoyaltyInfo());\r\n                _transferNFT(takerCollection, takerAsk.taker, makerBid.signer, takerAsk.tokenId, makerBid.amount);\r\n            }\r\n            else {\r\n                if (destAirdrop == 0) {\r\n                    // destAirdrop is same with currency fee on destination chain.\r\n                    // destAirdrop is 0 means currency is not stargate swappable or omni.\r\n                    // currency is not swappable or omni, so transfer nft first and then send cross message to make funds\r\n                    _transferNFT(takerCollection, takerAsk.taker, makerBid.signer, takerAsk.tokenId, makerBid.amount);\r\n                    _sendCrossMessage(takerAsk, makerBid, destAirdrop);\r\n                }\r\n                else {\r\n                    // cross message to maker chain's omnixexchange.\r\n                    // once _nonblockingLzReceive received this message, cross funding will be made to taker's chain.\r\n                    // once sgReceive received funds, actual funding will be made on taker's chain.\r\n                    _sendCrossMessage(takerAsk, makerBid, destAirdrop);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update maker bid order status to true (prevents replay)\r\n        _isUserOrderNonceExecutedOrCancelled[makerBid.signer][toChainId][makerBid.nonce] = true;\r\n\r\n        emit TakerAsk(\r\n            bidHash,\r\n            makerBid.nonce,\r\n            takerAsk.taker,\r\n            makerBid.signer,\r\n            makerBid.strategy,\r\n            makerBid.currency,\r\n            makerBid.collection,\r\n            takerAsk.tokenId,\r\n            makerBid.amount,\r\n            takerAsk.price,\r\n            fromChainId,\r\n            toChainId\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @notice get stargate payload\r\n    * @param takerBid taker bid\r\n    * @param makerAsk maker ask\r\n    * @dev this function is used only for makerAskWithTakerBid\r\n     */\r\n    function _getSgPayload(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        internal pure returns (bytes memory)\r\n    {\r\n        bytes memory payload = abi.encode(\r\n            makerAsk.collection,\r\n            makerAsk.signer,\r\n            takerBid.taker,\r\n            takerBid.tokenId,\r\n            makerAsk.amount,\r\n            makerAsk.currency,\r\n            makerAsk.strategy,\r\n            makerAsk.getRoyaltyInfo()\r\n        );\r\n\r\n        return payload;\r\n    }\r\n\r\n    /**\r\n    * @notice get layer zero payload\r\n    * @param destAirdrop airdrop amount on destination chain\r\n    * @param taker taker bid\r\n    * @param maker maker ask\r\n     */\r\n    function _getLzPayload(uint destAirdrop, OrderTypes.TakerOrder calldata taker, OrderTypes.MakerOrder calldata maker)\r\n        internal view returns (uint256, bytes memory, bytes memory)\r\n    {\r\n        (uint16 takerChainId,,,,) = taker.decodeParams();\r\n        uint16 makerChainId = maker.decodeParams();\r\n\r\n        if (makerChainId == takerChainId) {\r\n            return (0, bytes(\"\"), bytes(\"\"));\r\n        }\r\n        bytes memory payload;\r\n\r\n        if (maker.isOrderAsk) {\r\n            payload = abi.encode(\r\n                LZ_MESSAGE_ORDER_ASK,\r\n                maker.collection,\r\n                maker.signer,\r\n                taker.taker,\r\n                taker.tokenId,\r\n                maker.amount\r\n            );\r\n        } else {\r\n            (, address takerCurrency,, address takerStrategy,) = taker.decodeParams();\r\n            OrderTypes.PartyData memory takerParty = OrderTypes.PartyData(takerCurrency, takerStrategy, taker.taker, takerChainId);\r\n            OrderTypes.PartyData memory makerParty = OrderTypes.PartyData(maker.currency, maker.strategy, maker.signer, makerChainId);\r\n            bytes memory royaltyInfo = maker.getRoyaltyInfo();\r\n            payload = abi.encode(\r\n                LZ_MESSAGE_ORDER_BID,\r\n                maker.collection,\r\n                taker.tokenId,\r\n                maker.amount,\r\n                maker.price,\r\n                takerParty,\r\n                makerParty,\r\n                royaltyInfo\r\n            );\r\n        }\r\n\r\n        address destAddress = trustedRemoteLookup[makerChainId].toAddress(0);\r\n        bytes memory adapterParams = abi.encodePacked(LZ_ADAPTER_VERSION, gasForLzReceive, destAirdrop, destAddress);\r\n\r\n        (uint256 messageFee,) = lzEndpoint.estimateFees(\r\n            makerChainId,\r\n            address(this),\r\n            payload,\r\n            false,\r\n            adapterParams\r\n        );\r\n\r\n        return (messageFee, payload, adapterParams);\r\n    }\r\n\r\n    /**\r\n    * @notice send cross message to destnation OmniXExchange\r\n     */\r\n    function _sendCrossMessage(OrderTypes.TakerOrder calldata taker, OrderTypes.MakerOrder calldata maker, uint destAirdrop)\r\n        internal\r\n    {\r\n        (uint16 makerChainId) = maker.decodeParams();\r\n\r\n        require(trustedRemoteLookup[makerChainId].length != 0, \"LzSend: dest chain is not trusted.\");\r\n\r\n        (uint256 messageFee, bytes memory payload, bytes memory adapterParams) = _getLzPayload(destAirdrop, taker, maker);\r\n        lzEndpoint.send{value: messageFee}(makerChainId, trustedRemoteLookup[makerChainId], payload, payable(msg.sender), address(0), adapterParams);\r\n    }\r\n\r\n    /**\r\n     * @notice Update currency manager\r\n     * @param _currencyManager new currency manager address\r\n     */\r\n    function updateCurrencyManager(address _currencyManager) external onlyOwner {\r\n        currencyManager = ICurrencyManager(_currencyManager);\r\n        emit NewCurrencyManager(_currencyManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Update execution manager\r\n     * @param _executionManager new execution manager address\r\n     */\r\n    function updateExecutionManager(address _executionManager) external onlyOwner {\r\n        executionManager = IExecutionManager(_executionManager);\r\n        emit NewExecutionManager(_executionManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Update protocol fee and recipient\r\n     * @param _protocolFeeRecipient new recipient for protocol fees\r\n     */\r\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\r\n        protocolFeeRecipient = _protocolFeeRecipient;\r\n        emit NewProtocolFeeRecipient(_protocolFeeRecipient);\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty fee manager\r\n     * @param _royaltyFeeManager new fee manager address\r\n     */\r\n    function updateRoyaltyFeeManager(address _royaltyFeeManager) external onlyOwner {\r\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\r\n        emit NewRoyaltyFeeManager(_royaltyFeeManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Update transfer selector NFT\r\n     * @param _transferSelectorNFT new transfer selector address\r\n     */\r\n    function updateTransferSelectorNFT(address _transferSelectorNFT) external onlyOwner {\r\n        transferSelectorNFT = ITransferSelectorNFT(_transferSelectorNFT);\r\n        emit NewTransferSelectorNFT(_transferSelectorNFT);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether user order nonce is executed or cancelled\r\n     * @param user address of user\r\n     * @param orderNonce nonce of the order\r\n     */\r\n    function isUserOrderNonceExecutedOrCancelled(address user, uint16 lzChainId, uint256 orderNonce) external view returns (bool) {\r\n        return _isUserOrderNonceExecutedOrCancelled[user][lzChainId][orderNonce];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer NFT\r\n     * @param collection address of the token collection on from chain\r\n     * @param from address of the sender\r\n     * @param to address of the recipient\r\n     * @param tokenId tokenId\r\n     * @param amount amount of tokens (1 for ERC721, 1+ for ERC1155)\r\n     * @dev For ERC721, amount is not used\r\n     */\r\n    function _transferNFT(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) internal {\r\n        // Retrieve the transfer manager address\r\n        address transferManager = transferSelectorNFT.checkTransferManagerForToken(collection);\r\n\r\n        // If no transfer manager found, it returns address(0)\r\n        require(transferManager != address(0), \"Transfer: invalid collection\");\r\n\r\n        ITransferManagerNFT(transferManager).transferNFT(collection, from, to, tokenId, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Verify the validity of the maker order\r\n     * @param makerOrder maker order\r\n     * @param orderHash computed hash for the order\r\n     */\r\n    function _validateOrder(OrderTypes.MakerOrder calldata makerOrder, bytes32 orderHash) internal view {\r\n        (uint16 fromChainId) = makerOrder.decodeParams();\r\n        // Verify whether order nonce has expired\r\n        require(\r\n            (!_isUserOrderNonceExecutedOrCancelled[makerOrder.signer][fromChainId][makerOrder.nonce]) &&\r\n                (makerOrder.nonce >= userMinOrderNonce[makerOrder.signer][fromChainId]),\r\n            \"Order: Matching order expired\"\r\n        );\r\n\r\n        makerOrder.checkValid(orderHash);\r\n    }\r\n\r\n    /**\r\n     * @notice transfer NFT which is called on tokenReceived callback.\r\n     * @dev should be external because being used with try/catch\r\n     */\r\n    function _transferNFTLz(address collection, address from, address to, uint tokenId, uint amount) external {\r\n        require (msg.sender == address(this), \"_transferNFTLz: invalid caller\");\r\n\r\n        _transferNFT(\r\n            collection,\r\n            from,\r\n            to,\r\n            tokenId,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function _canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk) \r\n        internal view returns (uint256, uint256) {\r\n        (,,, address strategy,) = takerBid.decodeParams();\r\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(strategy)\r\n            .canExecuteTakerBid(takerBid, makerAsk);\r\n\r\n        require(isExecutionValid, \"Strategy: Execution invalid\");\r\n\r\n        return (tokenId, amount);\r\n    }\r\n\r\n    function _canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid) \r\n        internal view returns (uint256, uint256) {\r\n        (,,, address strategy,) = takerAsk.decodeParams();\r\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(strategy)\r\n            .canExecuteTakerAsk(takerAsk, makerBid);\r\n\r\n        require(isExecutionValid, \"Strategy: Execution invalid\");\r\n\r\n        return (tokenId, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice message listener from LayerZero endpoint\r\n     * @param _payload message data\r\n     * @dev no need to change this function\r\n     */\r\n    function _nonblockingLzReceive(uint16, bytes memory, uint64, bytes memory _payload) internal virtual override {\r\n        // decode and load the toAddress\r\n        (uint8 lzMessage) = abi.decode(_payload, (uint8));\r\n\r\n        if (lzMessage == LZ_MESSAGE_ORDER_ASK) {\r\n            // on maker chain (seller)\r\n            // trading for normal currency or eth, we don't have receiver callback\r\n            // so assumed fundarized already, here just transfer the nft.\r\n            (, address collection, address from, address to, uint tokenId, uint amount) = \r\n                abi.decode(_payload, (uint8, address, address, address, uint, uint));\r\n\r\n            _transferNFT(\r\n                collection,\r\n                from,\r\n                to,\r\n                tokenId,\r\n                amount\r\n            );\r\n        }\r\n        else if (lzMessage == LZ_MESSAGE_ORDER_BID) {\r\n            // cross funds to taker's chain and it will forward to sgReceive callback.\r\n            (   ,\r\n                address collection,\r\n                uint tokenId,\r\n                uint amount,\r\n                uint price,\r\n                OrderTypes.PartyData memory takerParty,\r\n                OrderTypes.PartyData memory makerParty,\r\n                bytes memory royaltyInfo\r\n            ) = abi.decode(_payload, (\r\n                uint8, address, uint, uint, uint, OrderTypes.PartyData, OrderTypes.PartyData, bytes\r\n            ));\r\n\r\n            bytes memory sgPayload = abi.encode(\r\n                collection,             // collection\r\n                takerParty.party,       // seller\r\n                makerParty.party,       // buyer\r\n                tokenId,                // tokenId\r\n                amount,                 // amount for 1155\r\n                takerParty.currency,    // currency\r\n                takerParty.strategy,    // strategy\r\n                royaltyInfo             // royalty info\r\n            );\r\n            uint256 currencyFee = fundManager.lzFeeTransferCurrency(\r\n                makerParty.currency,    // currency\r\n                takerParty.party,       // to\r\n                price,                  // price\r\n                makerParty.chainId,     // fromChainId\r\n                takerParty.chainId,     // takerChainId\r\n                sgPayload\r\n            );\r\n\r\n            if (currencyFee == 0) {\r\n                // on maker chain (buyer)\r\n                // if currencyFee is 0, already tranferred NFT.\r\n                // thus here just transfer funds and fees.\r\n                fundManager.transferFeesAndFunds(makerParty.strategy, makerParty.currency, price, makerParty.party, takerParty.party, royaltyInfo);\r\n            }\r\n            else {\r\n                // on maker chain (buyer)\r\n                // sgPayload - seller's chain info as well\r\n                // swap or bridge funds to taker chain(seller). go though sgReceive or omniReceive\r\n                fundManager.transferProxyFunds{value: currencyFee}(\r\n                    makerParty.currency,\r\n                    makerParty.party,\r\n                    price,\r\n                    makerParty.chainId,\r\n                    takerParty.chainId,\r\n                    sgPayload\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _tokenReceived(uint256 _price, bytes memory _payload) internal {\r\n        (\r\n            address collection,\r\n            address seller,\r\n            address buyer,\r\n            uint tokenId,\r\n            uint amount,\r\n            address currency,\r\n            address strategy,\r\n            bytes memory royaltyInfo\r\n        ) = abi.decode(_payload, (\r\n            address,\r\n            address,\r\n            address,\r\n            uint,\r\n            uint,\r\n            address,\r\n            address,\r\n            bytes\r\n        ));\r\n\r\n        // on seller's chain\r\n        // transfer nft from seller to buyer.\r\n        // if isOrderAsk is true, maker is seller, taker is buyer. this is running on maker chain.\r\n        // if isOrderAsk is false, taker is seller, maker is buyer. this is running on taker chain.\r\n        uint price = _price;\r\n        try this._transferNFTLz(collection, seller, buyer, tokenId, amount) {\r\n            // funds from omnixexchange to seller\r\n\r\n            if (currency == WETH) {\r\n                fundManager.transferFeesAndFundsWithWETH{value: price}(strategy, seller, price, royaltyInfo);\r\n            } else {\r\n                IERC20(currency).approve(address(fundManager), price);\r\n\r\n                fundManager.processFeesAndFunds(currency, buyer, seller, strategy, price, royaltyInfo, 1);\r\n            }\r\n\r\n            emit SentFunds(seller, buyer, price, currency);\r\n\r\n        } catch (bytes memory reason) {\r\n            // revert funds\r\n            if (currency == WETH) {\r\n                payable(buyer).transfer(price);\r\n            } else {\r\n                IERC20(currency).approve(address(fundManager), price);\r\n                fundManager.processFeesAndFunds(currency, buyer, seller, strategy, price, royaltyInfo, 2);\r\n            }\r\n\r\n            emit RevertFunds(seller, buyer, price, currency, reason);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice stargate swap receive callback\r\n    */\r\n    function sgReceive(\r\n        uint16 ,                // the remote chainId sending the tokens\r\n        bytes memory,           // the remote Bridge address\r\n        uint256,                  \r\n        address,                // the token contract on the local chain\r\n        uint256 _price,         // the qty of local _token contract tokens  \r\n        bytes memory _payload\r\n    ) external override {\r\n        if (_payload.length == 0) return;\r\n\r\n        _tokenReceived(_price, _payload);\r\n    }\r\n\r\n    /**\r\n    * @notice omni token bridge receive callback\r\n    */\r\n    function omniReceive(\r\n        uint16 ,                // the remote chainId sending the tokens\r\n        bytes memory,           // the remote Bridge address\r\n        uint256,                  \r\n        uint256 _price,         // the qty of local _token contract tokens  \r\n        bytes memory _payload\r\n    ) external override {\r\n        if (_payload.length == 0) return;\r\n\r\n        _tokenReceived(_price, _payload);\r\n    }\r\n\r\n    receive() external payable {\r\n        // nothing to do\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n}"
    },
    "contracts/interfaces/IStargateReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IStargateReceiver {\r\n    function sgReceive(\r\n        uint16 _srcChainId,              // the remote chainId sending the tokens\r\n        bytes memory _srcAddress,        // the remote Bridge address\r\n        uint256 _nonce,                  \r\n        address _token,                  // the token contract on the local chain\r\n        uint256 amountLD,                // the qty of local _token contract tokens  \r\n        bytes memory payload\r\n    ) external;\r\n}"
    },
    "contracts/interfaces/ICurrencyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ICurrencyManager {\r\n    function addCurrency(address currency) external;\r\n\r\n    function removeCurrency(address currency) external;\r\n\r\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\r\n\r\n    function isOmniCurrency(address currency) external view returns (bool);\r\n\r\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\r\n\r\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\r\n}"
    },
    "contracts/interfaces/IExecutionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IExecutionManager {\r\n    function addStrategy(address strategy) external;\r\n\r\n    function removeStrategy(address strategy) external;\r\n\r\n    function isStrategyWhitelisted(address strategy) external view returns (bool);\r\n\r\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\r\n\r\n    function viewCountWhitelistedStrategies() external view returns (uint256);\r\n}"
    },
    "contracts/interfaces/IRoyaltyFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRoyaltyFeeManager {\r\n    function calculateRoyaltyFeeAndGetRecipient(\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 amount,\r\n        bytes memory royaltyInfo\r\n    ) external view returns (address, uint256);\r\n}"
    },
    "contracts/interfaces/ITransferSelectorNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITransferSelectorNFT {\r\n    function checkTransferManagerForToken(address collection) external view returns (address);\r\n}"
    },
    "contracts/interfaces/IStargatePoolManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\ninterface IStargatePoolManager {\r\n    struct PoolID {\r\n        uint256 srcPoolId;\r\n        uint256 dstPoolId;\r\n    }\r\n    \r\n    function getSwapFee(\r\n        uint16 dstChainId,\r\n        address to,\r\n        bytes memory payload\r\n    ) external view returns (uint256, uint256);\r\n\r\n    function swap(\r\n        address token,\r\n        uint16 dstChainId,\r\n        address payable refundAddress,\r\n        uint256 amount,\r\n        address from,\r\n        address to,\r\n        bytes memory payload\r\n    ) external payable;\r\n\r\n    function getSwapFeeETH(\r\n        uint16 dstChainId,\r\n        address to\r\n    ) external view returns (uint256, uint256);\r\n\r\n    function swapETH(\r\n        uint16 dstChainId,\r\n        address payable refundAddress,\r\n        uint256 amount,\r\n        address to,\r\n        bytes memory payload\r\n    ) external payable;\r\n\r\n    function setPoolId(address token, uint16 dstChainId, uint256 srcPoolId, uint256 dstPoolId) external;\r\n    function getPoolId(address token, uint16 dstChainId) external view returns (PoolID memory);\r\n    function isSwappable(address token, uint16 dstChainId) external view returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/IFundManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n// OmniX interfaces\r\nimport {ICurrencyManager} from \"../interfaces/ICurrencyManager.sol\";\r\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\r\nimport {IRoyaltyFeeManager} from \"../interfaces/IRoyaltyFeeManager.sol\";\r\nimport {IStargatePoolManager} from \"../interfaces/IStargatePoolManager.sol\";\r\nimport {IOFT} from \"../token/oft/IOFT.sol\";\r\n\r\ninterface IFundManager {\r\n    function getFeesAndFunds(\r\n        address strategy,\r\n        uint256 amount,\r\n        bytes memory royaltyInfo\r\n    ) external view returns(uint256, uint256, uint256, address);\r\n\r\n    /**\r\n     * @notice Calculate protocol fee for an execution strategy\r\n     * @param executionStrategy strategy\r\n     * @param amount amount to transfer\r\n     */\r\n    function calculateProtocolFee(address executionStrategy, uint256 amount) external view returns (uint256);\r\n\r\n    function lzFeeTransferCurrency(\r\n        address currency,\r\n        address to,\r\n        uint256 amount,\r\n        uint16 fromChainId,\r\n        uint16 toChainId,\r\n        bytes memory payload\r\n    ) external view returns(uint256);\r\n\r\n    function transferFeesAndFunds(address strategy, address currency, uint price, address from, address to, bytes memory royaltyInfo) external payable;\r\n    function transferFeesAndFundsWithWETH(address strategy, address to, uint price, bytes memory royaltyInfo) external payable;\r\n    function transferProxyFunds(address currency, address from, uint price, uint16 fromChainId, uint16 toChainId, bytes memory payload) external payable;\r\n    function processFeesAndFunds(address currency, address seller, address buyer, address strategy, uint price, bytes memory royaltyInfo, uint16 transferType) external;\r\n}"
    },
    "contracts/interfaces/IOmniXExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\n\r\ninterface IOmniXExchange {\r\n    function matchAskWithTakerBidUsingETHAndWETH(\r\n        uint destAirdrop,\r\n        OrderTypes.TakerOrder calldata takerBid,\r\n        OrderTypes.MakerOrder calldata makerAsk\r\n    ) external payable;\r\n\r\n    function matchAskWithTakerBid(uint destAirdrop, OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external payable;\r\n\r\n    function matchBidWithTakerAsk(uint destAirdrop, OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external payable;\r\n}"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GNU\r\npragma solidity >=0.8.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}"
    },
    "contracts/token/oft/IOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IOFTCore.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface of the OFT standard\r\n */\r\ninterface IOFT is IOFTCore, IERC20 {\r\n\r\n}\r\n"
    },
    "contracts/core/FundManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n// OmniX interfaces\r\nimport {ICurrencyManager} from \"../interfaces/ICurrencyManager.sol\";\r\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\r\nimport {IRoyaltyFeeManager} from \"../interfaces/IRoyaltyFeeManager.sol\";\r\nimport {IStargatePoolManager} from \"../interfaces/IStargatePoolManager.sol\";\r\nimport {IFundManager} from \"../interfaces/IFundManager.sol\";\r\nimport {OmniXExchange} from \"./OmniXExchange.sol\";\r\nimport {IOFT} from \"../token/oft/IOFT.sol\";\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\nimport {BytesLib} from \"../libraries/BytesLib.sol\";\r\n\r\n/**\r\n * @title FundManager\r\n * @notice It is the contract for funds transfer.\r\n */\r\ncontract FundManager is IFundManager, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using OrderTypes for OrderTypes.MakerOrder;\r\n    using OrderTypes for OrderTypes.TakerOrder;\r\n    using BytesLib for bytes;\r\n\r\n    uint16 public constant DIRECT_TRANSFER = 0;\r\n    uint16 public constant PROXY_TRANSFER = 1;\r\n    uint16 public constant REVERT_TRANSFER = 2;\r\n    uint16 private constant LZ_ADAPTER_VERSION = 1;\r\n    uint16 private constant MIN_PERCENTAGE_INCOME = 800;\r\n\r\n    // lz chain id => fund manager address\r\n    uint256 public gasForOmniLzReceive = 350000;\r\n    OmniXExchange public omnixExchange;\r\n\r\n    event RoyaltyPayment(\r\n        address indexed royaltyRecipient,\r\n        address currency,\r\n        uint256 amount\r\n    );\r\n\r\n    event RoyaltyPaymentETH(\r\n        address indexed royaltyRecipient,\r\n        uint256 amount\r\n    );\r\n\r\n    modifier onlyOmnix() {\r\n        require (msg.sender == address(omnixExchange), \"Only available from OmniXExchange\");\r\n        _;\r\n    }\r\n\r\n    constructor (address _omnixExchange) {\r\n        omnixExchange = OmniXExchange(payable(_omnixExchange));\r\n    }\r\n\r\n    function setOmnixExchange(address _omnixExchange) external onlyOwner {\r\n        omnixExchange = OmniXExchange(payable(_omnixExchange));\r\n    }\r\n\r\n    function setGasForOmniLZReceive(uint256 gas) external onlyOwner {\r\n        gasForOmniLzReceive = gas;\r\n    }\r\n\r\n    function _safeTransferFrom(address currency, address from, address to, uint amount) private {\r\n        if (from == address(this)) {\r\n            IERC20(currency).safeTransfer(to, amount);\r\n        } else {\r\n            IERC20(currency).safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice get fees and funds to royalty recipient, protocol, and seller\r\n     * @param strategy address of the execution strategy\r\n     * @param amount amount being transferred (in currency)\r\n     */\r\n    function getFeesAndFunds(\r\n        address strategy,\r\n        uint256 amount,\r\n        bytes memory royaltyInfo\r\n    ) public view override returns(uint256, uint256, uint256, address) {\r\n        address protocolFeeRecipient = omnixExchange.protocolFeeRecipient();\r\n\r\n        // Initialize the final amount that is transferred to seller\r\n        uint256 finalSellerAmount = amount;\r\n\r\n        // 1. Protocol fee\r\n        uint256 protocolFeeAmount = calculateProtocolFee(strategy, amount);\r\n\r\n        // Check if the protocol fee is different than 0 for this strategy\r\n        if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\r\n            finalSellerAmount -= protocolFeeAmount;\r\n        }\r\n\r\n        // 2. Royalty fee\r\n        (address royaltyFeeRecipient, uint256 royaltyAmount) = abi.decode(royaltyInfo, (address, uint256));\r\n        uint256 royaltyFeeAmount = amount * royaltyAmount / 10000;\r\n\r\n        // Check if there is a royalty fee and that it is different to 0\r\n        if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\r\n            finalSellerAmount -= royaltyFeeAmount;\r\n        }\r\n\r\n        return (protocolFeeAmount, royaltyFeeAmount, finalSellerAmount, royaltyFeeRecipient);\r\n    }\r\n\r\n    function transferCurrency(\r\n        address currency,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint16 fromChainId,\r\n        uint16 toChainId,\r\n        uint256 lzFee,\r\n        bytes memory payload\r\n    ) internal {\r\n        ICurrencyManager currencyManager = omnixExchange.currencyManager();\r\n        IStargatePoolManager stargatePoolManager = omnixExchange.stargatePoolManager();\r\n\r\n        if (currencyManager.isOmniCurrency(currency)) {\r\n            if (fromChainId == toChainId) {\r\n                _safeTransferFrom(currency, from, to, amount);\r\n            }\r\n            else {\r\n                bytes memory toAddress = abi.encodePacked(to);\r\n                bytes memory adapterParams = abi.encodePacked(LZ_ADAPTER_VERSION, gasForOmniLzReceive);\r\n\r\n                IOFT(currency).sendFrom{value: lzFee}(\r\n                    from, toChainId, toAddress, amount, payable(address(omnixExchange)), address(0x0), adapterParams, payload\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            if (\r\n                fromChainId != toChainId && \r\n                address(stargatePoolManager) != address(0) &&\r\n                stargatePoolManager.isSwappable(currency, toChainId)\r\n            ) {\r\n                stargatePoolManager.swap{value: lzFee}(currency, toChainId, payable(address(omnixExchange)), amount, from, to, payload);\r\n            }\r\n            else {\r\n                _safeTransferFrom(currency, from, to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferEth(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint16 fromChainId,\r\n        uint16 toChainId,\r\n        uint256 lzFee,\r\n        bytes memory payload\r\n    ) internal {\r\n        IStargatePoolManager stargatePoolManager = omnixExchange.stargatePoolManager();\r\n        if (\r\n            fromChainId != toChainId && \r\n            address(stargatePoolManager) != address(0) &&\r\n            stargatePoolManager.isSwappable(omnixExchange.WETH(), toChainId)\r\n        ) {\r\n            stargatePoolManager.swapETH{value: lzFee + amount}(toChainId, payable(from), amount, to, payload);\r\n        }\r\n        else {\r\n            payable(to).transfer(amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate protocol fee for an execution strategy\r\n     * @param executionStrategy strategy\r\n     * @param amount amount to transfer\r\n     */\r\n    function calculateProtocolFee(address executionStrategy, uint256 amount) public view override returns (uint256) {\r\n        uint256 protocolFee = IExecutionStrategy(executionStrategy).viewProtocolFee();\r\n        return (protocolFee * amount) / 10000;\r\n    }\r\n\r\n    function lzFeeTransferCurrency(\r\n        address currency,\r\n        address to,\r\n        uint256 amount,\r\n        uint16 fromChainId,\r\n        uint16 toChainId,\r\n        bytes memory payload\r\n    ) public view override returns(uint256) {\r\n        if (currency == address(0)) return 0;\r\n        \r\n        ICurrencyManager currencyManager = omnixExchange.currencyManager();\r\n        IStargatePoolManager stargatePoolManager = omnixExchange.stargatePoolManager();\r\n\r\n        if (currencyManager.isOmniCurrency(currency)) {\r\n            if (fromChainId == toChainId) {\r\n                return 0;\r\n            }\r\n            else {\r\n                // use adapterParams v1 to specify more gas for the destination\r\n                bytes memory adapterParams = abi.encodePacked(LZ_ADAPTER_VERSION, gasForOmniLzReceive);\r\n                bytes memory toAddress = abi.encodePacked(to);\r\n                // get the fees we need to pay to LayerZero for message delivery\r\n                (uint256 messageFee, ) = IOFT(currency).estimateSendFee(toChainId, toAddress, amount, false, adapterParams, payload);\r\n                return messageFee;\r\n            }\r\n        }\r\n        else {\r\n            if (\r\n                fromChainId != toChainId && \r\n                address(stargatePoolManager) != address(0) && \r\n                stargatePoolManager.isSwappable(currency, toChainId)\r\n            ) {\r\n                (uint256 fee, ) = stargatePoolManager.getSwapFee(toChainId, to, payload);\r\n                return fee;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\r\n     */\r\n    function transferFeesAndFunds(\r\n        address strategy,\r\n        address currency,\r\n        uint price,\r\n        address from,\r\n        address to,\r\n        bytes memory royaltyInfo\r\n    ) external payable override onlyOmnix() {\r\n        _transferFeesAndFunds(\r\n            strategy,\r\n            currency,\r\n            price,\r\n            from,\r\n            to,\r\n            royaltyInfo\r\n        );\r\n    }\r\n\r\n    /// @param strategy fee strategy\r\n    /// @param currency erc20 token address\r\n    /// @param amount funds amount to be transferred\r\n    /// @param from sender\r\n    /// @param to receiver\r\n    /// @param royaltyInfo custom royalty data for the collection\r\n    function _transferFeesAndFunds(\r\n        address strategy,\r\n        address currency,\r\n        uint256 amount,\r\n        address from,\r\n        address to,\r\n        bytes memory royaltyInfo\r\n    ) internal {\r\n        address protocolFeeRecipient = omnixExchange.protocolFeeRecipient();\r\n\r\n        // Initialize the final amount that is transferred to seller\r\n        (\r\n            uint256 protocolFeeAmount,\r\n            uint256 royaltyFeeAmount,\r\n            uint256 finalSellerAmount,\r\n            address royaltyFeeRecipient\r\n        ) = getFeesAndFunds(strategy, amount, royaltyInfo);\r\n\r\n        // 1. Protocol fee\r\n        {\r\n            // Check if the protocol fee is different than 0 for this strategy\r\n            if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\r\n                _safeTransferFrom(currency, from, protocolFeeRecipient, protocolFeeAmount);\r\n            }\r\n        }\r\n\r\n        // 2. Royalty fee\r\n        {\r\n            // Check if there is a royalty fee and that it is different to 0\r\n            if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\r\n                _safeTransferFrom(currency, from, royaltyFeeRecipient, royaltyFeeAmount);\r\n                emit RoyaltyPayment(royaltyFeeRecipient, currency, royaltyFeeAmount);\r\n            }\r\n        }\r\n\r\n        require((finalSellerAmount * 10000) >= (MIN_PERCENTAGE_INCOME * amount), \"Fees: Higher than expected\");\r\n\r\n        // 3. Transfer final amount (post-fees) to seller\r\n        _safeTransferFrom(currency, from, to, finalSellerAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\r\n     */\r\n    function transferFeesAndFundsWithWETH(\r\n        address strategy,\r\n        address to,\r\n        uint price,\r\n        bytes memory royaltyInfo\r\n    ) external payable override onlyOmnix() {\r\n        _transferFeesAndFundsWithWETH(\r\n            strategy,\r\n            to,\r\n            price,\r\n            royaltyInfo\r\n        );\r\n    }\r\n\r\n    function _transferFeesAndFundsWithWETH(\r\n        address strategy,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory royaltyInfo\r\n    ) private {\r\n        address protocolFeeRecipient = omnixExchange.protocolFeeRecipient();\r\n\r\n        // Initialize the final amount that is transferred to seller\r\n        (\r\n            uint256 protocolFeeAmount,\r\n            uint256 royaltyFeeAmount,\r\n            uint256 finalSellerAmount,\r\n            address royaltyFeeRecipient\r\n        ) = getFeesAndFunds(strategy, amount, royaltyInfo);\r\n\r\n        // 1. Protocol fee\r\n        {\r\n            // Check if the protocol fee is different than 0 for this strategy\r\n            if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\r\n                payable(protocolFeeRecipient).transfer(protocolFeeAmount);\r\n            }\r\n        }\r\n\r\n        // 2. Royalty fee\r\n        {\r\n            // Check if there is a royalty fee and that it is different to 0\r\n            if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\r\n                payable(royaltyFeeRecipient).transfer(royaltyFeeAmount);\r\n\r\n                emit RoyaltyPaymentETH(royaltyFeeRecipient, royaltyFeeAmount);\r\n            }\r\n        }\r\n\r\n        require((finalSellerAmount * 10000) >= (MIN_PERCENTAGE_INCOME * amount), \"Fees: Higher than expected\");\r\n\r\n        // 3. Transfer final amount (post-fees) to seller\r\n        payable(to).transfer(finalSellerAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer funds to omnixexchange\r\n     */\r\n    function transferProxyFunds(\r\n        address currency,\r\n        address from,\r\n        uint price,\r\n        uint16 fromChainId,\r\n        uint16 toChainId,\r\n        bytes memory payload\r\n    ) external payable override onlyOmnix() {\r\n        if (currency == omnixExchange.WETH()) {\r\n            transferEth(\r\n                from,\r\n                omnixExchange.getTrustedRemoteAddress(toChainId).toAddress(0),\r\n                price,\r\n                fromChainId,\r\n                toChainId,\r\n                msg.value - price,\r\n                payload\r\n            );\r\n        }\r\n        else {\r\n            transferCurrency(\r\n                currency,\r\n                from,\r\n                omnixExchange.getTrustedRemoteAddress(toChainId).toAddress(0),\r\n                price,\r\n                fromChainId,\r\n                toChainId,\r\n                msg.value,\r\n                payload\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\r\n     * @param transferType one of PROXY_TRANSFER, REVERT_TRANSFER\r\n     * @dev this function is called on seller side. refer OmniXExchange.sgReceive\r\n     */\r\n    function processFeesAndFunds(\r\n        address currency,\r\n        address buyer,\r\n        address seller,\r\n        address strategy,\r\n        uint price,\r\n        bytes memory royaltyInfo,\r\n        uint16 transferType\r\n    ) external override onlyOmnix() {\r\n        // Assumed funds already been arrived at OmniXExchange on seller's chain.\r\n\r\n        if (transferType == REVERT_TRANSFER) {\r\n            _safeTransferFrom(currency, address(omnixExchange), buyer, price);\r\n        }\r\n        else {\r\n            _transferFeesAndFunds(\r\n                strategy,\r\n                currency,\r\n                price,\r\n                address(omnixExchange),\r\n                seller,\r\n                royaltyInfo\r\n            );\r\n        }\r\n    }\r\n}"
    },
    "contracts/token/oft/OFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"./OFTCore.sol\";\r\nimport \"./IOFT.sol\";\r\n\r\n// override decimal() function is needed\r\ncontract OFT is OFTCore, ERC20, IOFT {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC20(_name, _symbol) OFTCore(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCore, IERC165) returns (bool) {\r\n        return interfaceId == type(IOFT).interfaceId || interfaceId == type(IERC20).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _burn(_from, _amount);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override {\r\n        _mint(_toAddress, _amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/token/oft/extension/PausableOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFT.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\n// allow OFT to pause all cross-chain transactions\r\ncontract PausableOFT is OFT, Pausable {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) OFT(_name, _symbol, _lzEndpoint) {}\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual override whenNotPaused {\r\n        super._debitFrom(_from, _dstChainId, _toAddress, _amount);\r\n    }\r\n\r\n    function pauseSendTokens(bool pause) external onlyOwner {\r\n        pause ? _pause() : _unpause();\r\n    }\r\n}\r\n"
    },
    "contracts/rewards/TradingReweardDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n/**\r\n * @title TradingRewardsDistributor\r\n * @notice It distributes LOOKS tokens with rolling Merkle airdrops.\r\n */\r\ncontract TradingRewardsDistributor is Pausable, ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant BUFFER_ADMIN_WITHDRAW = 3 days;\r\n\r\n    IERC20 public immutable looksRareToken;\r\n\r\n    // Current reward round (users can only claim pending rewards for the current round)\r\n    uint256 public currentRewardRound;\r\n\r\n    // Last paused timestamp\r\n    uint256 public lastPausedTimestamp;\r\n\r\n    // Max amount per user in current tree\r\n    uint256 public maximumAmountPerUserInCurrentTree;\r\n\r\n    // Total amount claimed by user (in LOOKS)\r\n    mapping(address => uint256) public amountClaimedByUser;\r\n\r\n    // Merkle root for a reward round\r\n    mapping(uint256 => bytes32) public merkleRootOfRewardRound;\r\n\r\n    // Checks whether a merkle root was used\r\n    mapping(bytes32 => bool) public merkleRootUsed;\r\n\r\n    // Keeps track on whether user has claimed at a given reward round\r\n    mapping(uint256 => mapping(address => bool)) public hasUserClaimedForRewardRound;\r\n\r\n    event RewardsClaim(address indexed user, uint256 indexed rewardRound, uint256 amount);\r\n    event UpdateTradingRewards(uint256 indexed rewardRound);\r\n    event TokenWithdrawnOwner(uint256 amount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _looksRareToken address of the LooksRare token\r\n     */\r\n    constructor(address _looksRareToken) {\r\n        looksRareToken = IERC20(_looksRareToken);\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Claim pending rewards\r\n     * @param amount amount to claim\r\n     * @param merkleProof array containing the merkle proof\r\n     */\r\n    function claim(uint256 amount, bytes32[] calldata merkleProof) external whenNotPaused nonReentrant {\r\n        // Verify the reward round is not claimed already\r\n        require(!hasUserClaimedForRewardRound[currentRewardRound][msg.sender], \"Rewards: Already claimed\");\r\n\r\n        (bool claimStatus, uint256 adjustedAmount) = _canClaim(msg.sender, amount, merkleProof);\r\n\r\n        require(claimStatus, \"Rewards: Invalid proof\");\r\n        require(maximumAmountPerUserInCurrentTree >= amount, \"Rewards: Amount higher than max\");\r\n\r\n        // Set mapping for user and round as true\r\n        hasUserClaimedForRewardRound[currentRewardRound][msg.sender] = true;\r\n\r\n        // Adjust amount claimed\r\n        amountClaimedByUser[msg.sender] += adjustedAmount;\r\n\r\n        // Transfer adjusted amount\r\n        looksRareToken.safeTransfer(msg.sender, adjustedAmount);\r\n\r\n        emit RewardsClaim(msg.sender, currentRewardRound, adjustedAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Update trading rewards with a new merkle root\r\n     * @dev It automatically increments the currentRewardRound\r\n     * @param merkleRoot root of the computed merkle tree\r\n     */\r\n    function updateTradingRewards(bytes32 merkleRoot, uint256 newMaximumAmountPerUser) external onlyOwner {\r\n        require(!merkleRootUsed[merkleRoot], \"Owner: Merkle root already used\");\r\n\r\n        currentRewardRound++;\r\n        merkleRootOfRewardRound[currentRewardRound] = merkleRoot;\r\n        merkleRootUsed[merkleRoot] = true;\r\n        maximumAmountPerUserInCurrentTree = newMaximumAmountPerUser;\r\n\r\n        emit UpdateTradingRewards(currentRewardRound);\r\n    }\r\n\r\n    /**\r\n     * @notice Pause distribution\r\n     */\r\n    function pauseDistribution() external onlyOwner whenNotPaused {\r\n        lastPausedTimestamp = block.timestamp;\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause distribution\r\n     */\r\n    function unpauseDistribution() external onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer LOOKS tokens back to owner\r\n     * @dev It is for emergency purposes\r\n     * @param amount amount to withdraw\r\n     */\r\n    function withdrawTokenRewards(uint256 amount) external onlyOwner whenPaused {\r\n        require(block.timestamp > (lastPausedTimestamp + BUFFER_ADMIN_WITHDRAW), \"Owner: Too early to withdraw\");\r\n        looksRareToken.safeTransfer(msg.sender, amount);\r\n\r\n        emit TokenWithdrawnOwner(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether it is possible to claim and how much based on previous distribution\r\n     * @param user address of the user\r\n     * @param amount amount to claim\r\n     * @param merkleProof array with the merkle proof\r\n     */\r\n    function canClaim(\r\n        address user,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external view returns (bool, uint256) {\r\n        return _canClaim(user, amount, merkleProof);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether it is possible to claim and how much based on previous distribution\r\n     * @param user address of the user\r\n     * @param amount amount to claim\r\n     * @param merkleProof array with the merkle proof\r\n     */\r\n    function _canClaim(\r\n        address user,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) internal view returns (bool, uint256) {\r\n        // Compute the node and verify the merkle proof\r\n        bytes32 node = keccak256(abi.encodePacked(user, amount));\r\n        bool canUserClaim = MerkleProof.verify(merkleProof, merkleRootOfRewardRound[currentRewardRound], node);\r\n\r\n        if ((!canUserClaim) || (hasUserClaimedForRewardRound[currentRewardRound][user])) {\r\n            return (false, 0);\r\n        } else {\r\n            return (true, amount - amountClaimedByUser[user]);\r\n        }\r\n    }\r\n}"
    },
    "contracts/rewards/StakingPoolForUniswapV2Tokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {TokenDistributor} from \"./TokenDistributor.sol\";\r\nimport {TokenSplitter} from \"./TokenSplitter.sol\";\r\n\r\n/**\r\n * @title StakingPoolForUniswapV2Tokens\r\n * @notice It is a staking pool for Uniswap V2 LP tokens (stake Uniswap V2 LP tokens -> get LOOKS).\r\n */\r\ncontract StakingPoolForUniswapV2Tokens is Ownable, Pausable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // Amount of staked tokens provided by user\r\n        uint256 rewardDebt; // Reward debt\r\n    }\r\n\r\n    // Precision factor for reward calculation\r\n    uint256 public constant PRECISION_FACTOR = 10**12;\r\n\r\n    // LOOKS token (token distributed)\r\n    IERC20 public immutable looksRareToken;\r\n\r\n    // The staked token (i.e., Uniswap V2 WETH/LOOKS LP token)\r\n    IERC20 public immutable stakedToken;\r\n\r\n    // Block number when rewards start\r\n    uint256 public immutable START_BLOCK;\r\n\r\n    // Accumulated tokens per share\r\n    uint256 public accTokenPerShare;\r\n\r\n    // Block number when rewards end\r\n    uint256 public endBlock;\r\n\r\n    // Block number of the last update\r\n    uint256 public lastRewardBlock;\r\n\r\n    // Tokens distributed per block (in looksRareToken)\r\n    uint256 public rewardPerBlock;\r\n\r\n    // UserInfo for users that stake tokens (stakedToken)\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    event AdminRewardWithdraw(uint256 amount);\r\n    event Deposit(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event Harvest(address indexed user, uint256 harvestedAmount);\r\n    event NewRewardPerBlockAndEndBlock(uint256 rewardPerBlock, uint256 endBlock);\r\n    event Withdraw(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _stakedToken staked token address\r\n     * @param _looksRareToken reward token address\r\n     * @param _rewardPerBlock reward per block (in LOOKS)\r\n     * @param _startBlock start block\r\n     * @param _endBlock end block\r\n     */\r\n    constructor(\r\n        address _stakedToken,\r\n        address _looksRareToken,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _endBlock\r\n    ) {\r\n        stakedToken = IERC20(_stakedToken);\r\n        looksRareToken = IERC20(_looksRareToken);\r\n        rewardPerBlock = _rewardPerBlock;\r\n        START_BLOCK = _startBlock;\r\n        endBlock = _endBlock;\r\n\r\n        // Set the lastRewardBlock as the start block\r\n        lastRewardBlock = _startBlock;\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit staked tokens and collect reward tokens (if any)\r\n     * @param amount amount to deposit (in stakedToken)\r\n     */\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"Deposit: Amount must be > 0\");\r\n\r\n        _updatePool();\r\n\r\n        uint256 pendingRewards;\r\n\r\n        if (userInfo[msg.sender].amount > 0) {\r\n            pendingRewards =\r\n                ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n                userInfo[msg.sender].rewardDebt;\r\n\r\n            if (pendingRewards > 0) {\r\n                looksRareToken.safeTransfer(msg.sender, pendingRewards);\r\n            }\r\n        }\r\n\r\n        stakedToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        userInfo[msg.sender].amount += amount;\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n        emit Deposit(msg.sender, amount, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Harvest tokens that are pending\r\n     */\r\n    function harvest() external nonReentrant {\r\n        _updatePool();\r\n\r\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n            userInfo[msg.sender].rewardDebt;\r\n\r\n        require(pendingRewards > 0, \"Harvest: Pending rewards must be > 0\");\r\n\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n        looksRareToken.safeTransfer(msg.sender, pendingRewards);\r\n\r\n        emit Harvest(msg.sender, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens and give up rewards\r\n     * @dev Only for emergency. It does not update the pool.\r\n     */\r\n    function emergencyWithdraw() external nonReentrant whenPaused {\r\n        uint256 userBalance = userInfo[msg.sender].amount;\r\n\r\n        require(userBalance != 0, \"Withdraw: Amount must be > 0\");\r\n\r\n        // Reset internal value for user\r\n        userInfo[msg.sender].amount = 0;\r\n        userInfo[msg.sender].rewardDebt = 0;\r\n\r\n        stakedToken.safeTransfer(msg.sender, userBalance);\r\n\r\n        emit EmergencyWithdraw(msg.sender, userBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens and collect reward tokens\r\n     * @param amount amount to withdraw (in stakedToken)\r\n     */\r\n    function withdraw(uint256 amount) external nonReentrant {\r\n        require(\r\n            (userInfo[msg.sender].amount >= amount) && (amount > 0),\r\n            \"Withdraw: Amount must be > 0 or lower than user balance\"\r\n        );\r\n\r\n        _updatePool();\r\n\r\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n            userInfo[msg.sender].rewardDebt;\r\n\r\n        userInfo[msg.sender].amount -= amount;\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n        stakedToken.safeTransfer(msg.sender, amount);\r\n\r\n        if (pendingRewards > 0) {\r\n            looksRareToken.safeTransfer(msg.sender, pendingRewards);\r\n        }\r\n\r\n        emit Withdraw(msg.sender, amount, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw rewards (for admin)\r\n     * @param amount amount to withdraw (in looksRareToken)\r\n     * @dev Only callable by owner.\r\n     */\r\n    function adminRewardWithdraw(uint256 amount) external onlyOwner {\r\n        looksRareToken.safeTransfer(msg.sender, amount);\r\n\r\n        emit AdminRewardWithdraw(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Pause\r\n     * It allows calling emergencyWithdraw\r\n     */\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause\r\n     */\r\n    function unpause() external onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Update reward per block and the end block\r\n     * @param newRewardPerBlock the new reward per block\r\n     * @param newEndBlock the new end block\r\n     */\r\n    function updateRewardPerBlockAndEndBlock(uint256 newRewardPerBlock, uint256 newEndBlock) external onlyOwner {\r\n        if (block.number >= START_BLOCK) {\r\n            _updatePool();\r\n        }\r\n        require(newEndBlock > block.number, \"Owner: New endBlock must be after current block\");\r\n        require(newEndBlock > START_BLOCK, \"Owner: New endBlock must be after start block\");\r\n\r\n        endBlock = newEndBlock;\r\n        rewardPerBlock = newRewardPerBlock;\r\n\r\n        emit NewRewardPerBlockAndEndBlock(newRewardPerBlock, newEndBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice View function to see pending reward on frontend.\r\n     * @param user address of the user\r\n     * @return Pending reward\r\n     */\r\n    function calculatePendingRewards(address user) external view returns (uint256) {\r\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n\r\n        if ((block.number > lastRewardBlock) && (stakedTokenSupply != 0)) {\r\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n            uint256 tokenReward = multiplier * rewardPerBlock;\r\n            uint256 adjustedTokenPerShare = accTokenPerShare + (tokenReward * PRECISION_FACTOR) / stakedTokenSupply;\r\n\r\n            return (userInfo[user].amount * adjustedTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\r\n        } else {\r\n            return (userInfo[user].amount * accTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update reward variables of the pool to be up-to-date.\r\n     */\r\n    function _updatePool() internal {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n\r\n        if (stakedTokenSupply == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n        uint256 tokenReward = multiplier * rewardPerBlock;\r\n\r\n        // Update only if token reward for staking is not null\r\n        if (tokenReward > 0) {\r\n            accTokenPerShare = accTokenPerShare + ((tokenReward * PRECISION_FACTOR) / stakedTokenSupply);\r\n        }\r\n\r\n        // Update last reward block only if it wasn't updated after or at the end block\r\n        if (lastRewardBlock <= endBlock) {\r\n            lastRewardBlock = block.number;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Return reward multiplier over the given \"from\" to \"to\" block.\r\n     * @param from block to start calculating reward\r\n     * @param to block to finish calculating reward\r\n     * @return the multiplier for the period\r\n     */\r\n    function _getMultiplier(uint256 from, uint256 to) internal view returns (uint256) {\r\n        if (to <= endBlock) {\r\n            return to - from;\r\n        } else if (from >= endBlock) {\r\n            return 0;\r\n        } else {\r\n            return endBlock - from;\r\n        }\r\n    }\r\n}"
    },
    "contracts/rewards/TokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {ILooksRareToken} from \"../interfaces/ILooksRareToken.sol\";\r\n\r\n/**\r\n * @title TokenDistributor\r\n * @notice It handles the distribution of LOOKS token.\r\n * It auto-adjusts block rewards over a set number of periods.\r\n */\r\ncontract TokenDistributor is ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for ILooksRareToken;\r\n\r\n    struct StakingPeriod {\r\n        uint256 rewardPerBlockForStaking;\r\n        uint256 rewardPerBlockForOthers;\r\n        uint256 periodLengthInBlock;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // Amount of staked tokens provided by user\r\n        uint256 rewardDebt; // Reward debt\r\n    }\r\n\r\n    // Precision factor for calculating rewards\r\n    uint256 public constant PRECISION_FACTOR = 10**12;\r\n\r\n    ILooksRareToken public immutable looksRareToken;\r\n\r\n    address public immutable tokenSplitter;\r\n\r\n    // Number of reward periods\r\n    uint256 public immutable NUMBER_PERIODS;\r\n\r\n    // Block number when rewards start\r\n    uint256 public immutable START_BLOCK;\r\n\r\n    // Accumulated tokens per share\r\n    uint256 public accTokenPerShare;\r\n\r\n    // Current phase for rewards\r\n    uint256 public currentPhase;\r\n\r\n    // Block number when rewards end\r\n    uint256 public endBlock;\r\n\r\n    // Block number of the last update\r\n    uint256 public lastRewardBlock;\r\n\r\n    // Tokens distributed per block for other purposes (team + treasury + trading rewards)\r\n    uint256 public rewardPerBlockForOthers;\r\n\r\n    // Tokens distributed per block for staking\r\n    uint256 public rewardPerBlockForStaking;\r\n\r\n    // Total amount staked\r\n    uint256 public totalAmountStaked;\r\n\r\n    mapping(uint256 => StakingPeriod) public stakingPeriod;\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    event Compound(address indexed user, uint256 harvestedAmount);\r\n    event Deposit(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n    event NewRewardsPerBlock(\r\n        uint256 indexed currentPhase,\r\n        uint256 startBlock,\r\n        uint256 rewardPerBlockForStaking,\r\n        uint256 rewardPerBlockForOthers\r\n    );\r\n    event Withdraw(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _looksRareToken LOOKS token address\r\n     * @param _tokenSplitter token splitter contract address (for team and trading rewards)\r\n     * @param _startBlock start block for reward program\r\n     * @param _rewardsPerBlockForStaking array of rewards per block for staking\r\n     * @param _rewardsPerBlockForOthers array of rewards per block for other purposes (team + treasury + trading rewards)\r\n     * @param _periodLengthesInBlocks array of period lengthes\r\n     * @param _numberPeriods number of periods with different rewards/lengthes (e.g., if 3 changes --> 4 periods)\r\n     */\r\n    constructor(\r\n        address _looksRareToken,\r\n        address _tokenSplitter,\r\n        uint256 _startBlock,\r\n        uint256[] memory _rewardsPerBlockForStaking,\r\n        uint256[] memory _rewardsPerBlockForOthers,\r\n        uint256[] memory _periodLengthesInBlocks,\r\n        uint256 _numberPeriods\r\n    ) {\r\n        require(\r\n            (_periodLengthesInBlocks.length == _numberPeriods) &&\r\n                (_rewardsPerBlockForStaking.length == _numberPeriods) &&\r\n                (_rewardsPerBlockForStaking.length == _numberPeriods),\r\n            \"Distributor: Lengthes must match numberPeriods\"\r\n        );\r\n\r\n        // 1. Operational checks for supply\r\n        uint256 nonCirculatingSupply = ILooksRareToken(_looksRareToken).SUPPLY_CAP() -\r\n            ILooksRareToken(_looksRareToken).totalSupply();\r\n\r\n        uint256 amountTokensToBeMinted;\r\n\r\n        for (uint256 i = 0; i < _numberPeriods; i++) {\r\n            amountTokensToBeMinted +=\r\n                (_rewardsPerBlockForStaking[i] * _periodLengthesInBlocks[i]) +\r\n                (_rewardsPerBlockForOthers[i] * _periodLengthesInBlocks[i]);\r\n\r\n            stakingPeriod[i] = StakingPeriod({\r\n                rewardPerBlockForStaking: _rewardsPerBlockForStaking[i],\r\n                rewardPerBlockForOthers: _rewardsPerBlockForOthers[i],\r\n                periodLengthInBlock: _periodLengthesInBlocks[i]\r\n            });\r\n        }\r\n\r\n        require(amountTokensToBeMinted == nonCirculatingSupply, \"Distributor: Wrong reward parameters\");\r\n\r\n        // 2. Store values\r\n        looksRareToken = ILooksRareToken(_looksRareToken);\r\n        tokenSplitter = _tokenSplitter;\r\n        rewardPerBlockForStaking = _rewardsPerBlockForStaking[0];\r\n        rewardPerBlockForOthers = _rewardsPerBlockForOthers[0];\r\n\r\n        START_BLOCK = _startBlock;\r\n        endBlock = _startBlock + _periodLengthesInBlocks[0];\r\n\r\n        NUMBER_PERIODS = _numberPeriods;\r\n\r\n        // Set the lastRewardBlock as the startBlock\r\n        lastRewardBlock = _startBlock;\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit staked tokens and compounds pending rewards\r\n     * @param amount amount to deposit (in LOOKS)\r\n     */\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"Deposit: Amount must be > 0\");\r\n\r\n        // Update pool information\r\n        _updatePool();\r\n\r\n        // Transfer LOOKS tokens to this contract\r\n        looksRareToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        uint256 pendingRewards;\r\n\r\n        // If not new deposit, calculate pending rewards (for auto-compounding)\r\n        if (userInfo[msg.sender].amount > 0) {\r\n            pendingRewards =\r\n                ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n                userInfo[msg.sender].rewardDebt;\r\n        }\r\n\r\n        // Adjust user information\r\n        userInfo[msg.sender].amount += (amount + pendingRewards);\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n        // Increase totalAmountStaked\r\n        totalAmountStaked += (amount + pendingRewards);\r\n\r\n        emit Deposit(msg.sender, amount, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Compound based on pending rewards\r\n     */\r\n    function harvestAndCompound() external nonReentrant {\r\n        // Update pool information\r\n        _updatePool();\r\n\r\n        // Calculate pending rewards\r\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n            userInfo[msg.sender].rewardDebt;\r\n\r\n        // Return if no pending rewards\r\n        if (pendingRewards == 0) {\r\n            // It doesn't throw revertion (to help with the fee-sharing auto-compounding contract)\r\n            return;\r\n        }\r\n\r\n        // Adjust user amount for pending rewards\r\n        userInfo[msg.sender].amount += pendingRewards;\r\n\r\n        // Adjust totalAmountStaked\r\n        totalAmountStaked += pendingRewards;\r\n\r\n        // Recalculate reward debt based on new user amount\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n        emit Compound(msg.sender, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Update pool rewards\r\n     */\r\n    function updatePool() external nonReentrant {\r\n        _updatePool();\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens and compound pending rewards\r\n     * @param amount amount to withdraw\r\n     */\r\n    function withdraw(uint256 amount) external nonReentrant {\r\n        require(\r\n            (userInfo[msg.sender].amount >= amount) && (amount > 0),\r\n            \"Withdraw: Amount must be > 0 or lower than user balance\"\r\n        );\r\n\r\n        // Update pool\r\n        _updatePool();\r\n\r\n        // Calculate pending rewards\r\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n            userInfo[msg.sender].rewardDebt;\r\n\r\n        // Adjust user information\r\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + pendingRewards - amount;\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n        // Adjust total amount staked\r\n        totalAmountStaked = totalAmountStaked + pendingRewards - amount;\r\n\r\n        // Transfer LOOKS tokens to the sender\r\n        looksRareToken.safeTransfer(msg.sender, amount);\r\n\r\n        emit Withdraw(msg.sender, amount, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw all staked tokens and collect tokens\r\n     */\r\n    function withdrawAll() external nonReentrant {\r\n        require(userInfo[msg.sender].amount > 0, \"Withdraw: Amount must be > 0\");\r\n\r\n        // Update pool\r\n        _updatePool();\r\n\r\n        // Calculate pending rewards and amount to transfer (to the sender)\r\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n            userInfo[msg.sender].rewardDebt;\r\n\r\n        uint256 amountToTransfer = userInfo[msg.sender].amount + pendingRewards;\r\n\r\n        // Adjust total amount staked\r\n        totalAmountStaked = totalAmountStaked - userInfo[msg.sender].amount;\r\n\r\n        // Adjust user information\r\n        userInfo[msg.sender].amount = 0;\r\n        userInfo[msg.sender].rewardDebt = 0;\r\n\r\n        // Transfer LOOKS tokens to the sender\r\n        looksRareToken.safeTransfer(msg.sender, amountToTransfer);\r\n\r\n        emit Withdraw(msg.sender, amountToTransfer, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate pending rewards for a user\r\n     * @param user address of the user\r\n     * @return Pending rewards\r\n     */\r\n    function calculatePendingRewards(address user) external view returns (uint256) {\r\n        if ((block.number > lastRewardBlock) && (totalAmountStaked != 0)) {\r\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n\r\n            uint256 tokenRewardForStaking = multiplier * rewardPerBlockForStaking;\r\n\r\n            uint256 adjustedEndBlock = endBlock;\r\n            uint256 adjustedCurrentPhase = currentPhase;\r\n\r\n            // Check whether to adjust multipliers and reward per block\r\n            while ((block.number > adjustedEndBlock) && (adjustedCurrentPhase < (NUMBER_PERIODS - 1))) {\r\n                // Update current phase\r\n                adjustedCurrentPhase++;\r\n\r\n                // Update rewards per block\r\n                uint256 adjustedRewardPerBlockForStaking = stakingPeriod[adjustedCurrentPhase].rewardPerBlockForStaking;\r\n\r\n                // Calculate adjusted block number\r\n                uint256 previousEndBlock = adjustedEndBlock;\r\n\r\n                // Update end block\r\n                adjustedEndBlock = previousEndBlock + stakingPeriod[adjustedCurrentPhase].periodLengthInBlock;\r\n\r\n                // Calculate new multiplier\r\n                uint256 newMultiplier = (block.number <= adjustedEndBlock)\r\n                    ? (block.number - previousEndBlock)\r\n                    : stakingPeriod[adjustedCurrentPhase].periodLengthInBlock;\r\n\r\n                // Adjust token rewards for staking\r\n                tokenRewardForStaking += (newMultiplier * adjustedRewardPerBlockForStaking);\r\n            }\r\n\r\n            uint256 adjustedTokenPerShare = accTokenPerShare +\r\n                (tokenRewardForStaking * PRECISION_FACTOR) /\r\n                totalAmountStaked;\r\n\r\n            return (userInfo[user].amount * adjustedTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\r\n        } else {\r\n            return (userInfo[user].amount * accTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update reward variables of the pool\r\n     */\r\n    function _updatePool() internal {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        if (totalAmountStaked == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        // Calculate multiplier\r\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n\r\n        // Calculate rewards for staking and others\r\n        uint256 tokenRewardForStaking = multiplier * rewardPerBlockForStaking;\r\n        uint256 tokenRewardForOthers = multiplier * rewardPerBlockForOthers;\r\n\r\n        // Check whether to adjust multipliers and reward per block\r\n        while ((block.number > endBlock) && (currentPhase < (NUMBER_PERIODS - 1))) {\r\n            // Update rewards per block\r\n            _updateRewardsPerBlock(endBlock);\r\n\r\n            uint256 previousEndBlock = endBlock;\r\n\r\n            // Adjust the end block\r\n            endBlock += stakingPeriod[currentPhase].periodLengthInBlock;\r\n\r\n            // Adjust multiplier to cover the missing periods with other lower inflation schedule\r\n            uint256 newMultiplier = _getMultiplier(previousEndBlock, block.number);\r\n\r\n            // Adjust token rewards\r\n            tokenRewardForStaking += (newMultiplier * rewardPerBlockForStaking);\r\n            tokenRewardForOthers += (newMultiplier * rewardPerBlockForOthers);\r\n        }\r\n\r\n        // Mint tokens only if token rewards for staking are not null\r\n        if (tokenRewardForStaking > 0) {\r\n            // It allows protection against potential issues to prevent funds from being locked\r\n            bool mintStatus = looksRareToken.mint(address(this), tokenRewardForStaking);\r\n            if (mintStatus) {\r\n                accTokenPerShare = accTokenPerShare + ((tokenRewardForStaking * PRECISION_FACTOR) / totalAmountStaked);\r\n            }\r\n\r\n            looksRareToken.mint(tokenSplitter, tokenRewardForOthers);\r\n        }\r\n\r\n        // Update last reward block only if it wasn't updated after or at the end block\r\n        if (lastRewardBlock <= endBlock) {\r\n            lastRewardBlock = block.number;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update rewards per block\r\n     * @dev Rewards are halved by 2 (for staking + others)\r\n     */\r\n    function _updateRewardsPerBlock(uint256 _newStartBlock) internal {\r\n        // Update current phase\r\n        currentPhase++;\r\n\r\n        // Update rewards per block\r\n        rewardPerBlockForStaking = stakingPeriod[currentPhase].rewardPerBlockForStaking;\r\n        rewardPerBlockForOthers = stakingPeriod[currentPhase].rewardPerBlockForOthers;\r\n\r\n        emit NewRewardsPerBlock(currentPhase, _newStartBlock, rewardPerBlockForStaking, rewardPerBlockForOthers);\r\n    }\r\n\r\n    /**\r\n     * @notice Return reward multiplier over the given \"from\" to \"to\" block.\r\n     * @param from block to start calculating reward\r\n     * @param to block to finish calculating reward\r\n     * @return the multiplier for the period\r\n     */\r\n    function _getMultiplier(uint256 from, uint256 to) internal view returns (uint256) {\r\n        if (to <= endBlock) {\r\n            return to - from;\r\n        } else if (from >= endBlock) {\r\n            return 0;\r\n        } else {\r\n            return endBlock - from;\r\n        }\r\n    }\r\n}"
    },
    "contracts/rewards/TokenSplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n/**\r\n * @title TokenSplitter\r\n * @notice It splits LOOKS to team/treasury/trading volume reward accounts based on shares.\r\n */\r\ncontract TokenSplitter is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct AccountInfo {\r\n        uint256 shares;\r\n        uint256 tokensDistributedToAccount;\r\n    }\r\n\r\n    uint256 public immutable TOTAL_SHARES;\r\n\r\n    IERC20 public immutable looksRareToken;\r\n\r\n    // Total LOOKS tokens distributed across all accounts\r\n    uint256 public totalTokensDistributed;\r\n\r\n    mapping(address => AccountInfo) public accountInfo;\r\n\r\n    event NewSharesOwner(address indexed oldRecipient, address indexed newRecipient);\r\n    event TokensTransferred(address indexed account, uint256 amount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _accounts array of accounts addresses\r\n     * @param _shares array of shares per account\r\n     * @param _looksRareToken address of the LOOKS token\r\n     */\r\n    constructor(\r\n        address[] memory _accounts,\r\n        uint256[] memory _shares,\r\n        address _looksRareToken\r\n    ) {\r\n        require(_accounts.length == _shares.length, \"Splitter: Length differ\");\r\n        require(_accounts.length > 0, \"Splitter: Length must be > 0\");\r\n\r\n        uint256 currentShares;\r\n\r\n        for (uint256 i = 0; i < _accounts.length; i++) {\r\n            require(_shares[i] > 0, \"Splitter: Shares are 0\");\r\n\r\n            currentShares += _shares[i];\r\n            accountInfo[_accounts[i]].shares = _shares[i];\r\n        }\r\n\r\n        TOTAL_SHARES = currentShares;\r\n        looksRareToken = IERC20(_looksRareToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Release LOOKS tokens to the account\r\n     * @param account address of the account\r\n     */\r\n    function releaseTokens(address account) external nonReentrant {\r\n        require(accountInfo[account].shares > 0, \"Splitter: Account has no share\");\r\n\r\n        // Calculate amount to transfer to the account\r\n        uint256 totalTokensReceived = looksRareToken.balanceOf(address(this)) + totalTokensDistributed;\r\n        uint256 pendingRewards = ((totalTokensReceived * accountInfo[account].shares) / TOTAL_SHARES) -\r\n            accountInfo[account].tokensDistributedToAccount;\r\n\r\n        // Revert if equal to 0\r\n        require(pendingRewards != 0, \"Splitter: Nothing to transfer\");\r\n\r\n        accountInfo[account].tokensDistributedToAccount += pendingRewards;\r\n        totalTokensDistributed += pendingRewards;\r\n\r\n        // Transfer funds to account\r\n        looksRareToken.safeTransfer(account, pendingRewards);\r\n\r\n        emit TokensTransferred(account, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Update share recipient\r\n     * @param _newRecipient address of the new recipient\r\n     * @param _currentRecipient address of the current recipient\r\n     */\r\n    function updateSharesOwner(address _newRecipient, address _currentRecipient) external onlyOwner {\r\n        require(accountInfo[_currentRecipient].shares > 0, \"Owner: Current recipient has no shares\");\r\n        require(accountInfo[_newRecipient].shares == 0, \"Owner: New recipient has existing shares\");\r\n\r\n        // Copy shares to new recipient\r\n        accountInfo[_newRecipient].shares = accountInfo[_currentRecipient].shares;\r\n        accountInfo[_newRecipient].tokensDistributedToAccount = accountInfo[_currentRecipient]\r\n            .tokensDistributedToAccount;\r\n\r\n        // Reset existing shares\r\n        accountInfo[_currentRecipient].shares = 0;\r\n        accountInfo[_currentRecipient].tokensDistributedToAccount = 0;\r\n\r\n        emit NewSharesOwner(_currentRecipient, _newRecipient);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve amount of LOOKS tokens that can be transferred\r\n     * @param account address of the account\r\n     */\r\n    function calculatePendingRewards(address account) external view returns (uint256) {\r\n        if (accountInfo[account].shares == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 totalTokensReceived = looksRareToken.balanceOf(address(this)) + totalTokensDistributed;\r\n        uint256 pendingRewards = ((totalTokensReceived * accountInfo[account].shares) / TOTAL_SHARES) -\r\n            accountInfo[account].tokensDistributedToAccount;\r\n\r\n        return pendingRewards;\r\n    }\r\n}"
    },
    "contracts/interfaces/ILooksRareToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ILooksRareToken is IERC20 {\r\n    function SUPPLY_CAP() external view returns (uint256);\r\n\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n}"
    },
    "contracts/stargate/StargateFeeLibrary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\nimport \"../interfaces/IStargateFeeLibrary.sol\";\r\nimport \"./Pool.sol\";\r\nimport \"./Factory.sol\";\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract StargateFeeLibraryV02 is IStargateFeeLibrary, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // VARIABLES\r\n\r\n    // equilibrium func params. all in BPs * 10 ^ 2, i.e. 1 % = 10 ^ 6 units\r\n    uint256 public constant DENOMINATOR = 1e18;\r\n    uint256 public constant DELTA_1 = 6000 * 1e14;\r\n    uint256 public constant DELTA_2 = 500 * 1e14;\r\n    uint256 public constant LAMBDA_1 = 40 * 1e14;\r\n    uint256 public constant LAMBDA_2 = 9960 * 1e14;\r\n    uint256 public constant LP_FEE = 45 * 1e13;\r\n    uint256 public constant PROTOCOL_FEE = 15 * 1e13;\r\n    uint256 public constant PROTOCOL_SUBSIDY = 3 * 1e13;\r\n\r\n    Factory public immutable factory;\r\n\r\n    constructor(address _factory) {\r\n        require(_factory != address(0x0), \"FeeLibrary: Factory cannot be 0x0\");\r\n        factory = Factory(_factory);\r\n    }\r\n\r\n    function getFees(\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        uint16 _dstChainId,\r\n        address, /*_from*/\r\n        uint256 _amountSD\r\n    ) external view override returns (Pool.SwapObj memory s) {\r\n        // calculate the protocol fee\r\n        s.protocolFee = _amountSD.mul(PROTOCOL_FEE).div(DENOMINATOR);\r\n\r\n        // calculate the equilibrium Fee\r\n        Pool pool = factory.getPool(_srcPoolId);\r\n        Pool.ChainPath memory chainPath = pool.getChainPath(_dstChainId, _dstPoolId);\r\n\r\n        // calculate the equilibrium fee\r\n        (uint256 eqFee, uint256 protocolSubsidy) = _getEquilibriumFee(chainPath.idealBalance, chainPath.balance, _amountSD);\r\n        s.eqFee = eqFee;\r\n        s.protocolFee = s.protocolFee.sub(protocolSubsidy);\r\n\r\n        // calculate the equilibrium reward\r\n        address tokenAddress = pool.token();\r\n        uint256 currentAssetSD = IERC20(tokenAddress).balanceOf(address(pool)).div(pool.convertRate());\r\n        uint256 lpAsset = pool.totalLiquidity();\r\n        if (lpAsset > currentAssetSD) {\r\n            // in deficit\r\n            uint256 poolDeficit = lpAsset.sub(currentAssetSD);\r\n            uint256 rewardPoolSize = pool.eqFeePool();\r\n            // reward capped at rewardPoolSize\r\n            uint256 eqRewards = rewardPoolSize.mul(_amountSD).div(poolDeficit);\r\n            if (eqRewards > rewardPoolSize) {\r\n                eqRewards = rewardPoolSize;\r\n            }\r\n            s.eqReward = eqRewards;\r\n        }\r\n\r\n        // calculate the LP fee.\r\n        s.lpFee = _amountSD.mul(LP_FEE).div(DENOMINATOR);\r\n\r\n        return s;\r\n    }\r\n\r\n    function getEquilibriumFee(\r\n        uint256 idealBalance,\r\n        uint256 beforeBalance,\r\n        uint256 amountSD\r\n    ) external pure returns (uint256, uint256) {\r\n        return _getEquilibriumFee(idealBalance, beforeBalance, amountSD);\r\n    }\r\n\r\n    function getTrapezoidArea(\r\n        uint256 lambda,\r\n        uint256 yOffset,\r\n        uint256 xUpperBound,\r\n        uint256 xLowerBound,\r\n        uint256 xStart,\r\n        uint256 xEnd\r\n    ) external pure returns (uint256) {\r\n        return _getTrapezoidArea(lambda, yOffset, xUpperBound, xLowerBound, xStart, xEnd);\r\n    }\r\n\r\n    function _getEquilibriumFee(\r\n        uint256 idealBalance,\r\n        uint256 beforeBalance,\r\n        uint256 amountSD\r\n    ) internal pure returns (uint256, uint256) {\r\n        require(beforeBalance >= amountSD, \"Stargate: not enough balance\");\r\n        uint256 afterBalance = beforeBalance.sub(amountSD);\r\n\r\n        uint256 safeZoneMax = idealBalance.mul(DELTA_1).div(DENOMINATOR);\r\n        uint256 safeZoneMin = idealBalance.mul(DELTA_2).div(DENOMINATOR);\r\n\r\n        uint256 eqFee = 0;\r\n        uint256 protocolSubsidy = 0;\r\n\r\n        if (afterBalance >= safeZoneMax) {\r\n            // no fee zone, protocol subsidize it.\r\n            eqFee = amountSD.mul(PROTOCOL_SUBSIDY).div(DENOMINATOR);\r\n            protocolSubsidy = eqFee;\r\n        } else if (afterBalance >= safeZoneMin) {\r\n            // safe zone\r\n            uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\r\n            eqFee = _getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, afterBalance);\r\n        } else {\r\n            // danger zone\r\n            if (beforeBalance >= safeZoneMin) {\r\n                // across 2 or 3 zones\r\n                // part 1\r\n                uint256 proxyBeforeBalance = beforeBalance < safeZoneMax ? beforeBalance : safeZoneMax;\r\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_1, 0, safeZoneMax, safeZoneMin, proxyBeforeBalance, safeZoneMin));\r\n                // part 2\r\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, safeZoneMin, afterBalance));\r\n            } else {\r\n                // only in danger zone\r\n                // part 2 only\r\n                eqFee = eqFee.add(_getTrapezoidArea(LAMBDA_2, LAMBDA_1, safeZoneMin, 0, beforeBalance, afterBalance));\r\n            }\r\n        }\r\n        return (eqFee, protocolSubsidy);\r\n    }\r\n\r\n    function _getTrapezoidArea(\r\n        uint256 lambda,\r\n        uint256 yOffset,\r\n        uint256 xUpperBound,\r\n        uint256 xLowerBound,\r\n        uint256 xStart,\r\n        uint256 xEnd\r\n    ) internal pure returns (uint256) {\r\n        require(xEnd >= xLowerBound && xStart <= xUpperBound, \"Stargate: balance out of bound\");\r\n        uint256 xBoundWidth = xUpperBound.sub(xLowerBound);\r\n\r\n        // xStartDrift = xUpperBound.sub(xStart);\r\n        uint256 yStart = xUpperBound.sub(xStart).mul(lambda).div(xBoundWidth).add(yOffset);\r\n\r\n        // xEndDrift = xUpperBound.sub(xEnd)\r\n        uint256 yEnd = xUpperBound.sub(xEnd).mul(lambda).div(xBoundWidth).add(yOffset);\r\n\r\n        // compute the area\r\n        uint256 deltaX = xStart.sub(xEnd);\r\n        return yStart.add(yEnd).mul(deltaX).div(2).div(DENOMINATOR);\r\n    }\r\n\r\n    function getVersion() external pure override returns (string memory) {\r\n        return \"2.0.0\";\r\n    }\r\n}"
    },
    "contracts/interfaces/IStargateFeeLibrary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.2;\r\npragma abicoder v2;\r\nimport \"../stargate/Pool.sol\";\r\n\r\ninterface IStargateFeeLibrary {\r\n    function getFees(\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        uint16 _dstChainId,\r\n        address _from,\r\n        uint256 _amountSD\r\n    ) external returns (Pool.SwapObj memory s);\r\n\r\n    function getVersion() external view returns (string memory);\r\n}"
    },
    "contracts/stargate/Pool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.2;\r\npragma abicoder v2;\r\n\r\n// imports\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./LPTokenERC20.sol\";\r\nimport \"../interfaces/IStargateFeeLibrary.sol\";\r\n\r\n// libraries\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n/// Pool contracts on other chains and managed by the Stargate protocol.\r\ncontract Pool is LPTokenERC20, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // CONSTANTS\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n    uint256 public constant BP_DENOMINATOR = 10000;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // STRUCTS\r\n    struct ChainPath {\r\n        bool ready; // indicate if the counter chainPath has been created.\r\n        uint16 dstChainId;\r\n        uint256 dstPoolId;\r\n        uint256 weight;\r\n        uint256 balance;\r\n        uint256 lkb;\r\n        uint256 credits;\r\n        uint256 idealBalance;\r\n    }\r\n\r\n    struct SwapObj {\r\n        uint256 amount;\r\n        uint256 eqFee;\r\n        uint256 eqReward;\r\n        uint256 lpFee;\r\n        uint256 protocolFee;\r\n        uint256 lkbRemove;\r\n    }\r\n\r\n    struct CreditObj {\r\n        uint256 credits;\r\n        uint256 idealBalance;\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // VARIABLES\r\n\r\n    // chainPath\r\n    ChainPath[] public chainPaths; // list of connected chains with shared pools\r\n    mapping(uint16 => mapping(uint256 => uint256)) public chainPathIndexLookup; // lookup for chainPath by chainId => poolId =>index\r\n\r\n    // metadata\r\n    uint256 public immutable poolId; // shared id between chains to represent same pool\r\n    uint256 public sharedDecimals; // the shared decimals (lowest common decimals between chains)\r\n    uint256 public localDecimals; // the decimals for the token\r\n    uint256 public immutable convertRate; // the decimals for the token\r\n    address public immutable token; // the token for the pool\r\n    address public immutable router; // the token for the pool\r\n\r\n    bool public stopSwap; // flag to stop swapping in extreme cases\r\n\r\n    // Fee and Liquidity\r\n    uint256 public totalLiquidity; // the total amount of tokens added on this side of the chain (fees + deposits - withdrawals)\r\n    uint256 public totalWeight; // total weight for pool percentages\r\n    uint256 public mintFeeBP; // fee basis points for the mint/deposit\r\n    uint256 public protocolFeeBalance; // fee balance created from dao fee\r\n    uint256 public mintFeeBalance; // fee balance created from mint fee\r\n    uint256 public eqFeePool; // pool rewards in Shared Decimal format. indicate the total budget for reverse swap incentive\r\n    address public feeLibrary; // address for retrieving fee params for swaps\r\n\r\n    // Delta related\r\n    uint256 public deltaCredit; // credits accumulated from txn\r\n    bool public batched; // flag to indicate if we want batch processing.\r\n    bool public defaultSwapMode; // flag for the default mode for swap\r\n    bool public defaultLPMode; // flag for the default mode for lp\r\n    uint256 public swapDeltaBP; // basis points of poolCredits to activate Delta in swap\r\n    uint256 public lpDeltaBP; // basis points of poolCredits to activate Delta in liquidity events\r\n\r\n    //---------------------------------------------------------------------------\r\n    // EVENTS\r\n    event Mint(address to, uint256 amountLP, uint256 amountSD, uint256 mintFeeAmountSD);\r\n    event Burn(address from, uint256 amountLP, uint256 amountSD);\r\n    event RedeemLocalCallback(address _to, uint256 _amountSD, uint256 _amountToMintSD);\r\n    event Swap(\r\n        uint16 chainId,\r\n        uint256 dstPoolId,\r\n        address from,\r\n        uint256 amountSD,\r\n        uint256 eqReward,\r\n        uint256 eqFee,\r\n        uint256 protocolFee,\r\n        uint256 lpFee\r\n    );\r\n    event SendCredits(uint16 dstChainId, uint256 dstPoolId, uint256 credits, uint256 idealBalance);\r\n    event RedeemRemote(uint16 chainId, uint256 dstPoolId, address from, uint256 amountLP, uint256 amountSD);\r\n    event RedeemLocal(address from, uint256 amountLP, uint256 amountSD, uint16 chainId, uint256 dstPoolId, bytes to);\r\n    event InstantRedeemLocal(address from, uint256 amountLP, uint256 amountSD, address to);\r\n    event CreditChainPath(uint16 chainId, uint256 srcPoolId, uint256 amountSD, uint256 idealBalance);\r\n    event SwapRemote(address to, uint256 amountSD, uint256 protocolFee, uint256 dstFee);\r\n    event WithdrawRemote(uint16 srcChainId, uint256 srcPoolId, uint256 swapAmount, uint256 mintAmount);\r\n    event ChainPathUpdate(uint16 dstChainId, uint256 dstPoolId, uint256 weight);\r\n    event FeesUpdated(uint256 mintFeeBP);\r\n    event FeeLibraryUpdated(address feeLibraryAddr);\r\n    event StopSwapUpdated(bool swapStop);\r\n    event WithdrawProtocolFeeBalance(address to, uint256 amountSD);\r\n    event WithdrawMintFeeBalance(address to, uint256 amountSD);\r\n    event DeltaParamUpdated(bool batched, uint256 swapDeltaBP, uint256 lpDeltaBP, bool defaultSwapMode, bool defaultLPMode);\r\n\r\n    //---------------------------------------------------------------------------\r\n    // MODIFIERS\r\n    modifier onlyRouter() {\r\n        require(msg.sender == router, \"Stargate: only the router can call this method\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _poolId,\r\n        address _router,\r\n        address _token,\r\n        uint256 _sharedDecimals,\r\n        uint256 _localDecimals,\r\n        address _feeLibrary,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) LPTokenERC20(_name, _symbol) {\r\n        require(_token != address(0x0), \"Stargate: _token cannot be 0x0\");\r\n        require(_router != address(0x0), \"Stargate: _router cannot be 0x0\");\r\n        poolId = _poolId;\r\n        router = _router;\r\n        token = _token;\r\n        sharedDecimals = _sharedDecimals;\r\n        decimals = uint8(_sharedDecimals);\r\n        localDecimals = _localDecimals;\r\n        convertRate = 10**(uint256(localDecimals).sub(sharedDecimals));\r\n        totalWeight = 0;\r\n        feeLibrary = _feeLibrary;\r\n\r\n        //delta algo related\r\n        batched = false;\r\n        defaultSwapMode = true;\r\n        defaultLPMode = true;\r\n    }\r\n\r\n    function getChainPathsLength() public view returns (uint256) {\r\n        return chainPaths.length;\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // LOCAL CHAIN FUNCTIONS\r\n\r\n    function mint(address _to, uint256 _amountLD) external nonReentrant onlyRouter returns (uint256) {\r\n        return _mintLocal(_to, _amountLD, true, true);\r\n    }\r\n\r\n    // Local                                    Remote\r\n    // -------                                  ---------\r\n    // swap             ->                      swapRemote\r\n    function swap(\r\n        uint16 _dstChainId,\r\n        uint256 _dstPoolId,\r\n        address _from,\r\n        uint256 _amountLD,\r\n        uint256 _minAmountLD,\r\n        bool newLiquidity\r\n    ) external nonReentrant onlyRouter returns (SwapObj memory) {\r\n        require(!stopSwap, \"Stargate: swap func stopped\");\r\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\r\n        require(cp.ready == true, \"Stargate: counter chainPath is not ready\");\r\n\r\n        uint256 amountSD = amountLDtoSD(_amountLD);\r\n        uint256 minAmountSD = amountLDtoSD(_minAmountLD);\r\n\r\n        // request fee params from library\r\n        SwapObj memory s = IStargateFeeLibrary(feeLibrary).getFees(poolId, _dstPoolId, _dstChainId, _from, amountSD);\r\n\r\n        // equilibrium fee and reward. note eqFee/eqReward are separated from swap liquidity\r\n        eqFeePool = eqFeePool.sub(s.eqReward);\r\n        // update the new amount the user gets minus the fees\r\n        s.amount = amountSD.sub(s.eqFee).sub(s.protocolFee).sub(s.lpFee);\r\n        // users will also get the eqReward\r\n        require(s.amount.add(s.eqReward) >= minAmountSD, \"Stargate: slippage too high\");\r\n\r\n        // behaviours\r\n        //     - protocolFee: booked, stayed and withdrawn at remote.\r\n        //     - eqFee: booked, stayed and withdrawn at remote.\r\n        //     - lpFee: booked and stayed at remote, can be withdrawn anywhere\r\n\r\n        s.lkbRemove = amountSD.sub(s.lpFee).add(s.eqReward);\r\n        // check for transfer solvency.\r\n        require(cp.balance >= s.lkbRemove, \"Stargate: dst balance too low\");\r\n        cp.balance = cp.balance.sub(s.lkbRemove);\r\n\r\n        if (newLiquidity) {\r\n            deltaCredit = deltaCredit.add(amountSD).add(s.eqReward);\r\n        } else if (s.eqReward > 0) {\r\n            deltaCredit = deltaCredit.add(s.eqReward);\r\n        }\r\n\r\n        // distribute credits on condition.\r\n        if (!batched || deltaCredit >= totalLiquidity.mul(swapDeltaBP).div(BP_DENOMINATOR)) {\r\n            _delta(defaultSwapMode);\r\n        }\r\n\r\n        emit Swap(_dstChainId, _dstPoolId, _from, s.amount, s.eqReward, s.eqFee, s.protocolFee, s.lpFee);\r\n        return s;\r\n    }\r\n\r\n    // Local                                    Remote\r\n    // -------                                  ---------\r\n    // sendCredits      ->                      creditChainPath\r\n    function sendCredits(uint16 _dstChainId, uint256 _dstPoolId) external nonReentrant onlyRouter returns (CreditObj memory c) {\r\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\r\n        require(cp.ready == true, \"Stargate: counter chainPath is not ready\");\r\n        cp.lkb = cp.lkb.add(cp.credits);\r\n        c.idealBalance = totalLiquidity.mul(cp.weight).div(totalWeight);\r\n        c.credits = cp.credits;\r\n        cp.credits = 0;\r\n        emit SendCredits(_dstChainId, _dstPoolId, c.credits, c.idealBalance);\r\n    }\r\n\r\n    // Local                                    Remote\r\n    // -------                                  ---------\r\n    // redeemRemote   ->                        swapRemote\r\n    function redeemRemote(\r\n        uint16 _dstChainId,\r\n        uint256 _dstPoolId,\r\n        address _from,\r\n        uint256 _amountLP\r\n    ) external nonReentrant onlyRouter {\r\n        require(_from != address(0x0), \"Stargate: _from cannot be 0x0\");\r\n        uint256 amountSD = _burnLocal(_from, _amountLP);\r\n        //run Delta\r\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\r\n            _delta(defaultLPMode);\r\n        }\r\n        uint256 amountLD = amountSDtoLD(amountSD);\r\n        emit RedeemRemote(_dstChainId, _dstPoolId, _from, _amountLP, amountLD);\r\n    }\r\n\r\n    function instantRedeemLocal(\r\n        address _from,\r\n        uint256 _amountLP,\r\n        address _to\r\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\r\n        require(_from != address(0x0), \"Stargate: _from cannot be 0x0\");\r\n        uint256 _deltaCredit = deltaCredit; // sload optimization.\r\n        uint256 _capAmountLP = _amountSDtoLP(_deltaCredit);\r\n\r\n        if (_amountLP > _capAmountLP) _amountLP = _capAmountLP;\r\n\r\n        amountSD = _burnLocal(_from, _amountLP);\r\n        deltaCredit = _deltaCredit.sub(amountSD);\r\n        uint256 amountLD = amountSDtoLD(amountSD);\r\n        _safeTransfer(token, _to, amountLD);\r\n        emit InstantRedeemLocal(_from, _amountLP, amountSD, _to);\r\n    }\r\n\r\n    // Local                                    Remote\r\n    // -------                                  ---------\r\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\r\n    // redeemLocalCallback             <-\r\n    function redeemLocal(\r\n        address _from,\r\n        uint256 _amountLP,\r\n        uint16 _dstChainId,\r\n        uint256 _dstPoolId,\r\n        bytes calldata _to\r\n    ) external nonReentrant onlyRouter returns (uint256 amountSD) {\r\n        require(_from != address(0x0), \"Stargate: _from cannot be 0x0\");\r\n\r\n        // safeguard.\r\n        require(chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]].ready == true, \"Stargate: counter chainPath is not ready\");\r\n        amountSD = _burnLocal(_from, _amountLP);\r\n\r\n        // run Delta\r\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\r\n            _delta(false);\r\n        }\r\n        emit RedeemLocal(_from, _amountLP, amountSD, _dstChainId, _dstPoolId, _to);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // REMOTE CHAIN FUNCTIONS\r\n\r\n    // Local                                    Remote\r\n    // -------                                  ---------\r\n    // sendCredits      ->                      creditChainPath\r\n    function creditChainPath(\r\n        uint16 _dstChainId,\r\n        uint256 _dstPoolId,\r\n        CreditObj memory _c\r\n    ) external nonReentrant onlyRouter {\r\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\r\n        cp.balance = cp.balance.add(_c.credits);\r\n        if (cp.idealBalance != _c.idealBalance) {\r\n            cp.idealBalance = _c.idealBalance;\r\n        }\r\n        emit CreditChainPath(_dstChainId, _dstPoolId, _c.credits, _c.idealBalance);\r\n    }\r\n\r\n    // Local                                    Remote\r\n    // -------                                  ---------\r\n    // swap             ->                      swapRemote\r\n    function swapRemote(\r\n        uint16 _srcChainId,\r\n        uint256 _srcPoolId,\r\n        address _to,\r\n        SwapObj memory _s\r\n    ) external nonReentrant onlyRouter returns (uint256 amountLD) {\r\n        // booking lpFee\r\n        totalLiquidity = totalLiquidity.add(_s.lpFee);\r\n        // booking eqFee\r\n        eqFeePool = eqFeePool.add(_s.eqFee);\r\n        // booking stargateFee\r\n        protocolFeeBalance = protocolFeeBalance.add(_s.protocolFee);\r\n\r\n        // update LKB\r\n        uint256 chainPathIndex = chainPathIndexLookup[_srcChainId][_srcPoolId];\r\n        chainPaths[chainPathIndex].lkb = chainPaths[chainPathIndex].lkb.sub(_s.lkbRemove);\r\n\r\n        // user receives the amount + the srcReward\r\n        amountLD = amountSDtoLD(_s.amount.add(_s.eqReward));\r\n        _safeTransfer(token, _to, amountLD);\r\n        emit SwapRemote(_to, _s.amount.add(_s.eqReward), _s.protocolFee, _s.eqFee);\r\n    }\r\n    \r\n\r\n    // Local                                    Remote\r\n    // -------                                  ---------\r\n    // redeemLocal   ->                         redeemLocalCheckOnRemote\r\n    // redeemLocalCallback             <-\r\n    function redeemLocalCallback(\r\n        uint16 _srcChainId,\r\n        uint256 _srcPoolId,\r\n        address _to,\r\n        uint256 _amountSD,\r\n        uint256 _amountToMintSD\r\n    ) external nonReentrant onlyRouter {\r\n        if (_amountToMintSD > 0) {\r\n            _mintLocal(_to, amountSDtoLD(_amountToMintSD), false, false);\r\n        }\r\n\r\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\r\n        cp.lkb = cp.lkb.sub(_amountSD);\r\n\r\n        uint256 amountLD = amountSDtoLD(_amountSD);\r\n        _safeTransfer(token, _to, amountLD);\r\n        emit RedeemLocalCallback(_to, _amountSD, _amountToMintSD);\r\n    }\r\n\r\n    // Local                                    Remote\r\n    // -------                                  ---------\r\n    // redeemLocal(amount)   ->               redeemLocalCheckOnRemote\r\n    // redeemLocalCallback             <-\r\n    function redeemLocalCheckOnRemote(\r\n        uint16 _srcChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _amountSD\r\n    ) external nonReentrant onlyRouter returns (uint256 swapAmount, uint256 mintAmount) {\r\n        ChainPath storage cp = getAndCheckCP(_srcChainId, _srcPoolId);\r\n        if (_amountSD > cp.balance) {\r\n            mintAmount = _amountSD - cp.balance;\r\n            swapAmount = cp.balance;\r\n            cp.balance = 0;\r\n        } else {\r\n            cp.balance = cp.balance.sub(_amountSD);\r\n            swapAmount = _amountSD;\r\n            mintAmount = 0;\r\n        }\r\n        emit WithdrawRemote(_srcChainId, _srcPoolId, swapAmount, mintAmount);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // DAO Calls\r\n    function createChainPath(\r\n        uint16 _dstChainId,\r\n        uint256 _dstPoolId,\r\n        uint256 _weight\r\n    ) external onlyRouter {\r\n        for (uint256 i = 0; i < chainPaths.length; ++i) {\r\n            ChainPath memory cp = chainPaths[i];\r\n            bool exists = cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId;\r\n            require(!exists, \"Stargate: cant createChainPath of existing dstChainId and _dstPoolId\");\r\n        }\r\n        totalWeight = totalWeight.add(_weight);\r\n        chainPathIndexLookup[_dstChainId][_dstPoolId] = chainPaths.length;\r\n        chainPaths.push(ChainPath(false, _dstChainId, _dstPoolId, _weight, 0, 0, 0, 0));\r\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\r\n    }\r\n\r\n    function setWeightForChainPath(\r\n        uint16 _dstChainId,\r\n        uint256 _dstPoolId,\r\n        uint16 _weight\r\n    ) external onlyRouter {\r\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\r\n        totalWeight = totalWeight.sub(cp.weight).add(_weight);\r\n        cp.weight = _weight;\r\n        emit ChainPathUpdate(_dstChainId, _dstPoolId, _weight);\r\n    }\r\n\r\n    function setFee(uint256 _mintFeeBP) external onlyRouter {\r\n        require(_mintFeeBP <= BP_DENOMINATOR, \"Bridge: cum fees > 100%\");\r\n        mintFeeBP = _mintFeeBP;\r\n        emit FeesUpdated(mintFeeBP);\r\n    }\r\n\r\n    function setFeeLibrary(address _feeLibraryAddr) external onlyRouter {\r\n        require(_feeLibraryAddr != address(0x0), \"Stargate: fee library cant be 0x0\");\r\n        feeLibrary = _feeLibraryAddr;\r\n        emit FeeLibraryUpdated(_feeLibraryAddr);\r\n    }\r\n\r\n    function setSwapStop(bool _swapStop) external onlyRouter {\r\n        stopSwap = _swapStop;\r\n        emit StopSwapUpdated(_swapStop);\r\n    }\r\n\r\n    function setDeltaParam(\r\n        bool _batched,\r\n        uint256 _swapDeltaBP,\r\n        uint256 _lpDeltaBP,\r\n        bool _defaultSwapMode,\r\n        bool _defaultLPMode\r\n    ) external onlyRouter {\r\n        require(_swapDeltaBP <= BP_DENOMINATOR && _lpDeltaBP <= BP_DENOMINATOR, \"Stargate: wrong Delta param\");\r\n        batched = _batched;\r\n        swapDeltaBP = _swapDeltaBP;\r\n        lpDeltaBP = _lpDeltaBP;\r\n        defaultSwapMode = _defaultSwapMode;\r\n        defaultLPMode = _defaultLPMode;\r\n        emit DeltaParamUpdated(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\r\n    }\r\n\r\n    function callDelta(bool _fullMode) external onlyRouter {\r\n        _delta(_fullMode);\r\n    }\r\n\r\n    function activateChainPath(uint16 _dstChainId, uint256 _dstPoolId) external onlyRouter {\r\n        ChainPath storage cp = getAndCheckCP(_dstChainId, _dstPoolId);\r\n        require(cp.ready == false, \"Stargate: chainPath is already active\");\r\n        // this func will only be called once\r\n        cp.ready = true;\r\n    }\r\n\r\n    function withdrawProtocolFeeBalance(address _to) external onlyRouter {\r\n        if (protocolFeeBalance > 0) {\r\n            uint256 amountOfLD = amountSDtoLD(protocolFeeBalance);\r\n            protocolFeeBalance = 0;\r\n            _safeTransfer(token, _to, amountOfLD);\r\n            emit WithdrawProtocolFeeBalance(_to, amountOfLD);\r\n        }\r\n    }\r\n\r\n    function withdrawMintFeeBalance(address _to) external onlyRouter {\r\n        if (mintFeeBalance > 0) {\r\n            uint256 amountOfLD = amountSDtoLD(mintFeeBalance);\r\n            mintFeeBalance = 0;\r\n            _safeTransfer(token, _to, amountOfLD);\r\n            emit WithdrawMintFeeBalance(_to, amountOfLD);\r\n        }\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // INTERNAL\r\n    // Conversion Helpers\r\n    //---------------------------------------------------------------------------\r\n    function amountLPtoLD(uint256 _amountLP) external view returns (uint256) {\r\n        return amountSDtoLD(_amountLPtoSD(_amountLP));\r\n    }\r\n\r\n    function _amountLPtoSD(uint256 _amountLP) internal view returns (uint256) {\r\n        require(totalSupply > 0, \"Stargate: cant convert LPtoSD when totalSupply == 0\");\r\n        return _amountLP.mul(totalLiquidity).div(totalSupply);\r\n    }\r\n\r\n    function _amountSDtoLP(uint256 _amountSD) internal view returns (uint256) {\r\n        require(totalLiquidity > 0, \"Stargate: cant convert SDtoLP when totalLiq == 0\");\r\n        return _amountSD.mul(totalSupply).div(totalLiquidity);\r\n    }\r\n\r\n    function amountSDtoLD(uint256 _amount) internal view returns (uint256) {\r\n        return _amount.mul(convertRate);\r\n    }\r\n\r\n    function amountLDtoSD(uint256 _amount) internal view returns (uint256) {\r\n        return _amount.div(convertRate);\r\n    }\r\n\r\n    function getAndCheckCP(uint16 _dstChainId, uint256 _dstPoolId) internal view returns (ChainPath storage) {\r\n        require(chainPaths.length > 0, \"Stargate: no chainpaths exist\");\r\n        ChainPath storage cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\r\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \"Stargate: local chainPath does not exist\");\r\n        return cp;\r\n    }\r\n\r\n    function getChainPath(uint16 _dstChainId, uint256 _dstPoolId) external view returns (ChainPath memory) {\r\n        ChainPath memory cp = chainPaths[chainPathIndexLookup[_dstChainId][_dstPoolId]];\r\n        require(cp.dstChainId == _dstChainId && cp.dstPoolId == _dstPoolId, \"Stargate: local chainPath does not exist\");\r\n        return cp;\r\n    }\r\n\r\n    function _burnLocal(address _from, uint256 _amountLP) internal returns (uint256) {\r\n        require(totalSupply > 0, \"Stargate: cant burn when totalSupply == 0\");\r\n        uint256 amountOfLPTokens = balanceOf[_from];\r\n        require(amountOfLPTokens >= _amountLP, \"Stargate: not enough LP tokens to burn\");\r\n\r\n        uint256 amountSD = _amountLP.mul(totalLiquidity).div(totalSupply);\r\n        //subtract totalLiquidity accordingly\r\n        totalLiquidity = totalLiquidity.sub(amountSD);\r\n\r\n        _burn(_from, _amountLP);\r\n        emit Burn(_from, _amountLP, amountSD);\r\n        return amountSD;\r\n    }\r\n\r\n    function _delta(bool fullMode) internal {\r\n        if (deltaCredit > 0 && totalWeight > 0) {\r\n            uint256 cpLength = chainPaths.length;\r\n            uint256[] memory deficit = new uint256[](cpLength);\r\n            uint256 totalDeficit = 0;\r\n\r\n            // algorithm steps 6-9: calculate the total and the amounts required to get to balance state\r\n            for (uint256 i = 0; i < cpLength; ++i) {\r\n                ChainPath storage cp = chainPaths[i];\r\n                // (liquidity * (weight/totalWeight)) - (lkb+credits)\r\n                uint256 balLiq = totalLiquidity.mul(cp.weight).div(totalWeight);\r\n                uint256 currLiq = cp.lkb.add(cp.credits);\r\n                if (balLiq > currLiq) {\r\n                    // save gas since we know balLiq > currLiq and we know deficit[i] > 0\r\n                    deficit[i] = balLiq - currLiq;\r\n                    totalDeficit = totalDeficit.add(deficit[i]);\r\n                }\r\n            }\r\n\r\n            // indicates how much delta credit is distributed\r\n            uint256 spent;\r\n\r\n            // handle credits with 2 tranches. the [ < totalDeficit] [excessCredit]\r\n            // run full Delta, allocate all credits\r\n            if (totalDeficit == 0) {\r\n                // only fullMode delta will allocate excess credits\r\n                if (fullMode && deltaCredit > 0) {\r\n                    // credit ChainPath by weights\r\n                    for (uint256 i = 0; i < cpLength; ++i) {\r\n                        ChainPath storage cp = chainPaths[i];\r\n                        // credits = credits + toBalanceChange + remaining allocation based on weight\r\n                        uint256 amtToCredit = deltaCredit.mul(cp.weight).div(totalWeight);\r\n                        spent = spent.add(amtToCredit);\r\n                        cp.credits = cp.credits.add(amtToCredit);\r\n                    }\r\n                } // else do nth\r\n            } else if (totalDeficit <= deltaCredit) {\r\n                if (fullMode) {\r\n                    // algorithm step 13: calculate amount to disperse to bring to balance state or as close as possible\r\n                    uint256 excessCredit = deltaCredit - totalDeficit;\r\n                    // algorithm steps 14-16: calculate credits\r\n                    for (uint256 i = 0; i < cpLength; ++i) {\r\n                        if (deficit[i] > 0) {\r\n                            ChainPath storage cp = chainPaths[i];\r\n                            // credits = credits + deficit + remaining allocation based on weight\r\n                            uint256 amtToCredit = deficit[i].add(excessCredit.mul(cp.weight).div(totalWeight));\r\n                            spent = spent.add(amtToCredit);\r\n                            cp.credits = cp.credits.add(amtToCredit);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // totalDeficit <= deltaCredit but not running fullMode\r\n                    // credit chainPaths as is if any deficit, not using all deltaCredit\r\n                    for (uint256 i = 0; i < cpLength; ++i) {\r\n                        if (deficit[i] > 0) {\r\n                            ChainPath storage cp = chainPaths[i];\r\n                            uint256 amtToCredit = deficit[i];\r\n                            spent = spent.add(amtToCredit);\r\n                            cp.credits = cp.credits.add(amtToCredit);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // totalDeficit > deltaCredit, fullMode or not, normalize the deficit by deltaCredit\r\n                for (uint256 i = 0; i < cpLength; ++i) {\r\n                    if (deficit[i] > 0) {\r\n                        ChainPath storage cp = chainPaths[i];\r\n                        uint256 proportionalDeficit = deficit[i].mul(deltaCredit).div(totalDeficit);\r\n                        spent = spent.add(proportionalDeficit);\r\n                        cp.credits = cp.credits.add(proportionalDeficit);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // deduct the amount of credit sent\r\n            deltaCredit = deltaCredit.sub(spent);\r\n        }\r\n    }\r\n\r\n    function _mintLocal(\r\n        address _to,\r\n        uint256 _amountLD,\r\n        bool _feesEnabled,\r\n        bool _creditDelta\r\n    ) internal returns (uint256 amountSD) {\r\n        require(totalWeight > 0, \"Stargate: No ChainPaths exist\");\r\n        amountSD = amountLDtoSD(_amountLD);\r\n\r\n        uint256 mintFeeSD = 0;\r\n        if (_feesEnabled) {\r\n            mintFeeSD = amountSD.mul(mintFeeBP).div(BP_DENOMINATOR);\r\n            amountSD = amountSD.sub(mintFeeSD);\r\n            mintFeeBalance = mintFeeBalance.add(mintFeeSD);\r\n        }\r\n\r\n        if (_creditDelta) {\r\n            deltaCredit = deltaCredit.add(amountSD);\r\n        }\r\n\r\n        uint256 amountLPTokens = amountSD;\r\n        if (totalSupply != 0) {\r\n            amountLPTokens = amountSD.mul(totalSupply).div(totalLiquidity);\r\n        }\r\n        totalLiquidity = totalLiquidity.add(amountSD);\r\n\r\n        _mint(_to, amountLPTokens);\r\n        emit Mint(_to, amountLPTokens, amountSD, mintFeeSD);\r\n\r\n        // add to credits and call delta. short circuit to save gas\r\n        if (!batched || deltaCredit > totalLiquidity.mul(lpDeltaBP).div(BP_DENOMINATOR)) {\r\n            _delta(defaultLPMode);\r\n        }\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address _token,\r\n        address _to,\r\n        uint256 _value\r\n    ) private {\r\n        (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(SELECTOR, _to, _value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"Stargate: TRANSFER_FAILED\");\r\n    }\r\n}"
    },
    "contracts/stargate/Factory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.2;\r\npragma abicoder v2;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./Pool.sol\";\r\n\r\ncontract Factory is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // VARIABLES\r\n    mapping(uint256 => Pool) public getPool; // poolId -> PoolInfo\r\n    address[] public allPools;\r\n    address public immutable router;\r\n    address public defaultFeeLibrary; // address for retrieving fee params for swaps\r\n\r\n    //---------------------------------------------------------------------------\r\n    // MODIFIERS\r\n    modifier onlyRouter() {\r\n        require(msg.sender == router, \"Stargate: caller must be Router.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _router) {\r\n        require(_router != address(0x0), \"Stargate: _router cant be 0x0\"); // 1 time only\r\n        router = _router;\r\n    }\r\n\r\n    function setDefaultFeeLibrary(address _defaultFeeLibrary) external onlyOwner {\r\n        require(_defaultFeeLibrary != address(0x0), \"Stargate: fee library cant be 0x0\");\r\n        defaultFeeLibrary = _defaultFeeLibrary;\r\n    }\r\n\r\n    function allPoolsLength() external view returns (uint256) {\r\n        return allPools.length;\r\n    }\r\n\r\n    function createPool(\r\n        uint256 _poolId,\r\n        address _token,\r\n        uint8 _sharedDecimals,\r\n        uint8 _localDecimals,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) public onlyRouter returns (address poolAddress) {\r\n        require(address(getPool[_poolId]) == address(0x0), \"Stargate: Pool already created\");\r\n\r\n        Pool pool = new Pool(_poolId, router, _token, _sharedDecimals, _localDecimals, defaultFeeLibrary, _name, _symbol);\r\n        getPool[_poolId] = pool;\r\n        poolAddress = address(pool);\r\n        allPools.push(poolAddress);\r\n    }\r\n\r\n    function renounceOwnership() public override onlyOwner {}\r\n}"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/stargate/LPTokenERC20.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.2;\r\n\r\n// libraries\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract LPTokenERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // CONSTANTS\r\n    string public name;\r\n    string public symbol;\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    // set in constructor\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // VARIABLES\r\n    uint256 public decimals;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // EVENTS\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != type(uint256).max) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(deadline >= block.timestamp, \"Bridge: EXPIRED\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"Bridge: INVALID_SIGNATURE\");\r\n        _approve(owner, spender, value);\r\n    }\r\n}"
    },
    "contracts/stargate/Router.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\n// imports\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./Factory.sol\";\r\nimport \"./Pool.sol\";\r\nimport \"./Bridge.sol\";\r\n\r\n// interfaces\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../interfaces/IStargateRouter.sol\";\r\nimport \"../interfaces/IStargateReceiver.sol\";\r\n\r\n// libraries\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract Router is IStargateRouter, Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // CONSTANTS\r\n    uint8 internal constant TYPE_REDEEM_LOCAL_RESPONSE = 1;\r\n    uint8 internal constant TYPE_REDEEM_LOCAL_CALLBACK_RETRY = 2;\r\n    uint8 internal constant TYPE_SWAP_REMOTE_RETRY = 3;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // STRUCTS\r\n    struct CachedSwap {\r\n        address token;\r\n        uint256 amountLD;\r\n        address to;\r\n        bytes payload;\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // VARIABLES\r\n    Factory public factory; // used for creating pools\r\n    address public protocolFeeOwner; // can call methods to pull Stargate fees collected in pools\r\n    address public mintFeeOwner; // can call methods to pull mint fees collected in pools\r\n    Bridge public bridge;\r\n    mapping(uint16 => mapping(bytes => mapping(uint256 => bytes))) public revertLookup; //[chainId][srcAddress][nonce]\r\n    mapping(uint16 => mapping(bytes => mapping(uint256 => CachedSwap))) public cachedSwapLookup; //[chainId][srcAddress][nonce]\r\n\r\n    //---------------------------------------------------------------------------\r\n    // EVENTS\r\n    event Revert(uint8 bridgeFunctionType, uint16 chainId, bytes srcAddress, uint256 nonce);\r\n    event CachedSwapSaved(uint16 chainId, bytes srcAddress, uint256 nonce, address token, uint256 amountLD, address to, bytes payload, bytes reason);\r\n    event RevertRedeemLocal(uint16 srcChainId, uint256 _srcPoolId, uint256 _dstPoolId, bytes to, uint256 redeemAmountSD, uint256 mintAmountSD, uint256 indexed nonce, bytes indexed srcAddress);\r\n    event RedeemLocalCallback(uint16 srcChainId, bytes indexed srcAddress, uint256 indexed nonce, uint256 srcPoolId, uint256 dstPoolId, address to, uint256 amountSD, uint256 mintAmountSD);\r\n\r\n    //---------------------------------------------------------------------------\r\n    // MODIFIERS\r\n    modifier onlyBridge() {\r\n        require(msg.sender == address(bridge), \"Bridge: caller must be Bridge.\");\r\n        _;\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    function setBridgeAndFactory(Bridge _bridge, Factory _factory) external onlyOwner {\r\n        require(address(bridge) == address(0x0) && address(factory) == address(0x0), \"Stargate: bridge and factory already initialized\"); // 1 time only\r\n        require(address(_bridge) != address(0x0), \"Stargate: bridge cant be 0x0\");\r\n        require(address(_factory) != address(0x0), \"Stargate: factory cant be 0x0\");\r\n\r\n        bridge = _bridge;\r\n        factory = _factory;\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // VIEWS\r\n    function _getPool(uint256 _poolId) internal view returns (Pool pool) {\r\n        pool = factory.getPool(_poolId);\r\n        require(address(pool) != address(0x0), \"Stargate: Pool does not exist\");\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // INTERNAL\r\n    function _safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"Stargate: TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // LOCAL CHAIN FUNCTIONS\r\n    function addLiquidity(\r\n        uint256 _poolId,\r\n        uint256 _amountLD,\r\n        address _to\r\n    ) external override nonReentrant {\r\n        Pool pool = _getPool(_poolId);\r\n        uint256 convertRate = pool.convertRate();\r\n        _amountLD = _amountLD.div(convertRate).mul(convertRate);\r\n        _safeTransferFrom(pool.token(), msg.sender, address(pool), _amountLD);\r\n        pool.mint(_to, _amountLD);\r\n    }\r\n\r\n    function swap(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        uint256 _amountLD,\r\n        uint256 _minAmountLD,\r\n        lzTxObj memory _lzTxParams,\r\n        bytes calldata _to,\r\n        bytes calldata _payload\r\n    ) external payable override nonReentrant {\r\n        require(_amountLD > 0, \"Stargate: cannot swap 0\");\r\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\r\n        Pool.SwapObj memory s;\r\n        Pool.CreditObj memory c;\r\n        {\r\n            Pool pool = _getPool(_srcPoolId);\r\n            {\r\n                uint256 convertRate = pool.convertRate();\r\n                _amountLD = _amountLD.div(convertRate).mul(convertRate);\r\n            }\r\n\r\n            s = pool.swap(_dstChainId, _dstPoolId, msg.sender, _amountLD, _minAmountLD, true);\r\n            _safeTransferFrom(pool.token(), msg.sender, address(pool), _amountLD);\r\n            c = pool.sendCredits(_dstChainId, _dstPoolId);\r\n        }\r\n        bridge.swap{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, s, _lzTxParams, _to, _payload);\r\n    }\r\n\r\n    function redeemRemote(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        uint256 _amountLP,\r\n        uint256 _minAmountLD,\r\n        bytes calldata _to,\r\n        lzTxObj memory _lzTxParams\r\n    ) external payable override nonReentrant {\r\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\r\n        require(_amountLP > 0, \"Stargate: not enough lp to redeemRemote\");\r\n        Pool.SwapObj memory s;\r\n        Pool.CreditObj memory c;\r\n        {\r\n            Pool pool = _getPool(_srcPoolId);\r\n            uint256 amountLD = pool.amountLPtoLD(_amountLP);\r\n            // perform a swap with no liquidity\r\n            s = pool.swap(_dstChainId, _dstPoolId, msg.sender, amountLD, _minAmountLD, false);\r\n            pool.redeemRemote(_dstChainId, _dstPoolId, msg.sender, _amountLP);\r\n            c = pool.sendCredits(_dstChainId, _dstPoolId);\r\n        }\r\n        // equal to a swap, with no payload (\"0x\") no dstGasForCall 0\r\n        bridge.swap{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, s, _lzTxParams, _to, \"\");\r\n    }\r\n\r\n    function instantRedeemLocal(\r\n        uint16 _srcPoolId,\r\n        uint256 _amountLP,\r\n        address _to\r\n    ) external override nonReentrant returns (uint256 amountSD) {\r\n        require(_amountLP > 0, \"Stargate: not enough lp to redeem\");\r\n        Pool pool = _getPool(_srcPoolId);\r\n        amountSD = pool.instantRedeemLocal(msg.sender, _amountLP, _to);\r\n    }\r\n\r\n    function redeemLocal(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        uint256 _amountLP,\r\n        bytes calldata _to,\r\n        lzTxObj memory _lzTxParams\r\n    ) external payable override nonReentrant {\r\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\r\n        Pool pool = _getPool(_srcPoolId);\r\n        require(_amountLP > 0, \"Stargate: not enough lp to redeem\");\r\n        uint256 amountSD = pool.redeemLocal(msg.sender, _amountLP, _dstChainId, _dstPoolId, _to);\r\n        require(amountSD > 0, \"Stargate: not enough lp to redeem with amountSD\");\r\n\r\n        Pool.CreditObj memory c = pool.sendCredits(_dstChainId, _dstPoolId);\r\n        bridge.redeemLocal{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c, amountSD, _to, _lzTxParams);\r\n    }\r\n\r\n    function sendCredits(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress\r\n    ) external payable override nonReentrant {\r\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\r\n        Pool pool = _getPool(_srcPoolId);\r\n        Pool.CreditObj memory c = pool.sendCredits(_dstChainId, _dstPoolId);\r\n        bridge.sendCredits{value: msg.value}(_dstChainId, _srcPoolId, _dstPoolId, _refundAddress, c);\r\n    }\r\n\r\n    function quoteLayerZeroFee(\r\n        uint16 _dstChainId,\r\n        uint8 _functionType,\r\n        bytes calldata _toAddress,\r\n        bytes calldata _transferAndCallPayload,\r\n        Router.lzTxObj memory _lzTxParams\r\n    ) external view override returns (uint256, uint256) {\r\n        return bridge.quoteLayerZeroFee(_dstChainId, _functionType, _toAddress, _transferAndCallPayload, _lzTxParams);\r\n    }\r\n\r\n    function revertRedeemLocal(\r\n        uint16 _dstChainId,\r\n        bytes calldata _srcAddress,\r\n        uint256 _nonce,\r\n        address payable _refundAddress,\r\n        lzTxObj memory _lzTxParams\r\n    ) external payable {\r\n        require(_refundAddress != address(0x0), \"Stargate: _refundAddress cannot be 0x0\");\r\n        bytes memory payload = revertLookup[_dstChainId][_srcAddress][_nonce];\r\n        require(payload.length > 0, \"Stargate: no retry revert\");\r\n        {\r\n            uint8 functionType;\r\n            assembly {\r\n                functionType := mload(add(payload, 32))\r\n            }\r\n            require(functionType == TYPE_REDEEM_LOCAL_RESPONSE, \"Stargate: invalid function type\");\r\n        }\r\n\r\n        // empty it\r\n        revertLookup[_dstChainId][_srcAddress][_nonce] = \"\";\r\n\r\n        uint256 srcPoolId;\r\n        uint256 dstPoolId;\r\n        assembly {\r\n            srcPoolId := mload(add(payload, 64))\r\n            dstPoolId := mload(add(payload, 96))\r\n        }\r\n\r\n        Pool.CreditObj memory c;\r\n        {\r\n            Pool pool = _getPool(dstPoolId);\r\n            c = pool.sendCredits(_dstChainId, srcPoolId);\r\n        }\r\n\r\n        bridge.redeemLocalCallback{value: msg.value}(_dstChainId, _refundAddress, c, _lzTxParams, payload);\r\n    }\r\n\r\n    function retryRevert(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        uint256 _nonce\r\n    ) external payable {\r\n        bytes memory payload = revertLookup[_srcChainId][_srcAddress][_nonce];\r\n        require(payload.length > 0, \"Stargate: no retry revert\");\r\n\r\n        // empty it\r\n        revertLookup[_srcChainId][_srcAddress][_nonce] = \"\";\r\n\r\n        uint8 functionType;\r\n        assembly {\r\n            functionType := mload(add(payload, 32))\r\n        }\r\n\r\n        if (functionType == TYPE_REDEEM_LOCAL_CALLBACK_RETRY) {\r\n            (, uint256 srcPoolId, uint256 dstPoolId, address to, uint256 amountSD, uint256 mintAmountSD) = abi.decode(\r\n                payload,\r\n                (uint8, uint256, uint256, address, uint256, uint256)\r\n            );\r\n            _redeemLocalCallback(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, to, amountSD, mintAmountSD);\r\n        }\r\n        // for retrying the swapRemote. if it fails again, retry\r\n        else if (functionType == TYPE_SWAP_REMOTE_RETRY) {\r\n            (, uint256 srcPoolId, uint256 dstPoolId, uint256 dstGasForCall, address to, Pool.SwapObj memory s, bytes memory p) = abi.decode(\r\n                payload,\r\n                (uint8, uint256, uint256, uint256, address, Pool.SwapObj, bytes)\r\n            );\r\n            _swapRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, dstGasForCall, to, s, p);\r\n        } else {\r\n            revert(\"Stargate: invalid function type\");\r\n        }\r\n    }\r\n\r\n    function clearCachedSwap(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        uint256 _nonce\r\n    ) external {\r\n        CachedSwap memory cs = cachedSwapLookup[_srcChainId][_srcAddress][_nonce];\r\n        require(cs.to != address(0x0), \"Stargate: cache already cleared\");\r\n        // clear the data\r\n        cachedSwapLookup[_srcChainId][_srcAddress][_nonce] = CachedSwap(address(0x0), 0, address(0x0), \"\");\r\n        IStargateReceiver(cs.to).sgReceive(_srcChainId, _srcAddress, _nonce, cs.token, cs.amountLD, cs.payload);\r\n    }\r\n\r\n    function creditChainPath(\r\n        uint16 _dstChainId,\r\n        uint256 _dstPoolId,\r\n        uint256 _srcPoolId,\r\n        Pool.CreditObj memory _c\r\n    ) external onlyBridge {\r\n        Pool pool = _getPool(_srcPoolId);\r\n        pool.creditChainPath(_dstChainId, _dstPoolId, _c);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // REMOTE CHAIN FUNCTIONS\r\n    function redeemLocalCheckOnRemote(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint256 _nonce,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        uint256 _amountSD,\r\n        bytes calldata _to\r\n    ) external onlyBridge {\r\n        Pool pool = _getPool(_dstPoolId);\r\n        try pool.redeemLocalCheckOnRemote(_srcChainId, _srcPoolId, _amountSD) returns (uint256 redeemAmountSD, uint256 mintAmountSD) {\r\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\r\n                TYPE_REDEEM_LOCAL_RESPONSE,\r\n                _srcPoolId,\r\n                _dstPoolId,\r\n                redeemAmountSD,\r\n                mintAmountSD,\r\n                _to\r\n            );\r\n            emit RevertRedeemLocal(_srcChainId, _srcPoolId, _dstPoolId, _to, redeemAmountSD, mintAmountSD, _nonce, _srcAddress);\r\n        } catch {\r\n            // if the func fail, return [swapAmount: 0, mintAMount: _amountSD]\r\n            // swapAmount represents the amount of chainPath balance deducted on the remote side, which because the above tx failed, should be 0\r\n            // mintAmount is the full amount of tokens the user attempted to redeem on the src side, which gets converted back into the lp amount\r\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(TYPE_REDEEM_LOCAL_RESPONSE, _srcPoolId, _dstPoolId, 0, _amountSD, _to);\r\n            emit Revert(TYPE_REDEEM_LOCAL_RESPONSE, _srcChainId, _srcAddress, _nonce);\r\n        }\r\n    }\r\n\r\n    function redeemLocalCallback(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint256 _nonce,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address _to,\r\n        uint256 _amountSD,\r\n        uint256 _mintAmountSD\r\n    ) external onlyBridge {\r\n        _redeemLocalCallback(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _to, _amountSD, _mintAmountSD);\r\n    }\r\n\r\n    function _redeemLocalCallback(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint256 _nonce,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address _to,\r\n        uint256 _amountSD,\r\n        uint256 _mintAmountSD\r\n    ) internal {\r\n        Pool pool = _getPool(_dstPoolId);\r\n        try pool.redeemLocalCallback(_srcChainId, _srcPoolId, _to, _amountSD, _mintAmountSD) {} catch {\r\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\r\n                TYPE_REDEEM_LOCAL_CALLBACK_RETRY,\r\n                _srcPoolId,\r\n                _dstPoolId,\r\n                _to,\r\n                _amountSD,\r\n                _mintAmountSD\r\n            );\r\n            emit Revert(TYPE_REDEEM_LOCAL_CALLBACK_RETRY, _srcChainId, _srcAddress, _nonce);\r\n        }\r\n        emit RedeemLocalCallback(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _to, _amountSD, _mintAmountSD);\r\n    }\r\n\r\n    function swapRemote(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint256 _nonce,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        uint256 _dstGasForCall,\r\n        address _to,\r\n        Pool.SwapObj memory _s,\r\n        bytes memory _payload\r\n    ) external onlyBridge {\r\n        _swapRemote(_srcChainId, _srcAddress, _nonce, _srcPoolId, _dstPoolId, _dstGasForCall, _to, _s, _payload);\r\n    }\r\n\r\n    function _swapRemote(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint256 _nonce,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        uint256 _dstGasForCall,\r\n        address _to,\r\n        Pool.SwapObj memory _s,\r\n        bytes memory _payload\r\n    ) internal {\r\n        Pool pool = _getPool(_dstPoolId);\r\n        // first try catch the swap remote\r\n        try pool.swapRemote(_srcChainId, _srcPoolId, _to, _s) returns (uint256 amountLD) {\r\n            if (_payload.length > 0) {\r\n                // then try catch the external contract call\r\n                try IStargateReceiver(_to).sgReceive{gas: _dstGasForCall}(_srcChainId, _srcAddress, _nonce, pool.token(), amountLD, _payload) {\r\n                    // do nothing\r\n                } catch (bytes memory reason) {\r\n                    cachedSwapLookup[_srcChainId][_srcAddress][_nonce] = CachedSwap(pool.token(), amountLD, _to, _payload);\r\n                    emit CachedSwapSaved(_srcChainId, _srcAddress, _nonce, pool.token(), amountLD, _to, _payload, reason);\r\n                }\r\n            }\r\n        } catch {\r\n            revertLookup[_srcChainId][_srcAddress][_nonce] = abi.encode(\r\n                TYPE_SWAP_REMOTE_RETRY,\r\n                _srcPoolId,\r\n                _dstPoolId,\r\n                _dstGasForCall,\r\n                _to,\r\n                _s,\r\n                _payload\r\n            );\r\n            emit Revert(TYPE_SWAP_REMOTE_RETRY, _srcChainId, _srcAddress, _nonce);\r\n        }\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // DAO Calls\r\n    function createPool(\r\n        uint256 _poolId,\r\n        address _token,\r\n        uint8 _sharedDecimals,\r\n        uint8 _localDecimals,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) external onlyOwner returns (address) {\r\n        require(_token != address(0x0), \"Stargate: _token cannot be 0x0\");\r\n        return factory.createPool(_poolId, _token, _sharedDecimals, _localDecimals, _name, _symbol);\r\n    }\r\n\r\n    function createChainPath(\r\n        uint256 _poolId,\r\n        uint16 _dstChainId,\r\n        uint256 _dstPoolId,\r\n        uint256 _weight\r\n    ) external onlyOwner {\r\n        Pool pool = _getPool(_poolId);\r\n        pool.createChainPath(_dstChainId, _dstPoolId, _weight);\r\n    }\r\n\r\n    function activateChainPath(\r\n        uint256 _poolId,\r\n        uint16 _dstChainId,\r\n        uint256 _dstPoolId\r\n    ) external onlyOwner {\r\n        Pool pool = _getPool(_poolId);\r\n        pool.activateChainPath(_dstChainId, _dstPoolId);\r\n    }\r\n\r\n    function setWeightForChainPath(\r\n        uint256 _poolId,\r\n        uint16 _dstChainId,\r\n        uint256 _dstPoolId,\r\n        uint16 _weight\r\n    ) external onlyOwner {\r\n        Pool pool = _getPool(_poolId);\r\n        pool.setWeightForChainPath(_dstChainId, _dstPoolId, _weight);\r\n    }\r\n\r\n    function setProtocolFeeOwner(address _owner) external onlyOwner {\r\n        require(_owner != address(0x0), \"Stargate: _owner cannot be 0x0\");\r\n        protocolFeeOwner = _owner;\r\n    }\r\n\r\n    function setMintFeeOwner(address _owner) external onlyOwner {\r\n        require(_owner != address(0x0), \"Stargate: _owner cannot be 0x0\");\r\n        mintFeeOwner = _owner;\r\n    }\r\n\r\n    function setFees(uint256 _poolId, uint256 _mintFeeBP) external onlyOwner {\r\n        Pool pool = _getPool(_poolId);\r\n        pool.setFee(_mintFeeBP);\r\n    }\r\n\r\n    function setFeeLibrary(uint256 _poolId, address _feeLibraryAddr) external onlyOwner {\r\n        Pool pool = _getPool(_poolId);\r\n        pool.setFeeLibrary(_feeLibraryAddr);\r\n    }\r\n\r\n    function setSwapStop(uint256 _poolId, bool _swapStop) external onlyOwner {\r\n        Pool pool = _getPool(_poolId);\r\n        pool.setSwapStop(_swapStop);\r\n    }\r\n\r\n    function setDeltaParam(\r\n        uint256 _poolId,\r\n        bool _batched,\r\n        uint256 _swapDeltaBP,\r\n        uint256 _lpDeltaBP,\r\n        bool _defaultSwapMode,\r\n        bool _defaultLPMode\r\n    ) external onlyOwner {\r\n        Pool pool = _getPool(_poolId);\r\n        pool.setDeltaParam(_batched, _swapDeltaBP, _lpDeltaBP, _defaultSwapMode, _defaultLPMode);\r\n    }\r\n\r\n    function callDelta(uint256 _poolId, bool _fullMode) external {\r\n        Pool pool = _getPool(_poolId);\r\n        pool.callDelta(_fullMode);\r\n    }\r\n\r\n    function withdrawMintFee(uint256 _poolId, address _to) external {\r\n        require(mintFeeOwner == msg.sender, \"Stargate: only mintFeeOwner\");\r\n        Pool pool = _getPool(_poolId);\r\n        pool.withdrawMintFeeBalance(_to);\r\n    }\r\n\r\n    function withdrawProtocolFee(uint256 _poolId, address _to) external {\r\n        require(protocolFeeOwner == msg.sender, \"Stargate: only protocolFeeOwner\");\r\n        Pool pool = _getPool(_poolId);\r\n        pool.withdrawProtocolFeeBalance(_to);\r\n    }\r\n}"
    },
    "contracts/stargate/Bridge.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.2;\r\npragma abicoder v2;\r\n\r\n// imports\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"./Pool.sol\";\r\nimport \"./Router.sol\";\r\n// interfaces\r\nimport \"../interfaces/ILayerZeroReceiver.sol\";\r\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\r\nimport \"../interfaces/ILayerZeroUserApplicationConfig.sol\";\r\n\r\n// libraries\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract Bridge is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\r\n    using SafeMath for uint256;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // CONSTANTS\r\n    uint8 internal constant TYPE_SWAP_REMOTE = 1;\r\n    uint8 internal constant TYPE_ADD_LIQUIDITY = 2;\r\n    uint8 internal constant TYPE_REDEEM_LOCAL_CALL_BACK = 3;\r\n    uint8 internal constant TYPE_WITHDRAW_REMOTE = 4;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // VARIABLES\r\n    ILayerZeroEndpoint public immutable layerZeroEndpoint;\r\n    mapping(uint16 => bytes) public bridgeLookup;\r\n    mapping(uint16 => mapping(uint8 => uint256)) public gasLookup;\r\n    Router public immutable router;\r\n    bool public useLayerZeroToken;\r\n\r\n    //---------------------------------------------------------------------------\r\n    // EVENTS\r\n    event SendMsg(uint8 msgType, uint64 nonce);\r\n\r\n    //---------------------------------------------------------------------------\r\n    // MODIFIERS\r\n    modifier onlyRouter() {\r\n        require(msg.sender == address(router), \"Stargate: caller must be Router.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _layerZeroEndpoint, address _router) {\r\n        require(_layerZeroEndpoint != address(0x0), \"Stargate: _layerZeroEndpoint cannot be 0x0\");\r\n        require(_router != address(0x0), \"Stargate: _router cannot be 0x0\");\r\n        layerZeroEndpoint = ILayerZeroEndpoint(_layerZeroEndpoint);\r\n        router = Router(_router);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // EXTERNAL functions\r\n\r\n    function lzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64 _nonce,\r\n        bytes memory _payload\r\n    ) external override {\r\n        require(msg.sender == address(layerZeroEndpoint), \"Stargate: only LayerZero endpoint can call lzReceive\");\r\n        require(\r\n            _srcAddress.length == bridgeLookup[_srcChainId].length && keccak256(_srcAddress) == keccak256(bridgeLookup[_srcChainId]),\r\n            \"Stargate: bridge does not match\"\r\n        );\r\n\r\n        uint8 functionType;\r\n        assembly {\r\n            functionType := mload(add(_payload, 32))\r\n        }\r\n\r\n        if (functionType == TYPE_SWAP_REMOTE) {\r\n            (\r\n                ,\r\n                uint256 srcPoolId,\r\n                uint256 dstPoolId,\r\n                uint256 dstGasForCall,\r\n                Pool.CreditObj memory c,\r\n                Pool.SwapObj memory s,\r\n                bytes memory to,\r\n                bytes memory payload\r\n            ) = abi.decode(_payload, (uint8, uint256, uint256, uint256, Pool.CreditObj, Pool.SwapObj, bytes, bytes));\r\n            address toAddress;\r\n            assembly {\r\n                toAddress := mload(add(to, 20))\r\n            }\r\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\r\n            router.swapRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, dstGasForCall, toAddress, s, payload);\r\n        } else if (functionType == TYPE_ADD_LIQUIDITY) {\r\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c) = abi.decode(_payload, (uint8, uint256, uint256, Pool.CreditObj));\r\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\r\n        } else if (functionType == TYPE_REDEEM_LOCAL_CALL_BACK) {\r\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c, uint256 amountSD, uint256 mintAmountSD, bytes memory to) = abi\r\n                .decode(_payload, (uint8, uint256, uint256, Pool.CreditObj, uint256, uint256, bytes));\r\n            address toAddress;\r\n            assembly {\r\n                toAddress := mload(add(to, 20))\r\n            }\r\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\r\n            router.redeemLocalCallback(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, toAddress, amountSD, mintAmountSD);\r\n        } else if (functionType == TYPE_WITHDRAW_REMOTE) {\r\n            (, uint256 srcPoolId, uint256 dstPoolId, Pool.CreditObj memory c, uint256 amountSD, bytes memory to) = abi.decode(\r\n                _payload,\r\n                (uint8, uint256, uint256, Pool.CreditObj, uint256, bytes)\r\n            );\r\n            router.creditChainPath(_srcChainId, srcPoolId, dstPoolId, c);\r\n            router.redeemLocalCheckOnRemote(_srcChainId, _srcAddress, _nonce, srcPoolId, dstPoolId, amountSD, to);\r\n        }\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // LOCAL CHAIN FUNCTIONS\r\n    function swap(\r\n        uint16 _chainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        Pool.CreditObj memory _c,\r\n        Pool.SwapObj memory _s,\r\n        IStargateRouter.lzTxObj memory _lzTxParams,\r\n        bytes calldata _to,\r\n        bytes calldata _payload\r\n    ) external payable onlyRouter {\r\n        bytes memory payload = abi.encode(TYPE_SWAP_REMOTE, _srcPoolId, _dstPoolId, _lzTxParams.dstGasForCall, _c, _s, _to, _payload);\r\n        _call(_chainId, TYPE_SWAP_REMOTE, _refundAddress, _lzTxParams, payload);\r\n    }\r\n\r\n    function redeemLocalCallback(\r\n        uint16 _chainId,\r\n        address payable _refundAddress,\r\n        Pool.CreditObj memory _c,\r\n        IStargateRouter.lzTxObj memory _lzTxParams,\r\n        bytes memory _payload\r\n    ) external payable onlyRouter {\r\n        bytes memory payload;\r\n\r\n        {\r\n            (, uint256 srcPoolId, uint256 dstPoolId, uint256 amountSD, uint256 mintAmountSD, bytes memory to) = abi.decode(\r\n                _payload,\r\n                (uint8, uint256, uint256, uint256, uint256, bytes)\r\n            );\r\n\r\n            // swap dst and src because we are headed back\r\n            payload = abi.encode(TYPE_REDEEM_LOCAL_CALL_BACK, dstPoolId, srcPoolId, _c, amountSD, mintAmountSD, to);\r\n        }\r\n\r\n        _call(_chainId, TYPE_REDEEM_LOCAL_CALL_BACK, _refundAddress, _lzTxParams, payload);\r\n    }\r\n\r\n    function redeemLocal(\r\n        uint16 _chainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        Pool.CreditObj memory _c,\r\n        uint256 _amountSD,\r\n        bytes calldata _to,\r\n        IStargateRouter.lzTxObj memory _lzTxParams\r\n    ) external payable onlyRouter {\r\n        bytes memory payload = abi.encode(TYPE_WITHDRAW_REMOTE, _srcPoolId, _dstPoolId, _c, _amountSD, _to);\r\n        _call(_chainId, TYPE_WITHDRAW_REMOTE, _refundAddress, _lzTxParams, payload);\r\n    }\r\n\r\n    function sendCredits(\r\n        uint16 _chainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        Pool.CreditObj memory _c\r\n    ) external payable onlyRouter {\r\n        bytes memory payload = abi.encode(TYPE_ADD_LIQUIDITY, _srcPoolId, _dstPoolId, _c);\r\n        IStargateRouter.lzTxObj memory lzTxObj = IStargateRouter.lzTxObj(0, 0, \"0x\");\r\n        _call(_chainId, TYPE_ADD_LIQUIDITY, _refundAddress, lzTxObj, payload);\r\n    }\r\n\r\n    function quoteLayerZeroFee(\r\n        uint16 _chainId,\r\n        uint8 _functionType,\r\n        bytes calldata _toAddress,\r\n        bytes calldata _transferAndCallPayload,\r\n        IStargateRouter.lzTxObj memory _lzTxParams\r\n    ) external view returns (uint256, uint256) {\r\n        bytes memory payload = \"\";\r\n        Pool.CreditObj memory c = Pool.CreditObj(1, 1);\r\n        if (_functionType == TYPE_SWAP_REMOTE) {\r\n            Pool.SwapObj memory s = Pool.SwapObj(1, 1, 1, 1, 1, 1);\r\n            payload = abi.encode(TYPE_SWAP_REMOTE, 0, 0, 0, c, s, _toAddress, _transferAndCallPayload);\r\n        } else if (_functionType == TYPE_ADD_LIQUIDITY) {\r\n            payload = abi.encode(TYPE_ADD_LIQUIDITY, 0, 0, c);\r\n        } else if (_functionType == TYPE_REDEEM_LOCAL_CALL_BACK) {\r\n            payload = abi.encode(TYPE_REDEEM_LOCAL_CALL_BACK, 0, 0, c, 0, 0, _toAddress);\r\n        } else if (_functionType == TYPE_WITHDRAW_REMOTE) {\r\n            payload = abi.encode(TYPE_WITHDRAW_REMOTE, 0, 0, c, 0, _toAddress);\r\n        } else {\r\n            revert(\"Stargate: unsupported function type\");\r\n        }\r\n\r\n        bytes memory lzTxParamBuilt = _txParamBuilder(_chainId, _functionType, _lzTxParams);\r\n        return layerZeroEndpoint.estimateFees(_chainId, address(this), payload, useLayerZeroToken, lzTxParamBuilt);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // dao functions\r\n    function setBridge(uint16 _chainId, bytes calldata _bridgeAddress) external onlyOwner {\r\n        require(bridgeLookup[_chainId].length == 0, \"Stargate: Bridge already set!\");\r\n        bridgeLookup[_chainId] = _bridgeAddress;\r\n    }\r\n\r\n    function setGasAmount(\r\n        uint16 _chainId,\r\n        uint8 _functionType,\r\n        uint256 _gasAmount\r\n    ) external onlyOwner {\r\n        require(_functionType >= 1 && _functionType <= 4, \"Stargate: invalid _functionType\");\r\n        gasLookup[_chainId][_functionType] = _gasAmount;\r\n    }\r\n\r\n    function approveTokenSpender(\r\n        address token,\r\n        address spender,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        IERC20(token).approve(spender, amount);\r\n    }\r\n\r\n    function setUseLayerZeroToken(bool enable) external onlyOwner {\r\n        useLayerZeroToken = enable;\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\r\n        layerZeroEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // generic config for user Application\r\n    function setConfig(\r\n        uint16 _version,\r\n        uint16 _chainId,\r\n        uint256 _configType,\r\n        bytes calldata _config\r\n    ) external override onlyOwner {\r\n        layerZeroEndpoint.setConfig(_version, _chainId, _configType, _config);\r\n    }\r\n\r\n    function setSendVersion(uint16 version) external override onlyOwner {\r\n        layerZeroEndpoint.setSendVersion(version);\r\n    }\r\n\r\n    function setReceiveVersion(uint16 version) external override onlyOwner {\r\n        layerZeroEndpoint.setReceiveVersion(version);\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // INTERNAL functions\r\n    function txParamBuilderType1(uint256 _gasAmount) internal pure returns (bytes memory) {\r\n        uint16 txType = 1;\r\n        return abi.encodePacked(txType, _gasAmount);\r\n    }\r\n\r\n    function txParamBuilderType2(\r\n        uint256 _gasAmount,\r\n        uint256 _dstNativeAmount,\r\n        bytes memory _dstNativeAddr\r\n    ) internal pure returns (bytes memory) {\r\n        uint16 txType = 2;\r\n        return abi.encodePacked(txType, _gasAmount, _dstNativeAmount, _dstNativeAddr);\r\n    }\r\n\r\n    function _txParamBuilder(\r\n        uint16 _chainId,\r\n        uint8 _type,\r\n        IStargateRouter.lzTxObj memory _lzTxParams\r\n    ) internal view returns (bytes memory) {\r\n        bytes memory lzTxParam;\r\n        address dstNativeAddr;\r\n        {\r\n            bytes memory dstNativeAddrBytes = _lzTxParams.dstNativeAddr;\r\n            assembly {\r\n                dstNativeAddr := mload(add(dstNativeAddrBytes, 20))\r\n            }\r\n        }\r\n\r\n        uint256 totalGas = gasLookup[_chainId][_type].add(_lzTxParams.dstGasForCall);\r\n        if (_lzTxParams.dstNativeAmount > 0 && dstNativeAddr != address(0x0)) {\r\n            lzTxParam = txParamBuilderType2(totalGas, _lzTxParams.dstNativeAmount, _lzTxParams.dstNativeAddr);\r\n        } else {\r\n            lzTxParam = txParamBuilderType1(totalGas);\r\n        }\r\n\r\n        return lzTxParam;\r\n    }\r\n\r\n    function _call(\r\n        uint16 _chainId,\r\n        uint8 _type,\r\n        address payable _refundAddress,\r\n        IStargateRouter.lzTxObj memory _lzTxParams,\r\n        bytes memory _payload\r\n    ) internal {\r\n        bytes memory lzTxParamBuilt = _txParamBuilder(_chainId, _type, _lzTxParams);\r\n        uint64 nextNonce = layerZeroEndpoint.getOutboundNonce(_chainId, address(this)) + 1;\r\n        layerZeroEndpoint.send{value: msg.value}(_chainId, bridgeLookup[_chainId], _payload, _refundAddress, address(this), lzTxParamBuilt);\r\n        emit SendMsg(_type, nextNonce);\r\n    }\r\n\r\n    function renounceOwnership() public override onlyOwner {}\r\n}"
    },
    "contracts/interfaces/IStargateRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\ninterface IStargateRouter {\r\n    struct lzTxObj {\r\n        uint256 dstGasForCall;\r\n        uint256 dstNativeAmount;\r\n        bytes dstNativeAddr;\r\n    }\r\n\r\n    function addLiquidity(\r\n        uint256 _poolId,\r\n        uint256 _amountLD,\r\n        address _to\r\n    ) external;\r\n\r\n    function swap(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        uint256 _amountLD,\r\n        uint256 _minAmountLD,\r\n        lzTxObj memory _lzTxParams,\r\n        bytes calldata _to,\r\n        bytes calldata _payload\r\n    ) external payable;\r\n\r\n    function redeemRemote(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        uint256 _amountLP,\r\n        uint256 _minAmountLD,\r\n        bytes calldata _to,\r\n        lzTxObj memory _lzTxParams\r\n    ) external payable;\r\n\r\n    function instantRedeemLocal(\r\n        uint16 _srcPoolId,\r\n        uint256 _amountLP,\r\n        address _to\r\n    ) external returns (uint256);\r\n\r\n    function redeemLocal(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress,\r\n        uint256 _amountLP,\r\n        bytes calldata _to,\r\n        lzTxObj memory _lzTxParams\r\n    ) external payable;\r\n\r\n    function sendCredits(\r\n        uint16 _dstChainId,\r\n        uint256 _srcPoolId,\r\n        uint256 _dstPoolId,\r\n        address payable _refundAddress\r\n    ) external payable;\r\n\r\n    function quoteLayerZeroFee(\r\n        uint16 _dstChainId,\r\n        uint8 _functionType,\r\n        bytes calldata _toAddress,\r\n        bytes calldata _transferAndCallPayload,\r\n        lzTxObj memory _lzTxParams\r\n    ) external view returns (uint256, uint256);\r\n}"
    },
    "contracts/core/ExchangeRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {NonblockingLzApp} from \"../lzApp/NonblockingLzApp.sol\";\r\nimport {IExchangeRouter} from \"../interfaces/IExchangeRouter.sol\";\r\nimport {IStargatePoolManager} from \"../interfaces/IStargatePoolManager.sol\";\r\nimport {IStargateReceiver} from \"../interfaces/IStargateReceiver.sol\";\r\n\r\n/**\r\n * @title ExchangeRouter\r\n * @notice Exchange the reservoir orders by using this contract.\r\n */\r\ncontract ExchangeRouter is IExchangeRouter, IStargateReceiver, NonblockingLzApp, ReentrancyGuard {\r\n    using Address for address;\r\n\r\n    struct ExecutionInfo {\r\n        address module;     // exchange module address\r\n        bytes data;         // function call data to exchange\r\n        uint256 value;      // value\r\n    }\r\n\r\n    struct AmountCheckInfo {\r\n        address target;     // currency contract\r\n        bytes data;         // function call data to get balance\r\n        uint256 threshold;  // minimum hold balance amount\r\n    }\r\n\r\n    struct CrossExchangeInfo {\r\n        uint16 fromChainId;     // layer zero chain id\r\n        uint16 toChainId;       // layer zero chain id\r\n        uint256 amount;         // currency amount to be swapped\r\n        address from;           // buyer\r\n        address to;             // exchange router address on destination chain\r\n        address currency;       // currency address\r\n        address allowedModule;  // allowed module to take the funds.\r\n        bool isNative;          // is native eth trading?\r\n    }\r\n\r\n    error UnsuccessfulExecution();\r\n    error UnsuccessfulPayment();\r\n\r\n    modifier refundETH() {\r\n        _;\r\n\r\n        uint256 leftover = address(this).balance;\r\n        if (leftover > 0) {\r\n            (bool success, ) = payable(msg.sender).call{value: leftover}(\"\");\r\n            if (!success) {\r\n                revert UnsuccessfulPayment();\r\n            }\r\n        }\r\n    }\r\n\r\n    IStargatePoolManager public stargatePoolManager;\r\n\r\n    /**\r\n     * receive fallback\r\n     */\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * constructor\r\n     */\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    /**\r\n    * set stargate pool manager\r\n    */\r\n    function setStargatePoolManager(address manager) external onlyOwner {\r\n        stargatePoolManager = IStargatePoolManager(manager);\r\n    }\r\n\r\n    /**\r\n     * execute the set of function calls\r\n     */\r\n    function execute(ExecutionInfo[] calldata executionInfos)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        refundETH\r\n    {\r\n        uint256 length = executionInfos.length;\r\n        for (uint256 i = 0; i < length; ) {\r\n            _executeInternal(executionInfos[i]);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * execute the set of executions with amoutn checking.\r\n     * `executeWithAmountCheck` supports stopping the executions \r\n     * once the provided amount check reaches a certain value. This is useful when\r\n     * trying to fill orders with slippage (eg. provide multiple orders and try to\r\n     * fill until a certain balance is reached). In order to be flexible, checking\r\n     * the amount is done generically by calling the `target` contract with `data`.\r\n     * For example, this could be used to check the ERC721 total owned balance (by\r\n     * using `balanceOf(owner)`), the ERC1155 total owned balance per token id (by\r\n     * using `balanceOf(owner, tokenId)`), but also for checking the ERC1155 total\r\n     * owned balance per multiple token ids (by using a custom contract that wraps\r\n     * `balanceOfBatch(owners, tokenIds)`).\r\n     */\r\n    function executeWithAmountCheck(\r\n        ExecutionInfo[] calldata executionInfos,\r\n        AmountCheckInfo calldata amountCheckInfo\r\n    ) external payable nonReentrant refundETH {\r\n        // Cache some data for efficiency\r\n        address target = amountCheckInfo.target;\r\n        bytes calldata data = amountCheckInfo.data;\r\n        uint256 threshold = amountCheckInfo.threshold;\r\n\r\n        uint256 length = executionInfos.length;\r\n        for (uint256 i = 0; i < length; ) {\r\n            // Check the amount and break if it exceeds the threshold\r\n            uint256 amount = _getAmount(target, data);\r\n            if (amount >= threshold) {\r\n                break;\r\n            }\r\n\r\n            _executeInternal(executionInfos[i]);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice get stargate payload\r\n    * @param executionInfos execution infos\r\n    * @dev this function is used only for makerAskWithTakerBid\r\n     */\r\n    function _getSgPayload(address allowedModule, bool isNative, ExecutionInfo[] calldata executionInfos)\r\n        internal pure returns (bytes memory)\r\n    {\r\n        bytes memory payload = abi.encode(\r\n            allowedModule,\r\n            isNative,\r\n            executionInfos\r\n        );\r\n\r\n        return payload;\r\n    }\r\n\r\n    /**\r\n     * @notice get layerzero fees for matching a takerBid with a makerAsk\r\n     * @param executionInfos taker bid order\r\n     * @param crossInfo maker ask order\r\n     * @return (omnixFee, fundManagerFee, nftTransferManagerFee)\r\n     */\r\n    function getLzFeesForTrading(ExecutionInfo[] calldata executionInfos, CrossExchangeInfo calldata crossInfo)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (crossInfo.fromChainId == crossInfo.toChainId) return 0;\r\n        if (address(stargatePoolManager) == address(0)) return 0;\r\n        if (!stargatePoolManager.isSwappable(crossInfo.currency, crossInfo.toChainId)) return 0;\r\n\r\n        bytes memory payload = _getSgPayload(crossInfo.allowedModule, crossInfo.isNative, executionInfos);\r\n        (uint256 fee, ) = stargatePoolManager.getSwapFee(crossInfo.toChainId, crossInfo.to, payload);\r\n\r\n        return fee;\r\n    }\r\n\r\n    /**\r\n     * cross exchange execution using stargate\r\n     * @param executionInfos execution infos\r\n     * @param crossInfo infos to execute the cross exchange.\r\n     */\r\n    function executeWithCross(ExecutionInfo[] calldata executionInfos, CrossExchangeInfo calldata crossInfo)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        refundETH\r\n    {\r\n        require (crossInfo.fromChainId != crossInfo.toChainId, \"ExchangeRouter: chain ids should be different\");\r\n        require (address(stargatePoolManager) != address(0), \"ExechangeRouter: stargate pool manager is null\");\r\n        require (stargatePoolManager.isSwappable(crossInfo.currency, crossInfo.toChainId), \"ExechangeRouter: currency is not swappable\");\r\n\r\n        bytes memory payload = _getSgPayload(crossInfo.allowedModule, crossInfo.isNative, executionInfos);\r\n\r\n        if (!crossInfo.isNative) {\r\n            stargatePoolManager.swap{value: msg.value}(\r\n                crossInfo.currency,\r\n                crossInfo.toChainId,\r\n                payable(msg.sender),\r\n                crossInfo.amount,\r\n                crossInfo.from,\r\n                crossInfo.to,\r\n                payload\r\n            );\r\n        } else {\r\n            stargatePoolManager.swapETH{value: msg.value}(\r\n                crossInfo.toChainId,\r\n                payable(msg.sender),\r\n                crossInfo.amount,\r\n                crossInfo.to,\r\n                payload\r\n            );\r\n        }\r\n    }\r\n\r\n    function _executeInternal(ExecutionInfo memory executionInfo) internal {\r\n        address module = executionInfo.module;\r\n\r\n        // Ensure the target is a contract\r\n        if (!module.isContract()) {\r\n            revert UnsuccessfulExecution();\r\n        }\r\n\r\n        (bool success, ) = module.call{value: executionInfo.value}(\r\n            executionInfo.data\r\n        );\r\n        if (!success) {\r\n            revert UnsuccessfulExecution();\r\n        }\r\n    }\r\n\r\n    function _getAmount(address target, bytes calldata data)\r\n        internal\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        // Ensure the target is a contract\r\n        if (!target.isContract()) {\r\n            revert UnsuccessfulExecution();\r\n        }\r\n\r\n        (bool success, bytes memory result) = target.staticcall(data);\r\n        if (!success) {\r\n            revert UnsuccessfulExecution();\r\n        }\r\n\r\n        amount = abi.decode(result, (uint256));\r\n    }\r\n\r\n    /**\r\n     * @notice message listener from LayerZero endpoint\r\n     * @param _payload message data\r\n     * @dev no need to change this function\r\n     */\r\n    function _nonblockingLzReceive(uint16, bytes memory, uint64, bytes memory _payload) internal virtual override {\r\n    }\r\n\r\n    /**\r\n    * @notice stargate swap receive callback\r\n    */\r\n    function sgReceive(\r\n        uint16 ,                // the remote chainId sending the tokens\r\n        bytes memory,           // the remote Bridge address\r\n        uint256,                  \r\n        address token,                // the token contract on the local chain\r\n        uint256 _price,         // the qty of local _token contract tokens  \r\n        bytes memory _payload\r\n    ) external override {\r\n        (address allowedModule, bool isNative, ExecutionInfo[] memory executionInfos) = abi.decode(_payload, (address, bool, ExecutionInfo[]));\r\n        \r\n        // transfer funds to allowedModule\r\n        if (allowedModule != address(0)) {\r\n            if (isNative) {\r\n                payable(allowedModule).transfer(_price);\r\n            } else {\r\n                IERC20(token).transfer(allowedModule, _price);\r\n            }\r\n        }\r\n\r\n        uint256 length = executionInfos.length;\r\n        for (uint256 i = 0; i < length; ) {    \r\n            _executeInternal(executionInfos[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}"
    },
    "contracts/interfaces/IExchangeRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IExchangeRouter {\r\n    \r\n}"
    },
    "contracts/core/StargatePoolManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IStargateRouter} from \"../interfaces/IStargateRouter.sol\";\r\nimport {IStargatePoolManager} from \"../interfaces/IStargatePoolManager.sol\";\r\nimport {IStargateEthVault} from \"../interfaces/IStargateEthVault.sol\";\r\n\r\ncontract StargatePoolManager is IStargatePoolManager, Ownable {\r\n  uint8 internal constant TYPE_SWAP_REMOTE = 1;   // from Bridge.sol\r\n  uint256 internal constant MIN_AMOUNT_LD = 1e4;  // the min amount you would accept on the destination when swapping using stargate\r\n\r\n  address public immutable stargateEthVault;\r\n  // IERC20 => dst chain id => pool id\r\n  mapping (address => mapping (uint16 => PoolID)) public poolIds;\r\n  IStargateRouter public stargateRouter;\r\n  uint256 public gasForSgReceive = 350000;\r\n  uint16 public ETH_POOL_ID = 13;\r\n\r\n  constructor(address stargateRouter_, address stargateEthVault_) {\r\n    stargateRouter = IStargateRouter(stargateRouter_);\r\n    stargateEthVault = stargateEthVault_;\r\n  }\r\n\r\n  function setStargateRouter(address stargateRouter_) external onlyOwner {\r\n    stargateRouter = IStargateRouter(stargateRouter_);\r\n  }\r\n\r\n  function setGasForSgReceive(uint256 gas) external onlyOwner {\r\n    gasForSgReceive = gas;\r\n  }\r\n\r\n  /**\r\n    * @notice set ERC20 token pool informations\r\n    * @param token ERC20 token address\r\n    * @param dstChainId destination chain id in layerZero\r\n    * @param srcPoolId src pool id for ERC20 token\r\n    * @param dstPoolId dst pool id for ERC20 token\r\n   */\r\n  function setPoolId(address token, uint16 dstChainId, uint256 srcPoolId, uint256 dstPoolId) public override onlyOwner {\r\n    poolIds[token][dstChainId].srcPoolId = srcPoolId;\r\n    poolIds[token][dstChainId].dstPoolId = dstPoolId;\r\n  }\r\n\r\n  /**\r\n    * @notice get ERC20 token pool informations\r\n    * @param token ERC20 token address\r\n    * @param dstChainId destination chain id in layerZero\r\n    * @return pool structure contains srcPoolId, dstPoolId\r\n   */\r\n  function getPoolId(address token, uint16 dstChainId) public view override returns (PoolID memory) {\r\n    return poolIds[token][dstChainId];\r\n  }\r\n\r\n  /**\r\n    * @notice check if ERC20 token is swappable using Stargate\r\n    * @param token ERC20 token address\r\n    * @param dstChainId destination chain id in layerZero\r\n   */\r\n  function isSwappable(address token, uint16 dstChainId) public view override returns (bool) {\r\n    PoolID storage poolId = poolIds[token][dstChainId];\r\n\r\n    if (poolId.srcPoolId == 0 || poolId.dstPoolId == 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @notice get swap fee of stargate\r\n    * @param dstChainId address of the execution strategy\r\n    * @param to seller's recipient\r\n    */\r\n  function getSwapFee(\r\n    uint16 dstChainId,\r\n    address to,\r\n    bytes memory payload\r\n  ) public view override returns (uint256, uint256) {\r\n    IStargateRouter.lzTxObj memory lzTxParams = IStargateRouter.lzTxObj(gasForSgReceive, 0, \"0x\");\r\n    bytes memory toAddress = abi.encodePacked(to);\r\n\r\n    (uint256 fee, uint256 lzFee) = stargateRouter.quoteLayerZeroFee(\r\n      dstChainId,\r\n      TYPE_SWAP_REMOTE,\r\n      toAddress,\r\n      payload,\r\n      lzTxParams\r\n    );\r\n\r\n    return (fee, lzFee);\r\n  }\r\n\r\n  /**\r\n    * @notice swap ERC20 token to \r\n    * @param dstChainId address of the execution strategy\r\n    * @param refundAddress non fungible token address for the transfer\r\n    * @param amount tokenId\r\n    * @param to seller's recipient\r\n    */\r\n  function swap(\r\n    address token,\r\n    uint16 dstChainId,\r\n    address payable refundAddress,\r\n    uint256 amount,\r\n    address from,\r\n    address to,\r\n    bytes memory payload\r\n  ) external payable override {\r\n    IStargateRouter.lzTxObj memory lzTxParams = IStargateRouter.lzTxObj(gasForSgReceive, 0, \"0x\");\r\n    bytes memory toAddress = abi.encodePacked(to);\r\n    PoolID memory poolId = getPoolId(token, dstChainId);\r\n\r\n    IERC20(token).transferFrom(from, address(this), amount);\r\n    IERC20(token).approve(address(stargateRouter), amount);\r\n\r\n    stargateRouter.swap{value: msg.value}(\r\n      dstChainId,\r\n      poolId.srcPoolId,\r\n      poolId.dstPoolId,\r\n      refundAddress,\r\n      amount,\r\n      MIN_AMOUNT_LD,\r\n      lzTxParams,\r\n      toAddress,\r\n      payload\r\n    );\r\n  }\r\n\r\n  /**\r\n    * @notice get WETH swap fee\r\n    * @param dstChainId address of the execution strategy\r\n    * @param to seller's recipient\r\n    */\r\n  function getSwapFeeETH(\r\n    uint16 dstChainId,\r\n    address to\r\n  ) public view override returns (uint256, uint256) {\r\n    return getSwapFee(dstChainId, to, bytes(\"\"));\r\n  }\r\n\r\n  /**\r\n    * @notice swap WETH\r\n    * @param dstChainId address of the execution strategy\r\n    * @param refundAddress non fungible token address for the transfer\r\n    * @param amount tokenId\r\n    * @param to seller's recipient\r\n    */\r\n  function swapETH(\r\n    uint16 dstChainId,\r\n    address payable refundAddress,\r\n    uint256 amount,\r\n    address to,\r\n    bytes memory payload\r\n  ) external payable override {\r\n    require (address(stargateEthVault) != address(0), \"invalid router eth\");\r\n    require(msg.value > amount, \"Stargate: msg.value must be > _amountLD\");\r\n    \r\n    bytes memory toAddress = abi.encodePacked(to);\r\n\r\n    // wrap the ETH into WETH\r\n    IStargateEthVault(stargateEthVault).deposit{value: amount}();\r\n    IStargateEthVault(stargateEthVault).approve(address(stargateRouter), amount);\r\n\r\n    // messageFee is the remainder of the msg.value after wrap\r\n    uint256 messageFee = msg.value - amount;\r\n    IStargateRouter.lzTxObj memory lzTxParams = IStargateRouter.lzTxObj(gasForSgReceive, 0, \"0x\");\r\n\r\n    // compose a stargate swap() using the WETH that was just wrapped\r\n    stargateRouter.swap{value: messageFee}(\r\n        dstChainId, // destination Stargate chainId\r\n        ETH_POOL_ID, // WETH Stargate poolId on source\r\n        ETH_POOL_ID, // WETH Stargate poolId on destination\r\n        refundAddress, // message refund address if overpaid\r\n        amount, // the amount in Local Decimals to swap()\r\n        MIN_AMOUNT_LD, // the minimum amount swap()er would allow to get out (ie: slippage)\r\n        lzTxParams,\r\n        toAddress, // address on destination to send to\r\n        payload // empty payload, since sending to EOA\r\n    );\r\n  }\r\n}\r\n"
    },
    "contracts/interfaces/IStargateEthVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IStargateEthVault {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function withdraw(uint) external;\r\n\r\n    function approve(address guy, uint wad) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint wad\r\n    ) external returns (bool);\r\n}"
    },
    "contracts/stargate/RouterETH.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\nimport \"../interfaces/IStargateRouter.sol\";\r\nimport \"../interfaces/IStargateEthVault.sol\";\r\n\r\ncontract RouterETH {\r\n    address public immutable stargateEthVault;\r\n    IStargateRouter public immutable stargateRouter;\r\n    uint16 public immutable poolId;\r\n\r\n    constructor(\r\n        address _stargateEthVault,\r\n        address _stargateRouter,\r\n        uint16 _poolId\r\n    ) {\r\n        require(_stargateEthVault != address(0x0), \"RouterETH: _stargateEthVault cant be 0x0\");\r\n        require(_stargateRouter != address(0x0), \"RouterETH: _stargateRouter cant be 0x0\");\r\n        stargateEthVault = _stargateEthVault;\r\n        stargateRouter = IStargateRouter(_stargateRouter);\r\n        poolId = _poolId;\r\n    }\r\n\r\n    function addLiquidityETH() external payable {\r\n        require(msg.value > 0, \"Stargate: msg.value is 0\");\r\n\r\n        uint256 amountLD = msg.value;\r\n\r\n        // wrap the ETH into WETH\r\n        IStargateEthVault(stargateEthVault).deposit{value: amountLD}();\r\n        IStargateEthVault(stargateEthVault).approve(address(stargateRouter), amountLD);\r\n\r\n        // addLiquidity using the WETH that was just wrapped,\r\n        // and mint the LP token to the msg.sender\r\n        stargateRouter.addLiquidity(poolId, amountLD, msg.sender);\r\n    }\r\n\r\n    // compose stargate to swap ETH on the source to ETH on the destination\r\n    function swapETH(\r\n        uint16 _dstChainId, // destination Stargate chainId\r\n        address payable _refundAddress, // refund additional messageFee to this address\r\n        bytes calldata _toAddress, // the receiver of the destination ETH\r\n        uint256 _amountLD, // the amount, in Local Decimals, to be swapped\r\n        uint256 _minAmountLD, // the minimum amount accepted out on destination,\r\n        bytes memory _payload\r\n    ) external payable {\r\n        require(msg.value > _amountLD, \"Stargate: msg.value must be > _amountLD\");\r\n\r\n        // wrap the ETH into WETH\r\n        IStargateEthVault(stargateEthVault).deposit{value: _amountLD}();\r\n        IStargateEthVault(stargateEthVault).approve(address(stargateRouter), _amountLD);\r\n\r\n        // messageFee is the remainder of the msg.value after wrap\r\n        uint256 messageFee = msg.value - _amountLD;\r\n\r\n        // compose a stargate swap() using the WETH that was just wrapped\r\n        stargateRouter.swap{value: messageFee}(\r\n            _dstChainId, // destination Stargate chainId\r\n            poolId, // WETH Stargate poolId on source\r\n            poolId, // WETH Stargate poolId on destination\r\n            _refundAddress, // message refund address if overpaid\r\n            _amountLD, // the amount in Local Decimals to swap()\r\n            _minAmountLD, // the minimum amount swap()er would allow to get out (ie: slippage)\r\n            IStargateRouter.lzTxObj(0, 0, \"0x\"),\r\n            _toAddress, // address on destination to send to\r\n            _payload // empty payload, since sending to EOA\r\n        );\r\n    }\r\n\r\n    // this contract needs to accept ETH\r\n    receive() external payable {}\r\n}"
    },
    "contracts/core/RoyaltyFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC165, IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\n\r\nimport {IRoyaltyFeeManager} from \"../interfaces/IRoyaltyFeeManager.sol\";\r\n\r\n/**\r\n * @title RoyaltyFeeManager\r\n * @notice It handles the logic to check and transfer royalty fees (if any).\r\n */\r\ncontract RoyaltyFeeManager is IRoyaltyFeeManager, Ownable {\r\n    // https://eips.ethereum.org/EIPS/eip-2981\r\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     */\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate royalty fee and get recipient\r\n     * @param collection address of the NFT contract\r\n     * @param tokenId tokenId\r\n     * @param amount amount to transfer\r\n     */\r\n    function calculateRoyaltyFeeAndGetRecipient(\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 amount,\r\n        bytes memory royaltyInfo\r\n    ) external view override returns (address, uint256) {\r\n        // 1. Check if there is a royalty info in the system\r\n        (address receiver, uint256 royaltyAmount) = abi.decode(royaltyInfo, (address, uint256));\r\n\r\n        // 2. If the receiver is address(0), fee is null, check if it supports the ERC2981 interface\r\n        if ((receiver == address(0)) || (royaltyAmount == 0)) {\r\n            if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981)) {\r\n                (receiver, royaltyAmount) = IERC2981(collection).royaltyInfo(tokenId, amount);\r\n            }\r\n        }\r\n        else {\r\n            royaltyAmount = amount * royaltyAmount / 10000;\r\n        }\r\n        return (receiver, royaltyAmount);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "contracts/core/CurrencyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nimport {ICurrencyManager} from \"../interfaces/ICurrencyManager.sol\";\r\nimport {InterfaceChecker} from \"../libraries/InterfaceChecker.sol\";\r\nimport {IOFT} from \"../token/oft/IOFT.sol\";\r\n\r\n/**\r\n * @title CurrencyManager\r\n * @notice It allows adding/removing currencies for trading on the OmniX exchange.\r\n */\r\ncontract CurrencyManager is ICurrencyManager, Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    EnumerableSet.AddressSet private _whitelistedCurrencies;\r\n    mapping (address => bool) private _omniCurrencies;\r\n\r\n    event CurrencyRemoved(address indexed currency);\r\n    event CurrencyWhitelisted(address indexed currency);\r\n\r\n    /**\r\n     * @notice Add a currency in the system\r\n     * @param currency address of the currency to add\r\n     */\r\n    function addCurrency(address currency) external override onlyOwner {\r\n        require(!_whitelistedCurrencies.contains(currency), \"Currency: Already whitelisted\");\r\n        _whitelistedCurrencies.add(currency);\r\n        _omniCurrencies[currency] = InterfaceChecker.check(currency, type(IOFT).interfaceId);\r\n        emit CurrencyWhitelisted(currency);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove a currency from the system\r\n     * @param currency address of the currency to remove\r\n     */\r\n    function removeCurrency(address currency) external override onlyOwner {\r\n        require(_whitelistedCurrencies.contains(currency), \"Currency: Not whitelisted\");\r\n        _whitelistedCurrencies.remove(currency);\r\n        delete _omniCurrencies[currency];\r\n\r\n        emit CurrencyRemoved(currency);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns if a currency is in the system\r\n     * @param currency address of the currency\r\n     */\r\n    function isCurrencyWhitelisted(address currency) external view override returns (bool) {\r\n        return _whitelistedCurrencies.contains(currency);\r\n    }\r\n\r\n    function isOmniCurrency(address currency) external view override returns (bool) {\r\n        return _omniCurrencies[currency];\r\n    }\r\n\r\n    /**\r\n     * @notice View number of whitelisted currencies\r\n     */\r\n    function viewCountWhitelistedCurrencies() external view override returns (uint256) {\r\n        return _whitelistedCurrencies.length();\r\n    }\r\n\r\n    /**\r\n     * @notice See whitelisted currencies in the system\r\n     * @param cursor cursor (should start at 0 for first request)\r\n     * @param size size of the response (e.g., 50)\r\n     */\r\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size)\r\n        external\r\n        view\r\n        override\r\n        returns (address[] memory, uint256)\r\n    {\r\n        uint256 length = size;\r\n\r\n        if (length > _whitelistedCurrencies.length() - cursor) {\r\n            length = _whitelistedCurrencies.length() - cursor;\r\n        }\r\n\r\n        address[] memory whitelistedCurrencies = new address[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            whitelistedCurrencies[i] = _whitelistedCurrencies.at(cursor + i);\r\n        }\r\n\r\n        return (whitelistedCurrencies, cursor + length);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/libraries/InterfaceChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n/**\r\n * @title InterfaceChecker\r\n * @notice This library allows check the inferface of the contracts.\r\n */\r\nlibrary InterfaceChecker {\r\n    function check(\r\n        address tokenContract,\r\n        bytes4 interfaceId\r\n    ) internal returns (bool) {\r\n        bytes memory payload = abi.encodeWithSignature(\"supportsInterface(bytes4)\", interfaceId);\r\n        (bool success, bytes memory returnData) = tokenContract.call(payload);\r\n        if (!success) return false;\r\n\r\n        (bool result) = abi.decode(returnData, (bool));\r\n        return result;\r\n    }\r\n}"
    },
    "contracts/core/ExecutionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nimport {IExecutionManager} from \"../interfaces/IExecutionManager.sol\";\r\n\r\n/**\r\n * @title ExecutionManager\r\n * @notice It allows adding/removing execution strategies for trading on the OmniX exchange.\r\n */\r\ncontract ExecutionManager is IExecutionManager, Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    EnumerableSet.AddressSet private _whitelistedStrategies;\r\n\r\n    event StrategyRemoved(address indexed strategy);\r\n    event StrategyWhitelisted(address indexed strategy);\r\n\r\n    /**\r\n     * @notice Add an execution strategy in the system\r\n     * @param strategy address of the strategy to add\r\n     */\r\n    function addStrategy(address strategy) external override onlyOwner {\r\n        require(!_whitelistedStrategies.contains(strategy), \"Strategy: Already whitelisted\");\r\n        _whitelistedStrategies.add(strategy);\r\n\r\n        emit StrategyWhitelisted(strategy);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove an execution strategy from the system\r\n     * @param strategy address of the strategy to remove\r\n     */\r\n    function removeStrategy(address strategy) external override onlyOwner {\r\n        require(_whitelistedStrategies.contains(strategy), \"Strategy: Not whitelisted\");\r\n        _whitelistedStrategies.remove(strategy);\r\n\r\n        emit StrategyRemoved(strategy);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns if an execution strategy is in the system\r\n     * @param strategy address of the strategy\r\n     */\r\n    function isStrategyWhitelisted(address strategy) external view override returns (bool) {\r\n        return _whitelistedStrategies.contains(strategy);\r\n    }\r\n\r\n    /**\r\n     * @notice View number of whitelisted strategies\r\n     */\r\n    function viewCountWhitelistedStrategies() external view override returns (uint256) {\r\n        return _whitelistedStrategies.length();\r\n    }\r\n\r\n    /**\r\n     * @notice See whitelisted strategies in the system\r\n     * @param cursor cursor (should start at 0 for first request)\r\n     * @param size size of the response (e.g., 50)\r\n     */\r\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size)\r\n        external\r\n        view\r\n        override\r\n        returns (address[] memory, uint256)\r\n    {\r\n        uint256 length = size;\r\n\r\n        if (length > _whitelistedStrategies.length() - cursor) {\r\n            length = _whitelistedStrategies.length() - cursor;\r\n        }\r\n\r\n        address[] memory whitelistedStrategies = new address[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            whitelistedStrategies[i] = _whitelistedStrategies.at(cursor + i);\r\n        }\r\n\r\n        return (whitelistedStrategies, cursor + length);\r\n    }\r\n}"
    },
    "contracts/mocks/LZEndpointMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\nimport \"../interfaces/ILayerZeroReceiver.sol\";\r\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\r\nimport \"../libraries/LzLib.sol\";\r\n\r\n/*\r\nlike a real LayerZero endpoint but can be mocked, which handle message transmission, verification, and receipt.\r\n- blocking: LayerZero provides ordered delivery of messages from a given sender to a destination chain.\r\n- non-reentrancy: endpoint has a non-reentrancy guard for both the send() and receive(), respectively.\r\n- adapter parameters: allows UAs to add arbitrary transaction params in the send() function, like airdrop on destination chain.\r\nunlike a real LayerZero endpoint, it is\r\n- no messaging library versioning\r\n- send() will short circuit to lzReceive()\r\n- no user application configuration\r\n*/\r\ncontract LZEndpointMock is ILayerZeroEndpoint {\r\n    uint8 internal constant _NOT_ENTERED = 1;\r\n    uint8 internal constant _ENTERED = 2;\r\n\r\n    mapping(address => address) public lzEndpointLookup;\r\n\r\n    uint16 public mockChainId;\r\n    bool public nextMsgBlocked;\r\n\r\n    // fee config\r\n    RelayerFeeConfig public relayerFeeConfig;\r\n    ProtocolFeeConfig public protocolFeeConfig;\r\n    uint public oracleFee;\r\n    bytes public defaultAdapterParams;\r\n\r\n    // path = remote addrss + local address\r\n    // inboundNonce = [srcChainId][path].\r\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\r\n    //todo: this is a hack\r\n    // outboundNonce = [dstChainId][srcAddress]\r\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\r\n    //    // outboundNonce = [dstChainId][path].\r\n    //    mapping(uint16 => mapping(bytes => uint64)) public outboundNonce;\r\n    // storedPayload = [srcChainId][path]\r\n    mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;\r\n    // msgToDeliver = [srcChainId][path]\r\n    mapping(uint16 => mapping(bytes => QueuedPayload[])) public msgsToDeliver;\r\n\r\n    // reentrancy guard\r\n    uint8 internal _send_entered_state = 1;\r\n    uint8 internal _receive_entered_state = 1;\r\n\r\n    struct ProtocolFeeConfig {\r\n        uint zroFee;\r\n        uint nativeBP;\r\n    }\r\n\r\n    struct RelayerFeeConfig {\r\n        uint128 dstPriceRatio; // 10^10\r\n        uint128 dstGasPriceInWei;\r\n        uint128 dstNativeAmtCap;\r\n        uint64 baseGas;\r\n        uint64 gasPerByte;\r\n    }\r\n\r\n    struct StoredPayload {\r\n        uint64 payloadLength;\r\n        address dstAddress;\r\n        bytes32 payloadHash;\r\n    }\r\n\r\n    struct QueuedPayload {\r\n        address dstAddress;\r\n        uint64 nonce;\r\n        bytes payload;\r\n    }\r\n\r\n    modifier sendNonReentrant() {\r\n        require(_send_entered_state == _NOT_ENTERED, \"LayerZeroMock: no send reentrancy\");\r\n        _send_entered_state = _ENTERED;\r\n        _;\r\n        _send_entered_state = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier receiveNonReentrant() {\r\n        require(_receive_entered_state == _NOT_ENTERED, \"LayerZeroMock: no receive reentrancy\");\r\n        _receive_entered_state = _ENTERED;\r\n        _;\r\n        _receive_entered_state = _NOT_ENTERED;\r\n    }\r\n\r\n    event UaForceResumeReceive(uint16 chainId, bytes srcAddress);\r\n    event PayloadCleared(uint16 srcChainId, bytes srcAddress, uint64 nonce, address dstAddress);\r\n    event PayloadStored(uint16 srcChainId, bytes srcAddress, address dstAddress, uint64 nonce, bytes payload, bytes reason);\r\n    event ValueTransferFailed(address indexed to, uint indexed quantity);\r\n\r\n    constructor(uint16 _chainId) {\r\n        mockChainId = _chainId;\r\n\r\n        // init config\r\n        relayerFeeConfig = RelayerFeeConfig({\r\n            dstPriceRatio: 1e10, // 1:1, same chain, same native coin\r\n            dstGasPriceInWei: 1e10,\r\n            dstNativeAmtCap: 1e19,\r\n            baseGas: 100,\r\n            gasPerByte: 1\r\n        });\r\n        protocolFeeConfig = ProtocolFeeConfig({zroFee: 1e18, nativeBP: 1000}); // BP 0.1\r\n        oracleFee = 1e16;\r\n        defaultAdapterParams = LzLib.buildDefaultAdapterParams(200000);\r\n    }\r\n\r\n    // ------------------------------ ILayerZeroEndpoint Functions ------------------------------\r\n    function send(uint16 _chainId, bytes memory _path, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) external payable override {\r\n        require(_path.length == 40, \"LayerZeroMock: incorrect remote address size\"); // only support evm chains\r\n\r\n        address dstAddr;\r\n        assembly {\r\n            dstAddr := mload(add(_path, 20))\r\n        }\r\n\r\n        address lzEndpoint = lzEndpointLookup[dstAddr];\r\n        require(lzEndpoint != address(0), \"LayerZeroMock: destination LayerZero Endpoint not found\");\r\n\r\n        // not handle zro token\r\n        bytes memory adapterParams = _adapterParams.length > 0 ? _adapterParams : defaultAdapterParams;\r\n        (uint nativeFee, ) = estimateFees(_chainId, msg.sender, _payload, _zroPaymentAddress != address(0x0), adapterParams);\r\n        require(msg.value >= nativeFee, \"LayerZeroMock: not enough native for fees\");\r\n\r\n        uint64 nonce = ++outboundNonce[_chainId][msg.sender];\r\n\r\n        // refund if they send too much\r\n        uint amount = msg.value - nativeFee;\r\n        if (amount > 0) {\r\n            (bool success, ) = _refundAddress.call{value: amount}(\"\");\r\n            require(success, \"LayerZeroMock: failed to refund\");\r\n        }\r\n\r\n        // Mock the process of receiving msg on dst chain\r\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\r\n        (, uint extraGas, uint dstNativeAmt, address payable dstNativeAddr) = LzLib.decodeAdapterParams(adapterParams);\r\n\r\n        if (dstNativeAmt > 0) {\r\n            (bool success, ) = dstNativeAddr.call{value: dstNativeAmt}(\"\");\r\n            if (!success) {\r\n                emit ValueTransferFailed(dstNativeAddr, dstNativeAmt);\r\n            }\r\n        }\r\n\r\n        bytes memory srcUaAddress = abi.encodePacked(msg.sender, dstAddr); // cast this address to bytes\r\n        bytes memory payload = _payload;\r\n        LZEndpointMock(lzEndpoint).receivePayload(mockChainId, srcUaAddress, dstAddr, nonce, extraGas, payload);\r\n    }\r\n\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _path, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n\r\n        // assert and increment the nonce. no message shuffling\r\n        require(_nonce == ++inboundNonce[_srcChainId][_path], \"LayerZeroMock: wrong nonce\");\r\n\r\n        // queue the following msgs inside of a stack to simulate a successful send on src, but not fully delivered on dst\r\n        if (sp.payloadHash != bytes32(0)) {\r\n            QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_path];\r\n            QueuedPayload memory newMsg = QueuedPayload(_dstAddress, _nonce, _payload);\r\n\r\n            // warning, might run into gas issues trying to forward through a bunch of queued msgs\r\n            // shift all the msgs over so we can treat this like a fifo via array.pop()\r\n            if (msgs.length > 0) {\r\n                // extend the array\r\n                msgs.push(newMsg);\r\n\r\n                // shift all the indexes up for pop()\r\n                for (uint i = 0; i < msgs.length - 1; i++) {\r\n                    msgs[i + 1] = msgs[i];\r\n                }\r\n\r\n                // put the newMsg at the bottom of the stack\r\n                msgs[0] = newMsg;\r\n            } else {\r\n                msgs.push(newMsg);\r\n            }\r\n        } else if (nextMsgBlocked) {\r\n            storedPayload[_srcChainId][_path] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\r\n            emit PayloadStored(_srcChainId, _path, _dstAddress, _nonce, _payload, bytes(\"\"));\r\n            // ensure the next msgs that go through are no longer blocked\r\n            nextMsgBlocked = false;\r\n        } else {\r\n            try ILayerZeroReceiver(_dstAddress).lzReceive{gas: _gasLimit}(_srcChainId, _path, _nonce, _payload) {} catch (bytes memory reason) {\r\n                storedPayload[_srcChainId][_path] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\r\n                emit PayloadStored(_srcChainId, _path, _dstAddress, _nonce, _payload, reason);\r\n                // ensure the next msgs that go through are no longer blocked\r\n                nextMsgBlocked = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getInboundNonce(uint16 _chainID, bytes calldata _path) external view override returns (uint64) {\r\n        return inboundNonce[_chainID][_path];\r\n    }\r\n\r\n    function getOutboundNonce(uint16 _chainID, address _srcAddress) external view override returns (uint64) {\r\n        return outboundNonce[_chainID][_srcAddress];\r\n    }\r\n\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes memory _payload, bool _payInZRO, bytes memory _adapterParams) public view override returns (uint nativeFee, uint zroFee) {\r\n        bytes memory adapterParams = _adapterParams.length > 0 ? _adapterParams : defaultAdapterParams;\r\n\r\n        // Relayer Fee\r\n        uint relayerFee = _getRelayerFee(_dstChainId, 1, _userApplication, _payload.length, adapterParams);\r\n\r\n        // LayerZero Fee\r\n        uint protocolFee = _getProtocolFees(_payInZRO, relayerFee, oracleFee);\r\n        _payInZRO ? zroFee = protocolFee : nativeFee = protocolFee;\r\n\r\n        // return the sum of fees\r\n        nativeFee = nativeFee + relayerFee + oracleFee;\r\n    }\r\n\r\n    function getChainId() external view override returns (uint16) {\r\n        return mockChainId;\r\n    }\r\n\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _path, bytes calldata _payload) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n        require(sp.payloadHash != bytes32(0), \"LayerZeroMock: no stored payload\");\r\n        require(_payload.length == sp.payloadLength && keccak256(_payload) == sp.payloadHash, \"LayerZeroMock: invalid payload\");\r\n\r\n        address dstAddress = sp.dstAddress;\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        uint64 nonce = inboundNonce[_srcChainId][_path];\r\n\r\n        ILayerZeroReceiver(dstAddress).lzReceive(_srcChainId, _path, nonce, _payload);\r\n        emit PayloadCleared(_srcChainId, _path, nonce, dstAddress);\r\n    }\r\n\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _path) external view override returns (bool) {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n        return sp.payloadHash != bytes32(0);\r\n    }\r\n\r\n    function getSendLibraryAddress(address) external view override returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function getReceiveLibraryAddress(address) external view override returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function isSendingPayload() external view override returns (bool) {\r\n        return _send_entered_state == _ENTERED;\r\n    }\r\n\r\n    function isReceivingPayload() external view override returns (bool) {\r\n        return _receive_entered_state == _ENTERED;\r\n    }\r\n\r\n    function getConfig(\r\n        uint16, /*_version*/\r\n        uint16, /*_chainId*/\r\n        address, /*_ua*/\r\n        uint /*_configType*/\r\n    ) external pure override returns (bytes memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function getSendVersion(\r\n        address /*_userApplication*/\r\n    ) external pure override returns (uint16) {\r\n        return 1;\r\n    }\r\n\r\n    function getReceiveVersion(\r\n        address /*_userApplication*/\r\n    ) external pure override returns (uint16) {\r\n        return 1;\r\n    }\r\n\r\n    function setConfig(\r\n        uint16, /*_version*/\r\n        uint16, /*_chainId*/\r\n        uint, /*_configType*/\r\n        bytes memory /*_config*/\r\n    ) external override {}\r\n\r\n    function setSendVersion(\r\n        uint16 /*version*/\r\n    ) external override {}\r\n\r\n    function setReceiveVersion(\r\n        uint16 /*version*/\r\n    ) external override {}\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _path) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_path];\r\n        // revert if no messages are cached. safeguard malicious UA behaviour\r\n        require(sp.payloadHash != bytes32(0), \"LayerZeroMock: no stored payload\");\r\n        require(sp.dstAddress == msg.sender, \"LayerZeroMock: invalid caller\");\r\n\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        emit UaForceResumeReceive(_srcChainId, _path);\r\n\r\n        // resume the receiving of msgs after we force clear the \"stuck\" msg\r\n        _clearMsgQue(_srcChainId, _path);\r\n    }\r\n\r\n    // ------------------------------ Other Public/External Functions --------------------------------------------------\r\n\r\n    function getLengthOfQueue(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint) {\r\n        return msgsToDeliver[_srcChainId][_srcAddress].length;\r\n    }\r\n\r\n    // used to simulate messages received get stored as a payload\r\n    function blockNextMsg() external {\r\n        nextMsgBlocked = true;\r\n    }\r\n\r\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {\r\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\r\n    }\r\n\r\n    function setRelayerPrice(uint128 _dstPriceRatio, uint128 _dstGasPriceInWei, uint128 _dstNativeAmtCap, uint64 _baseGas, uint64 _gasPerByte) external {\r\n        relayerFeeConfig.dstPriceRatio = _dstPriceRatio;\r\n        relayerFeeConfig.dstGasPriceInWei = _dstGasPriceInWei;\r\n        relayerFeeConfig.dstNativeAmtCap = _dstNativeAmtCap;\r\n        relayerFeeConfig.baseGas = _baseGas;\r\n        relayerFeeConfig.gasPerByte = _gasPerByte;\r\n    }\r\n\r\n    function setProtocolFee(uint _zroFee, uint _nativeBP) external {\r\n        protocolFeeConfig.zroFee = _zroFee;\r\n        protocolFeeConfig.nativeBP = _nativeBP;\r\n    }\r\n\r\n    function setOracleFee(uint _oracleFee) external {\r\n        oracleFee = _oracleFee;\r\n    }\r\n\r\n    function setDefaultAdapterParams(bytes memory _adapterParams) external {\r\n        defaultAdapterParams = _adapterParams;\r\n    }\r\n\r\n    // --------------------- Internal Functions ---------------------\r\n    // simulates the relayer pushing through the rest of the msgs that got delayed due to the stored payload\r\n    function _clearMsgQue(uint16 _srcChainId, bytes calldata _path) internal {\r\n        QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_path];\r\n\r\n        // warning, might run into gas issues trying to forward through a bunch of queued msgs\r\n        while (msgs.length > 0) {\r\n            QueuedPayload memory payload = msgs[msgs.length - 1];\r\n            ILayerZeroReceiver(payload.dstAddress).lzReceive(_srcChainId, _path, payload.nonce, payload.payload);\r\n            msgs.pop();\r\n        }\r\n    }\r\n\r\n    function _getProtocolFees(bool _payInZro, uint _relayerFee, uint _oracleFee) internal view returns (uint) {\r\n        if (_payInZro) {\r\n            return protocolFeeConfig.zroFee;\r\n        } else {\r\n            return ((_relayerFee + _oracleFee) * protocolFeeConfig.nativeBP) / 10000;\r\n        }\r\n    }\r\n\r\n    function _getRelayerFee(\r\n        uint16, /* _dstChainId */\r\n        uint16, /* _outboundProofType */\r\n        address, /* _userApplication */\r\n        uint _payloadSize,\r\n        bytes memory _adapterParams\r\n    ) internal view returns (uint) {\r\n        (uint16 txType, uint extraGas, uint dstNativeAmt, ) = LzLib.decodeAdapterParams(_adapterParams);\r\n        uint totalRemoteToken; // = baseGas + extraGas + requiredNativeAmount\r\n        if (txType == 2) {\r\n            require(relayerFeeConfig.dstNativeAmtCap >= dstNativeAmt, \"LayerZeroMock: dstNativeAmt too large \");\r\n            totalRemoteToken += dstNativeAmt;\r\n        }\r\n        // remoteGasTotal = dstGasPriceInWei * (baseGas + extraGas)\r\n        uint remoteGasTotal = relayerFeeConfig.dstGasPriceInWei * (relayerFeeConfig.baseGas + extraGas);\r\n        totalRemoteToken += remoteGasTotal;\r\n\r\n        // tokenConversionRate = dstPrice / localPrice\r\n        // basePrice = totalRemoteToken * tokenConversionRate\r\n        uint basePrice = (totalRemoteToken * relayerFeeConfig.dstPriceRatio) / 10**10;\r\n\r\n        // pricePerByte = (dstGasPriceInWei * gasPerBytes) * tokenConversionRate\r\n        uint pricePerByte = (relayerFeeConfig.dstGasPriceInWei * relayerFeeConfig.gasPerByte * relayerFeeConfig.dstPriceRatio) / 10**10;\r\n\r\n        return basePrice + _payloadSize * pricePerByte;\r\n    }\r\n}"
    },
    "contracts/libraries/LzLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary LzLib {\r\n    // LayerZero communication\r\n    struct CallParams {\r\n        address payable refundAddress;\r\n        address zroPaymentAddress;\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // Address type handling\r\n\r\n    struct AirdropParams {\r\n        uint airdropAmount;\r\n        bytes32 airdropAddress;\r\n    }\r\n\r\n    function buildAdapterParams(LzLib.AirdropParams memory _airdropParams, uint _uaGasLimit) internal pure returns (bytes memory adapterParams) {\r\n        if (_airdropParams.airdropAmount == 0 && _airdropParams.airdropAddress == bytes32(0x0)) {\r\n            adapterParams = buildDefaultAdapterParams(_uaGasLimit);\r\n        } else {\r\n            adapterParams = buildAirdropAdapterParams(_uaGasLimit, _airdropParams);\r\n        }\r\n    }\r\n\r\n    // Build Adapter Params\r\n    function buildDefaultAdapterParams(uint _uaGas) internal pure returns (bytes memory) {\r\n        // txType 1\r\n        // bytes  [2       32      ]\r\n        // fields [txType  extraGas]\r\n        return abi.encodePacked(uint16(1), _uaGas);\r\n    }\r\n\r\n    function buildAirdropAdapterParams(uint _uaGas, AirdropParams memory _params) internal pure returns (bytes memory) {\r\n        require(_params.airdropAmount > 0, \"Airdrop amount must be greater than 0\");\r\n        require(_params.airdropAddress != bytes32(0x0), \"Airdrop address must be set\");\r\n\r\n        // txType 2\r\n        // bytes  [2       32        32            bytes[]         ]\r\n        // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\r\n        return abi.encodePacked(uint16(2), _uaGas, _params.airdropAmount, _params.airdropAddress);\r\n    }\r\n\r\n    function getGasLimit(bytes memory _adapterParams) internal pure returns (uint gasLimit) {\r\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \"Invalid adapterParams\");\r\n        assembly {\r\n            gasLimit := mload(add(_adapterParams, 34))\r\n        }\r\n    }\r\n\r\n    // Decode Adapter Params\r\n    function decodeAdapterParams(bytes memory _adapterParams) internal pure returns (uint16 txType, uint uaGas, uint airdropAmount, address payable airdropAddress) {\r\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \"Invalid adapterParams\");\r\n        assembly {\r\n            txType := mload(add(_adapterParams, 2))\r\n            uaGas := mload(add(_adapterParams, 34))\r\n        }\r\n        require(txType == 1 || txType == 2, \"Unsupported txType\");\r\n        require(uaGas > 0, \"Gas too low\");\r\n\r\n        if (txType == 2) {\r\n            assembly {\r\n                airdropAmount := mload(add(_adapterParams, 66))\r\n                airdropAddress := mload(add(_adapterParams, 86))\r\n            }\r\n        }\r\n    }\r\n\r\n    //---------------------------------------------------------------------------\r\n    // Address type handling\r\n    // TODO: testing\r\n    function bytes32ToAddress(bytes32 _bytes32Address) internal pure returns (address _address) {\r\n        require(bytes12(_bytes32Address) == bytes12(0), \"Invalid address\"); // first 12 bytes should be empty\r\n        return address(uint160(uint(_bytes32Address)));\r\n    }\r\n\r\n    function addressToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\r\n        return bytes32(uint(uint160(_address)));\r\n    }\r\n}"
    },
    "contracts/mocks/StargateFeeLibraryMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.2;\r\nimport {IStargateFeeLibrary} from \"../interfaces/IStargateFeeLibrary.sol\";\r\nimport {Pool} from \"../stargate/Pool.sol\";\r\n\r\ncontract StargateFeeLibraryMock is IStargateFeeLibrary {\r\n  /**\r\n    uint256 _srcPoolId,\r\n    uint256 _dstPoolId,\r\n    uint16 _dstChainId,\r\n    address _from,\r\n    uint256 _amountSD\r\n   */\r\n  function getFees(\r\n    uint256,\r\n    uint256,\r\n    uint16,\r\n    address,\r\n    uint256 _amountSD\r\n  ) external pure override returns (Pool.SwapObj memory s) {\r\n    s.amount = _amountSD;\r\n    s.eqFee = 0;\r\n    s.eqReward = 0;\r\n    s.lpFee = 0;\r\n    s.protocolFee = 0;\r\n    s.lkbRemove = 0;\r\n  }\r\n\r\n  function getVersion() external pure override returns (string memory) {\r\n    return \"1\";\r\n  }\r\n}"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../stargate/LPTokenERC20.sol\";\r\n\r\ncontract ERC20Mock is LPTokenERC20\r\n{\r\n  constructor() LPTokenERC20(\"USDC\", \"usd\") {\r\n    decimals = 18;\r\n  }\r\n\r\n  function mint(address to, uint256 amount) external {\r\n    _mint(to, amount);\r\n  }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n}\n"
    },
    "contracts/token/oft/extension/GlobalCappedOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./BasedOFT.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\";\r\n\r\n/**\r\n * @dev Extension of {OFT} that adds a global cap to the supply of tokens across all chains.\r\n */\r\ncontract GlobalCappedOFT is BasedOFT, ERC20Capped {\r\n    constructor(string memory _name, string memory _symbol, uint _cap, address _lzEndpoint) BasedOFT(_name, _symbol, _lzEndpoint) ERC20Capped(_cap) {}\r\n\r\n    function _mint(address account, uint amount) internal virtual override(ERC20, ERC20Capped) {\r\n        ERC20Capped._mint(account, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/extension/BasedOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFT.sol\";\r\n\r\ncontract BasedOFT is OFT {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) OFT(_name, _symbol, _lzEndpoint) {}\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        unchecked {\r\n            return totalSupply() - balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _transfer(_from, address(this), _amount);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override {\r\n        _transfer(address(this), _toAddress, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/rewards/FeeSharingSystem.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {TokenDistributor} from \"./TokenDistributor.sol\";\r\n\r\n/**\r\n * @title FeeSharingSystem\r\n * @notice It handles the distribution of fees using\r\n * WETH along with the auto-compounding of LOOKS.\r\n */\r\ncontract FeeSharingSystem is ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 shares; // shares of token staked\r\n        uint256 userRewardPerTokenPaid; // user reward per token paid\r\n        uint256 rewards; // pending rewards\r\n    }\r\n\r\n    // Precision factor for calculating rewards and exchange rate\r\n    uint256 public constant PRECISION_FACTOR = 10**18;\r\n\r\n    IERC20 public immutable looksRareToken;\r\n\r\n    IERC20 public immutable rewardToken;\r\n\r\n    TokenDistributor public immutable tokenDistributor;\r\n\r\n    // Reward rate (block)\r\n    uint256 public currentRewardPerBlock;\r\n\r\n    // Last reward adjustment block number\r\n    uint256 public lastRewardAdjustment;\r\n\r\n    // Last update block for rewards\r\n    uint256 public lastUpdateBlock;\r\n\r\n    // Current end block for the current reward period\r\n    uint256 public periodEndBlock;\r\n\r\n    // Reward per token stored\r\n    uint256 public rewardPerTokenStored;\r\n\r\n    // Total existing shares\r\n    uint256 public totalShares;\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    event Deposit(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n    event Harvest(address indexed user, uint256 harvestedAmount);\r\n    event NewRewardPeriod(uint256 numberBlocks, uint256 rewardPerBlock, uint256 reward);\r\n    event Withdraw(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _looksRareToken address of the token staked (LOOKS)\r\n     * @param _rewardToken address of the reward token\r\n     * @param _tokenDistributor address of the token distributor contract\r\n     */\r\n    constructor(\r\n        address _looksRareToken,\r\n        address _rewardToken,\r\n        address _tokenDistributor\r\n    ) {\r\n        rewardToken = IERC20(_rewardToken);\r\n        looksRareToken = IERC20(_looksRareToken);\r\n        tokenDistributor = TokenDistributor(_tokenDistributor);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit staked tokens (and collect reward tokens if requested)\r\n     * @param amount amount to deposit (in LOOKS)\r\n     * @param claimRewardToken whether to claim reward tokens\r\n     * @dev There is a limit of 1 LOOKS per deposit to prevent potential manipulation of current shares\r\n     */\r\n    function deposit(uint256 amount, bool claimRewardToken) external nonReentrant {\r\n        require(amount >= PRECISION_FACTOR, \"Deposit: Amount must be >= 1 LOOKS\");\r\n\r\n        // Auto compounds for everyone\r\n        tokenDistributor.harvestAndCompound();\r\n\r\n        // Update reward for user\r\n        _updateReward(msg.sender);\r\n\r\n        // Retrieve total amount staked by this contract\r\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\r\n\r\n        // Transfer LOOKS tokens to this address\r\n        looksRareToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        uint256 currentShares;\r\n\r\n        // Calculate the number of shares to issue for the user\r\n        if (totalShares != 0) {\r\n            currentShares = (amount * totalShares) / totalAmountStaked;\r\n            // This is a sanity check to prevent deposit for 0 shares\r\n            require(currentShares != 0, \"Deposit: Fail\");\r\n        } else {\r\n            currentShares = amount;\r\n        }\r\n\r\n        // Adjust internal shares\r\n        userInfo[msg.sender].shares += currentShares;\r\n        totalShares += currentShares;\r\n\r\n        uint256 pendingRewards;\r\n\r\n        if (claimRewardToken) {\r\n            // Fetch pending rewards\r\n            pendingRewards = userInfo[msg.sender].rewards;\r\n\r\n            if (pendingRewards > 0) {\r\n                userInfo[msg.sender].rewards = 0;\r\n                rewardToken.safeTransfer(msg.sender, pendingRewards);\r\n            }\r\n        }\r\n\r\n        // Verify LOOKS token allowance and adjust if necessary\r\n        _checkAndAdjustLOOKSTokenAllowanceIfRequired(amount, address(tokenDistributor));\r\n\r\n        // Deposit user amount in the token distributor contract\r\n        tokenDistributor.deposit(amount);\r\n\r\n        emit Deposit(msg.sender, amount, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Harvest reward tokens that are pending\r\n     */\r\n    function harvest() external nonReentrant {\r\n        // Auto compounds for everyone\r\n        tokenDistributor.harvestAndCompound();\r\n\r\n        // Update reward for user\r\n        _updateReward(msg.sender);\r\n\r\n        // Retrieve pending rewards\r\n        uint256 pendingRewards = userInfo[msg.sender].rewards;\r\n\r\n        // If pending rewards are null, revert\r\n        require(pendingRewards > 0, \"Harvest: Pending rewards must be > 0\");\r\n\r\n        // Adjust user rewards and transfer\r\n        userInfo[msg.sender].rewards = 0;\r\n\r\n        // Transfer reward token to sender\r\n        rewardToken.safeTransfer(msg.sender, pendingRewards);\r\n\r\n        emit Harvest(msg.sender, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens (and collect reward tokens if requested)\r\n     * @param shares shares to withdraw\r\n     * @param claimRewardToken whether to claim reward tokens\r\n     */\r\n    function withdraw(uint256 shares, bool claimRewardToken) external nonReentrant {\r\n        require(\r\n            (shares > 0) && (shares <= userInfo[msg.sender].shares),\r\n            \"Withdraw: Shares equal to 0 or larger than user shares\"\r\n        );\r\n\r\n        _withdraw(shares, claimRewardToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw all staked tokens (and collect reward tokens if requested)\r\n     * @param claimRewardToken whether to claim reward tokens\r\n     */\r\n    function withdrawAll(bool claimRewardToken) external nonReentrant {\r\n        _withdraw(userInfo[msg.sender].shares, claimRewardToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the reward per block (in rewardToken)\r\n     * @dev Only callable by owner. Owner is meant to be another smart contract.\r\n     */\r\n    function updateRewards(uint256 reward, uint256 rewardDurationInBlocks) external onlyOwner {\r\n        // Adjust the current reward per block\r\n        if (block.number >= periodEndBlock) {\r\n            currentRewardPerBlock = reward / rewardDurationInBlocks;\r\n        } else {\r\n            currentRewardPerBlock =\r\n                (reward + ((periodEndBlock - block.number) * currentRewardPerBlock)) /\r\n                rewardDurationInBlocks;\r\n        }\r\n\r\n        lastUpdateBlock = block.number;\r\n        periodEndBlock = block.number + rewardDurationInBlocks;\r\n\r\n        emit NewRewardPeriod(rewardDurationInBlocks, currentRewardPerBlock, reward);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate pending rewards (WETH) for a user\r\n     * @param user address of the user\r\n     */\r\n    function calculatePendingRewards(address user) external view returns (uint256) {\r\n        return _calculatePendingRewards(user);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate value of LOOKS for a user given a number of shares owned\r\n     * @param user address of the user\r\n     */\r\n    function calculateSharesValueInLOOKS(address user) external view returns (uint256) {\r\n        // Retrieve amount staked\r\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\r\n\r\n        // Adjust for pending rewards\r\n        totalAmountStaked += tokenDistributor.calculatePendingRewards(address(this));\r\n\r\n        // Return user pro-rata of total shares\r\n        return userInfo[user].shares == 0 ? 0 : (totalAmountStaked * userInfo[user].shares) / totalShares;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate price of one share (in LOOKS token)\r\n     * Share price is expressed times 1e18\r\n     */\r\n    function calculateSharePriceInLOOKS() external view returns (uint256) {\r\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\r\n\r\n        // Adjust for pending rewards\r\n        totalAmountStaked += tokenDistributor.calculatePendingRewards(address(this));\r\n\r\n        return totalShares == 0 ? PRECISION_FACTOR : (totalAmountStaked * PRECISION_FACTOR) / (totalShares);\r\n    }\r\n\r\n    /**\r\n     * @notice Return last block where trading rewards were distributed\r\n     */\r\n    function lastRewardBlock() external view returns (uint256) {\r\n        return _lastRewardBlock();\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate pending rewards for a user\r\n     * @param user address of the user\r\n     */\r\n    function _calculatePendingRewards(address user) internal view returns (uint256) {\r\n        return\r\n            ((userInfo[user].shares * (_rewardPerToken() - (userInfo[user].userRewardPerTokenPaid))) /\r\n                PRECISION_FACTOR) + userInfo[user].rewards;\r\n    }\r\n\r\n    /**\r\n     * @notice Check current allowance and adjust if necessary\r\n     * @param _amount amount to transfer\r\n     * @param _to token to transfer\r\n     */\r\n    function _checkAndAdjustLOOKSTokenAllowanceIfRequired(uint256 _amount, address _to) internal {\r\n        if (looksRareToken.allowance(address(this), _to) < _amount) {\r\n            looksRareToken.approve(_to, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Return last block where rewards must be distributed\r\n     */\r\n    function _lastRewardBlock() internal view returns (uint256) {\r\n        return block.number < periodEndBlock ? block.number : periodEndBlock;\r\n    }\r\n\r\n    /**\r\n     * @notice Return reward per token\r\n     */\r\n    function _rewardPerToken() internal view returns (uint256) {\r\n        if (totalShares == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n\r\n        return\r\n            rewardPerTokenStored +\r\n            ((_lastRewardBlock() - lastUpdateBlock) * (currentRewardPerBlock * PRECISION_FACTOR)) /\r\n            totalShares;\r\n    }\r\n\r\n    /**\r\n     * @notice Update reward for a user account\r\n     * @param _user address of the user\r\n     */\r\n    function _updateReward(address _user) internal {\r\n        if (block.number != lastUpdateBlock) {\r\n            rewardPerTokenStored = _rewardPerToken();\r\n            lastUpdateBlock = _lastRewardBlock();\r\n        }\r\n\r\n        userInfo[_user].rewards = _calculatePendingRewards(_user);\r\n        userInfo[_user].userRewardPerTokenPaid = rewardPerTokenStored;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens (and collect reward tokens if requested)\r\n     * @param shares shares to withdraw\r\n     * @param claimRewardToken whether to claim reward tokens\r\n     */\r\n    function _withdraw(uint256 shares, bool claimRewardToken) internal {\r\n        // Auto compounds for everyone\r\n        tokenDistributor.harvestAndCompound();\r\n\r\n        // Update reward for user\r\n        _updateReward(msg.sender);\r\n\r\n        // Retrieve total amount staked and calculated current amount (in LOOKS)\r\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\r\n        uint256 currentAmount = (totalAmountStaked * shares) / totalShares;\r\n\r\n        userInfo[msg.sender].shares -= shares;\r\n        totalShares -= shares;\r\n\r\n        // Withdraw amount equivalent in shares\r\n        tokenDistributor.withdraw(currentAmount);\r\n\r\n        uint256 pendingRewards;\r\n\r\n        if (claimRewardToken) {\r\n            // Fetch pending rewards\r\n            pendingRewards = userInfo[msg.sender].rewards;\r\n\r\n            if (pendingRewards > 0) {\r\n                userInfo[msg.sender].rewards = 0;\r\n                rewardToken.safeTransfer(msg.sender, pendingRewards);\r\n            }\r\n        }\r\n\r\n        // Transfer LOOKS tokens to sender\r\n        looksRareToken.safeTransfer(msg.sender, currentAmount);\r\n\r\n        emit Withdraw(msg.sender, currentAmount, pendingRewards);\r\n    }\r\n}"
    },
    "contracts/mocks/OFTMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../token/oft/OFT.sol\";\r\n\r\n/**\r\n * @dev Extension of {OFT} that adds a global cap to the supply of tokens across all chains.\r\n */\r\ncontract OFTMock is OFT {\r\n    constructor(string memory _name, string memory _symbol, uint _cap, address _lzEndpoint) OFT(_name, _symbol, _lzEndpoint) {\r\n        _mint(msg.sender, _cap);\r\n    }\r\n\r\n    function mint(uint amount) external {\r\n        _mint(msg.sender, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/core/TransferSelectorNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\nimport {ITransferSelectorNFT} from \"../interfaces/ITransferSelectorNFT.sol\";\r\nimport {ITransferManagerNFT} from \"../interfaces/ITransferManagerNFT.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\n/**\r\n * @title TransferSelectorNFT\r\n * @notice It selects the NFT transfer manager based on a collection address.\r\n */\r\ncontract TransferSelectorNFT is ITransferSelectorNFT, Ownable {\r\n    // ERC721 interfaceID\r\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    // ERC1155 interfaceID\r\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\r\n\r\n    // Address of the transfer manager contract for ERC721 tokens\r\n    address public immutable TRANSFER_MANAGER_ERC721;\r\n\r\n    // Address of the transfer manager contract for ERC1155 tokens\r\n    address public immutable TRANSFER_MANAGER_ERC1155;\r\n\r\n    // Map collection address to transfer manager address\r\n    mapping(address => address) public transferManagerSelectorForCollection;\r\n\r\n    event CollectionTransferManagerAdded(address indexed collection, address indexed transferManager);\r\n    event CollectionTransferManagerRemoved(address indexed collection);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _transferManagerERC721 address of the ERC721 transfer manager\r\n     * @param _transferManagerERC1155 address of the ERC1155 transfer manager\r\n     */\r\n    constructor(\r\n        address _transferManagerERC721,\r\n        address _transferManagerERC1155\r\n    ) {\r\n        TRANSFER_MANAGER_ERC721 = _transferManagerERC721;\r\n        TRANSFER_MANAGER_ERC1155 = _transferManagerERC1155;\r\n    }\r\n\r\n    /**\r\n     * @notice Add a transfer manager for a collection\r\n     * @param collection collection address to add specific transfer rule\r\n     * @dev It is meant to be used for exceptions only (e.g., CryptoKitties)\r\n     */\r\n    function addCollectionTransferManager(address collection, address transferManager) external onlyOwner {\r\n        require(collection != address(0), \"Owner: Collection cannot be null address\");\r\n        require(transferManager != address(0), \"Owner: TransferManager cannot be null address\");\r\n\r\n        transferManagerSelectorForCollection[collection] = transferManager;\r\n\r\n        emit CollectionTransferManagerAdded(collection, transferManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove a transfer manager for a collection\r\n     * @param collection collection address to remove exception\r\n     */\r\n    function removeCollectionTransferManager(address collection) external onlyOwner {\r\n        require(\r\n            transferManagerSelectorForCollection[collection] != address(0),\r\n            \"Owner: Collection has no transfer manager\"\r\n        );\r\n\r\n        // Set it to the address(0)\r\n        transferManagerSelectorForCollection[collection] = address(0);\r\n\r\n        emit CollectionTransferManagerRemoved(collection);\r\n    }\r\n\r\n    /**\r\n     * @notice Check the transfer manager for a token\r\n     * @param collection collection address\r\n     * @dev Support for ERC165 interface is checked AFTER custom implementation\r\n     */\r\n    function checkTransferManagerForToken(address collection) public view override returns (address transferManager) {\r\n        // Assign transfer manager (if any)\r\n        transferManager = transferManagerSelectorForCollection[collection];\r\n\r\n        if (transferManager == address(0)) {\r\n            if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\r\n                transferManager = TRANSFER_MANAGER_ERC721;\r\n            } else if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)) {\r\n                transferManager = TRANSFER_MANAGER_ERC1155;\r\n            }\r\n        }\r\n\r\n        return transferManager;\r\n    }\r\n\r\n    function is721(address collection) private view returns (bool) {\r\n        return IERC165(collection).supportsInterface(INTERFACE_ID_ERC721);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "contracts/mocks/ERC1155Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract ERC1155Mock is ERC1155, Ownable, ERC1155Burnable {\r\n    constructor() ERC1155(\"\") {}\r\n\r\n    function setURI(string memory newuri) public onlyOwner {\r\n        _setURI(newuri);\r\n    }\r\n\r\n    function mint(uint256 id, uint256 amount) public {\r\n        _mint(_msgSender(), id, amount, \"\");\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/Nft721Mock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\ncontract Nft721Mock is ERC721\r\n{\r\n  uint256 private _currentIndex;\r\n  constructor() ERC721(\"LooksRare NFT\", \"LR\") {\r\n    _currentIndex = 0;\r\n  }\r\n\r\n  function mintTo(address to) external {\r\n    _currentIndex = _currentIndex + 1;\r\n    _mint(to, _currentIndex);\r\n  }\r\n\r\n  function mint(uint256 nftId) external {\r\n    _mint(msg.sender, nftId);\r\n  }\r\n}\r\n"
    },
    "contracts/mocks/GhostsMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8;\r\n\r\nimport \"../token/onft/ONFT721.sol\";\r\nimport \"../token/onft/IGhosts.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract GhostsMock is ONFT721, IGhosts {\r\n    uint gasForDestinationLzReceive = 350000;\r\n\r\n    constructor(string memory _name, string memory _symbol, address _layerZeroEndpoint) ONFT721(_name, _symbol, _layerZeroEndpoint) {}\r\n\r\n    function mint(uint8 _newId) external override payable {\r\n        _safeMint(msg.sender, _newId);\r\n    }\r\n\r\n    function traverseChains(uint16 _chainId, uint tokenId) public override payable {\r\n        require(msg.sender == ownerOf(tokenId), \"You must own the token to traverse\");\r\n        require(trustedRemoteLookup[_chainId].length > 0, \"This chain is currently unavailable for travel\");\r\n\r\n        // burn NFT, eliminating it from circulation on src chain\r\n        _burn(tokenId);\r\n\r\n        // abi.encode() the payload with the values to send\r\n        bytes memory payload = abi.encode(abi.encodePacked(msg.sender), tokenId);\r\n\r\n        // encode adapterParams to specify more gas for the destination\r\n        uint16 version = 1;\r\n        bytes memory adapterParams = abi.encodePacked(version, gasForDestinationLzReceive);\r\n\r\n        // get the fees we need to pay to LayerZero + Relayer to cover message delivery\r\n        // you will be refunded for extra gas paid\r\n        (uint messageFee, ) = lzEndpoint.estimateFees(_chainId, address(this), payload, false, adapterParams);\r\n        \r\n        require(msg.value >= messageFee, \"GG: msg.value not enough to cover messageFee. Send gas for message fees\");\r\n\r\n        lzEndpoint.send{value: msg.value}(\r\n            _chainId,                           // destination chainId\r\n            trustedRemoteLookup[_chainId],      // destination address of nft contract\r\n            payload,                            // abi.encoded()'ed bytes\r\n            payable(msg.sender),                // refund address\r\n            address(0x0),                       // 'zroPaymentAddress' unused for this\r\n            adapterParams                       // txParameters \r\n        );\r\n    }  \r\n}\r\n"
    },
    "contracts/token/onft/IGhosts.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT standard\r\n */\r\ninterface IGhosts is IERC721 {\r\n    function mint(uint8 numTokens) external payable;\r\n    function traverseChains(uint16 _chainId, uint tokenId) external payable;\r\n}\r\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}