{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IERC1155Persistent.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC721 Persistent with URI\r\n */\r\ninterface IERC1155Persistent {\r\n    function setURI(uint _tokenId, string memory newuri) external;\r\n\r\n    function mint(address account, uint256 id, uint256 amount) external;\r\n\r\n    function burn(address account, uint256 id, uint256 value) external;\r\n}\r\n"
    },
    "contracts/OmniBridge1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"./interfaces/IOmniBridge1155.sol\";\r\nimport \"./interfaces/IERC1155Persistent.sol\";\r\nimport \"./lzApp/NonblockingLzApp.sol\";\r\nimport \"./token/ERC1155Persistent.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\nerror NoZeroAddress();\r\n\r\ncontract OmniBridge1155 is\r\n    NonblockingLzApp,\r\n    ERC1155Holder,\r\n    IOmniBridge1155,\r\n    Pausable\r\n{\r\n\r\n    event LzReceive(address ercAddress, address toAddress, uint tokenId, bytes payload, address onftaddress);\r\n\r\n    // regular address => PersistentNFT address\r\n    mapping(address => address) public persistentAddresses;\r\n    // PersistentNFT address => regular address\r\n    mapping(address => address) public originAddresses;\r\n    mapping(address => uint256) public collectionLockedCounter;\r\n\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function wrap(\r\n        uint16 _dstChainId,\r\n        address _erc1155Address,\r\n        uint256 _tokenId,\r\n        uint256 _amount,\r\n        bytes memory _adapterParams\r\n    ) external override payable {\r\n        if (_erc1155Address == address(0)) revert NoZeroAddress();\r\n\r\n        string memory tokenURI;\r\n        address erc1155Address;\r\n        if (originAddresses[_erc1155Address] != address(0)) {\r\n            // In case re-send ONFT to sender chain\r\n            erc1155Address = originAddresses[_erc1155Address];\r\n            tokenURI = IERC1155MetadataURI(_erc1155Address).uri(_tokenId);\r\n            IERC1155Persistent(_erc1155Address).burn(_msgSender(), _tokenId, _amount);\r\n        } else {\r\n            erc1155Address = _erc1155Address;\r\n            IERC1155(_erc1155Address).safeTransferFrom(\r\n                _msgSender(),\r\n                address(this),\r\n                _tokenId,\r\n                _amount,\r\n                \"\"\r\n            );\r\n            tokenURI = IERC1155MetadataURI(_erc1155Address).uri(_tokenId);\r\n        }\r\n\r\n        // encode the payload with the number of tokenAddress, toAddress, tokenId\r\n        bytes memory payload = abi.encode(erc1155Address, msg.sender, tokenURI, _tokenId, _amount);\r\n\r\n        // get the fees we need to pay to LayerZero for message delivery\r\n        (uint messageFee, ) = lzEndpoint.estimateFees(_dstChainId, address(this), payload, false, _adapterParams);\r\n        require(msg.value >= messageFee, \"Insufficient fee amount\");\r\n\r\n        _lzSend(_dstChainId, payload, payable(msg.sender), address(0x0), _adapterParams);\r\n    }\r\n\r\n    function withdraw(address _persistentAddress, uint256 _tokenId, uint256 _amount)\r\n        external\r\n        override\r\n    {\r\n        if (originAddresses[_persistentAddress] == address(0)) revert NoZeroAddress();\r\n\r\n        IERC1155Persistent(_persistentAddress).burn(_msgSender(), _tokenId, _amount);\r\n\r\n        IERC1155(originAddresses[_persistentAddress]).safeTransferFrom(address(this), msg.sender, _tokenId, _amount, \"\");\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(\r\n        uint16,\r\n        bytes memory,\r\n        uint64,\r\n        bytes memory _payload\r\n    ) internal override {\r\n        // decode the parameter\r\n        (address _tokenAddress, address _toAddress, string memory _tokenURI, uint _tokenId, uint _amount) = abi.decode(_payload, (address, address, string, uint, uint));\r\n\r\n        address persistentAddress;\r\n        if (persistentAddresses[_tokenAddress] == address(0)) {\r\n            ERC1155Persistent persistentNFT = new ERC1155Persistent();\r\n            persistentNFT.mint(_toAddress, _tokenId, _amount);\r\n            persistentNFT.setURI(_tokenId, _tokenURI);\r\n            persistentAddresses[_tokenAddress] = address(persistentNFT);\r\n            originAddresses[address(persistentNFT)] = _tokenAddress;\r\n            collectionLockedCounter[address(persistentNFT)] += 1;\r\n            persistentAddress = address(persistentNFT);\r\n        } else {\r\n            IERC1155Persistent(persistentAddresses[_tokenAddress]).mint(_toAddress, _tokenId, _amount);\r\n            IERC1155Persistent(persistentAddresses[_tokenAddress]).setURI(_tokenId, _tokenURI);\r\n            collectionLockedCounter[persistentAddresses[_tokenAddress]] += 1;\r\n            persistentAddress = persistentAddresses[_tokenAddress];\r\n        }\r\n        emit LzReceive(_tokenAddress, _toAddress, _tokenId, _payload, persistentAddress);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return interfaceId == type(IOmniBridge1155).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/interfaces/IOmniBridge1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the Omni Bridge\r\n */\r\ninterface IOmniBridge1155 {\r\n    /**\r\n     * @dev \r\n     */\r\n    function wrap(uint16 _dstChainId, address _erc1155Address, uint256 _tokenId, uint256 _amount, bytes memory _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev \r\n     */\r\n    function withdraw(address _onftAddress, uint256 _tokenId, uint256 _amount) external;\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce from\r\n     */\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n}"
    },
    "contracts/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./LzApp.sol\";\r\n\r\n/*\r\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\r\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\r\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\r\n */\r\nabstract contract NonblockingLzApp is LzApp {\r\n    constructor(address _endpoint) LzApp(_endpoint) {}\r\n\r\n    mapping(uint16 => mapping(bytes => mapping(uint => bytes32))) public failedMessages;\r\n\r\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\r\n\r\n    // overriding the virtual function in LzReceiver\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // try-catch all errors/exceptions\r\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\r\n            // do nothing\r\n        } catch {\r\n            // error / exception\r\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\r\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\r\n        }\r\n    }\r\n\r\n    function nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual {\r\n        // only internal transaction\r\n        require(_msgSender() == address(this), \"LzReceiver: caller must be LzApp\");\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function retryMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes calldata _payload) external payable virtual {\r\n        // assert there is message to retry\r\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\r\n        require(payloadHash != bytes32(0), \"LzReceiver: no stored message\");\r\n        require(keccak256(_payload) == payloadHash, \"LzReceiver: invalid payload\");\r\n        // clear the stored message\r\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\r\n        // execute the message. revert if it fails again\r\n        this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n}"
    },
    "contracts/token/ERC1155Persistent.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./../interfaces/IERC1155Persistent.sol\";\r\n\r\ncontract ERC1155Persistent is IERC1155Persistent, ERC1155, Ownable {\r\n    mapping(uint256 => string) public _uris;\r\n\r\n    constructor() ERC1155(\"\") {}\r\n\r\n    function setURI(uint _tokenId, string memory newuri) external override onlyOwner {\r\n        _setURI(newuri);\r\n        _uris[_tokenId] = newuri;\r\n    }\r\n\r\n    function mint(address account, uint256 id, uint256 amount)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        _mint(account, id, amount, \"\");\r\n    }\r\n\r\n    function burn(address account, uint256 id, uint256 value) external override onlyOwner {\r\n        _burn(account, id, value);\r\n    }\r\n\r\n    function uri(uint _tokenId) public override view returns (string memory) {\r\n        return _uris[_tokenId];\r\n    }\r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/ILayerZeroReceiver.sol\";\r\nimport \"../interfaces/ILayerZeroUserApplicationConfig.sol\";\r\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\r\n\r\n/*\r\n * a generic LzReceiver implementation\r\n */\r\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\r\n    ILayerZeroEndpoint internal immutable lzEndpoint;\r\n\r\n    mapping(uint16 => bytes) internal trustedRemoteLookup;\r\n\r\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\r\n\r\n    constructor(address _endpoint) {\r\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\r\n    }\r\n\r\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) external override {\r\n        // lzReceive must be called by the endpoint for security\r\n        require(_msgSender() == address(lzEndpoint));\r\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\r\n        require(_srcAddress.length == trustedRemoteLookup[_srcChainId].length && keccak256(_srcAddress) == keccak256(trustedRemoteLookup[_srcChainId]), \"LzReceiver: invalid source sending contract\");\r\n\r\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParam) internal {\r\n        require(trustedRemoteLookup[_dstChainId].length != 0, \"LzSend: destination chain is not a trusted source.\");\r\n        lzEndpoint.send{value: msg.value}(_dstChainId, trustedRemoteLookup[_dstChainId], _payload, _refundAddress, _zroPaymentAddress, _adapterParam);\r\n    }\r\n\r\n    //---------------------------UserApplication config----------------------------------------\r\n    function getConfig(uint16, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\r\n        return lzEndpoint.getConfig(lzEndpoint.getSendVersion(address(this)), _chainId, address(this), _configType);\r\n    }\r\n\r\n    // generic config for LayerZero user Application\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\r\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\r\n    }\r\n\r\n    function setSendVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setSendVersion(_version);\r\n    }\r\n\r\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setReceiveVersion(_version);\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\r\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    // allow owner to set it multiple times.\r\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyOwner {\r\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\r\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\r\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\r\n        return keccak256(trustedSource) == keccak256(_srcAddress);\r\n    }\r\n\r\n    //--------------------------- VIEW FUNCTION ----------------------------------------\r\n    // interacting with the LayerZero Endpoint and remote contracts\r\n\r\n    function getTrustedRemote(uint16 _chainId) external view returns (bytes memory) {\r\n        return trustedRemoteLookup[_chainId];\r\n    }\r\n\r\n    function getLzEndpoint() external view returns (address) {\r\n        return address(lzEndpoint);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface ILayerZeroReceiver {\r\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\r\n    // @param _srcChainId - the source endpoint identifier\r\n    // @param _srcAddress - the source sending contract address from the source chain\r\n    // @param _nonce - the ordered message nonce\r\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\r\n}"
    },
    "contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface ILayerZeroUserApplicationConfig {\r\n    // @notice set the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    // @param _config - configuration in the bytes. can encode arbitrary content.\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\r\n\r\n    // @notice set the send() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setSendVersion(uint16 _version) external;\r\n\r\n    // @notice set the lzReceive() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setReceiveVersion(uint16 _version) external;\r\n\r\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\r\n    // @param _srcChainId - the chainId of the source chain\r\n    // @param _srcAddress - the contract address of the source contract at the source chain\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\r\n}"
    },
    "contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport \"./ILayerZeroUserApplicationConfig.sol\";\r\n\r\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\r\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\r\n    // @param _payload - a custom bytes payload to send to the destination contract\r\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\r\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\r\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\r\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // @notice used by the messaging library to publish verified payload\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source contract (as bytes) at the source chain\r\n    // @param _dstAddress - the address on destination chain\r\n    // @param _nonce - the unbound message ordering nonce\r\n    // @param _gasLimit - the gas limit for external contract execution\r\n    // @param _payload - verified payload to send to the destination contract\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\r\n\r\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\r\n\r\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\r\n    // @param _srcAddress - the source chain contract address\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // @notice get this Endpoint's immutable source identifier\r\n    function getChainId() external view returns (uint16);\r\n\r\n    // @notice the interface to retry failed message on this Endpoint destination\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    // @param _payload - the payload to be retried\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\r\n\r\n    // @notice query if any STORED payload (message blocking) at the endpoint.\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    // @notice query if the _libraryAddress is valid for sending msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the _libraryAddress is valid for receiving msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the non-reentrancy guard for send() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isSendingPayload() external view returns (bool);\r\n\r\n    // @notice query if the non-reentrancy guard for receive() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isReceivingPayload() external view returns (bool);\r\n\r\n    // @notice get the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _userApplication - the contract address of the user application\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\r\n\r\n    // @notice get the send() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getSendVersion(address _userApplication) external view returns (uint16);\r\n\r\n    // @notice get the lzReceive() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\r\n}"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/token/ERC721Persistent.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./../interfaces/IERC721Persistent.sol\";\r\n\r\ncontract ERC721Persistent is IERC721Persistent, ERC721, ERC721URIStorage, Ownable {\r\n    address private bridgeAddress;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _bridgeAddress\r\n    ) ERC721(_name, _symbol) {\r\n        require(_bridgeAddress != address(0), \"Can't be zero address\");\r\n        bridgeAddress = _bridgeAddress;\r\n    }\r\n\r\n    function safeMint(address to, uint256 tokenId, string memory uri)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        _safeMint(to, tokenId);\r\n        _setTokenURI(tokenId, uri);\r\n    }\r\n\r\n    function burn(uint tokenId) external override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"1\");\r\n        require(_msgSender() == bridgeAddress, \"2\");\r\n        _burn(tokenId);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IERC721Persistent.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC721 Persistent with URI\r\n */\r\ninterface IERC721Persistent {\r\n    function safeMint(address to, uint256 tokenId, string memory uri) external;\r\n\r\n    function burn(uint tokenId) external;\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/OmniBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\r\nimport \"./interfaces/IOmniBridge.sol\";\r\nimport \"./interfaces/IERC721Persistent.sol\";\r\nimport \"./interfaces/IERC1155Persistent.sol\";\r\nimport \"./lzApp/NonblockingLzApp.sol\";\r\nimport \"./token/ERC721Persistent.sol\";\r\nimport \"./token/ERC1155Persistent.sol\";\r\n\r\nerror NoZeroAddress();\r\n\r\ncontract OmniBridge is\r\n    NonblockingLzApp,\r\n    IOmniBridge,\r\n    Pausable\r\n{\r\n\r\n    event LzReceive(address ercAddress, address toAddress, uint tokenId, bytes payload, address persistentAddress);\r\n    // regular address => PersistentNFT address\r\n    mapping(address => address) public persistentAddresses;\r\n    // PersistentNFT address => regular address\r\n    mapping(address => address) public originAddresses;\r\n    mapping(address => uint256) public collectionLockedCounter;\r\n\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function wrap(\r\n        uint16 _dstChainId,\r\n        address _erc721Address,\r\n        uint256 _tokenId,\r\n        bytes memory _adapterParams\r\n    ) external payable override {\r\n        if (_erc721Address == address(0)) revert NoZeroAddress();\r\n\r\n        string memory name;\r\n        string memory symbol;\r\n        string memory tokenURI;\r\n        address erc721Address;\r\n        if (originAddresses[_erc721Address] != address(0)) {\r\n            // In case re-send PersistentNFT to sender chain\r\n            erc721Address = originAddresses[_erc721Address];\r\n            name = IERC721Metadata(_erc721Address).name();\r\n            symbol = IERC721Metadata(_erc721Address).symbol();\r\n            tokenURI = IERC721Metadata(_erc721Address).tokenURI(_tokenId);\r\n            IERC721Persistent(_erc721Address).burn(_tokenId);\r\n        } else {\r\n            erc721Address = _erc721Address;\r\n            IERC721(_erc721Address).transferFrom(\r\n                _msgSender(),\r\n                address(this),\r\n                _tokenId\r\n            );\r\n            name = IERC721Metadata(_erc721Address).name();\r\n            symbol = IERC721Metadata(_erc721Address).symbol();\r\n            tokenURI = IERC721Metadata(_erc721Address).tokenURI(_tokenId);\r\n        }\r\n\r\n        // encode the payload with the number of tokenAddress, toAddress, tokenId\r\n        bytes memory payload = abi.encode(erc721Address, msg.sender, name, symbol, tokenURI, _tokenId);\r\n\r\n        // get the fees we need to pay to LayerZero for message delivery\r\n        (uint messageFee, ) = lzEndpoint.estimateFees(_dstChainId, address(this), payload, false, _adapterParams);\r\n        require(msg.value >= messageFee, \"Insufficient fee amount\");\r\n\r\n        _lzSend(_dstChainId, payload, payable(msg.sender), address(0x0), _adapterParams);\r\n    }\r\n\r\n    function withdraw(address _persistentAddress, uint256 _tokenId)\r\n        external\r\n        override\r\n    {\r\n        if (originAddresses[_persistentAddress] == address(0)) revert NoZeroAddress();\r\n\r\n        IERC721Persistent(_persistentAddress).burn(_tokenId);\r\n\r\n        IERC721(originAddresses[_persistentAddress]).transferFrom(address(this), msg.sender, _tokenId);\r\n    }\r\n\r\n    function compareOwName(string memory _name) internal pure returns (bool) {\r\n        if (bytes(_name).length <= 2) {\r\n            return false;\r\n        }\r\n        bytes memory a = new bytes(2);\r\n        a[0] = bytes(_name)[0];\r\n        a[1] = bytes(_name)[1];\r\n        return (keccak256(abi.encodePacked((string(a)))) == keccak256(abi.encodePacked((\"Ow\"))));\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(\r\n        uint16,\r\n        bytes memory,\r\n        uint64,\r\n        bytes memory _payload\r\n    ) internal override {\r\n        // decode the parameter\r\n        (address _tokenAddress, address _toAddress, string memory _name, string memory _symbol, string memory _tokenURI, uint _tokenId) = abi.decode(_payload, (address, address, string, string, string, uint));\r\n\r\n        address persistentAddress;\r\n        if (persistentAddresses[_tokenAddress] == address(0)) {\r\n            string memory _newName = _name;\r\n            if (!compareOwName(_name)) {\r\n                _newName = string(abi.encodePacked(\"Ow\", _name));\r\n            }\r\n            ERC721Persistent persistentNFT = new ERC721Persistent(_newName, _symbol, address(this));\r\n            persistentNFT.safeMint(_toAddress, _tokenId, _tokenURI);\r\n            persistentAddresses[_tokenAddress] = address(persistentNFT);\r\n            originAddresses[address(persistentNFT)] = _tokenAddress;\r\n            collectionLockedCounter[address(persistentNFT)] += 1;\r\n            persistentAddress = address(persistentNFT);\r\n        } else {\r\n            IERC721Persistent(persistentAddresses[_tokenAddress]).safeMint(_toAddress, _tokenId, _tokenURI);\r\n            collectionLockedCounter[persistentAddresses[_tokenAddress]] += 1;\r\n        }\r\n        emit LzReceive(_tokenAddress, _toAddress, _tokenId, _payload, persistentAddress);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IOmniBridge).interfaceId;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IOmniBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the Omni Bridge\r\n */\r\ninterface IOmniBridge {\r\n    /**\r\n     * @dev \r\n     */\r\n    function wrap(uint16 _dstChainId, address _erc721Address, uint256 _tokenId, bytes memory _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev \r\n     */\r\n    function withdraw(address _onftAddress, uint _tokenId) external;\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce from\r\n     */\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n}"
    },
    "contracts/token/onft/ONFT1155Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT1155Core.sol\";\r\nimport \"../../lzApp/NonblockingLzApp.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract ONFT1155Core is NonblockingLzApp, ERC165, IONFT1155Core {\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT1155Core).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, uint _amount, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        return estimateSendBatchFee(_dstChainId, _toAddress, _toSingletonArray(_tokenId), _toSingletonArray(_amount), _useZro, _adapterParams);\r\n    }\r\n\r\n    function estimateSendBatchFee(uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        bytes memory payload = abi.encode(_toAddress, _tokenIds, _amounts);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _sendBatch(_from, _dstChainId, _toAddress, _toSingletonArray(_tokenId), _toSingletonArray(_amount), _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function sendBatchFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _sendBatch(_from, _dstChainId, _toAddress, _tokenIds, _amounts, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _sendBatch(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        _debitFrom(_from, _dstChainId, _toAddress, _tokenIds, _amounts);\r\n\r\n        bytes memory payload = abi.encode(_toAddress, _tokenIds, _amounts);\r\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n\r\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\r\n        if (_tokenIds.length == 1) {\r\n            emit SendToChain(_from, _dstChainId, _toAddress, _tokenIds[0], _amounts[0], nonce);\r\n        } else if (_tokenIds.length > 1) {\r\n            emit SendBatchToChain(_from, _dstChainId, _toAddress, _tokenIds, _amounts, nonce);\r\n        }\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // decode and load the toAddress\r\n        (bytes memory toAddressBytes, uint[] memory tokenIds, uint[] memory amounts) = abi.decode(_payload, (bytes, uint[], uint[]));\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n\r\n        _creditTo(_srcChainId, toAddress, tokenIds, amounts);\r\n\r\n        if (tokenIds.length == 1) {\r\n            emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenIds[0], amounts[0], _nonce);\r\n        } else if (tokenIds.length > 1) {\r\n            emit ReceiveBatchFromChain(_srcChainId, _srcAddress, toAddress, tokenIds, amounts, _nonce);\r\n        }\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual;\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual;\r\n\r\n    function _toSingletonArray(uint element) internal pure returns (uint[] memory) {\r\n        uint[] memory array = new uint[](1);\r\n        array[0] = element;\r\n        return array;\r\n    }\r\n}\r\n"
    },
    "contracts/token/onft/IONFT1155Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT Core standard\r\n */\r\ninterface IONFT1155Core is IERC165 {\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _tokenId, uint _amount, uint64 _nonce);\r\n    event SendBatchToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint[] _tokenIds, uint[] _amounts, uint64 _nonce);\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint _amount, uint64 _nonce);\r\n    event ReceiveBatchFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint[] _tokenIds, uint[] _amounts, uint64 _nonce);\r\n\r\n    // _from - address where tokens should be deducted from on behalf of\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenId - token Id to transfer\r\n    // _amount - amount of the tokens to transfer\r\n    // _refundAddress - address on src that will receive refund for any overpayment of L0 fees\r\n    // _zroPaymentAddress - if paying in zro, pass the address to use. using 0x0 indicates not paying fees in zro\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // _from - address where tokens should be deducted from on behalf of\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenIds - token Ids to transfer\r\n    // _amounts - amounts of the tokens to transfer\r\n    // _refundAddress - address on src that will receive refund for any overpayment of L0 fees\r\n    // _zroPaymentAddress - if paying in zro, pass the address to use. using 0x0 indicates not paying fees in zro\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function sendBatchFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint[] calldata _tokenIds, uint[] calldata _amounts, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenId - token Id to transfer\r\n    // _amount - amount of the tokens to transfer\r\n    // _useZro - indicates to use zro to pay L0 fees\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // _dstChainId - L0 defined chain id to send tokens too\r\n    // _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n    // _tokenIds - tokens Id to transfer\r\n    // _amounts - amounts of the tokens to transfer\r\n    // _useZro - indicates to use zro to pay L0 fees\r\n    // _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n    function estimateSendBatchFee(uint16 _dstChainId, bytes calldata _toAddress, uint[] calldata _tokenIds, uint[] calldata _amounts, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n}\r\n"
    },
    "contracts/token/onft/ONFT1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT1155.sol\";\r\nimport \"./ONFT1155Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\n\r\n// NOTE: this ONFT contract has no public minting logic.\r\n// must implement your own minting logic in child classes\r\ncontract ONFT1155 is ONFT1155Core, ERC1155, IONFT1155 {\r\n    constructor(string memory _uri, address _lzEndpoint) ERC1155(_uri) ONFT1155Core(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT1155Core, ERC1155, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT1155).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        address spender = _msgSender();\r\n        require(spender == _from || isApprovedForAll(_from, spender), \"ONFT1155: send caller is not owner nor approved\");\r\n        _burnBatch(_from, _tokenIds, _amounts);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        _mintBatch(_toAddress, _tokenIds, _amounts, \"\");\r\n    }\r\n}\r\n"
    },
    "contracts/token/onft/IONFT1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT1155Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT standard\r\n */\r\ninterface IONFT1155 is IONFT1155Core, IERC1155 {\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "contracts/mocks/ERC1155Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract ERC1155Mock is ERC1155, Ownable, ERC1155Burnable {\r\n    constructor() ERC1155(\"\") {}\r\n\r\n    function setURI(string memory newuri) public onlyOwner {\r\n        _setURI(newuri);\r\n    }\r\n\r\n    function mint(uint256 id, uint256 amount) public {\r\n        _mint(_msgSender(), id, amount, \"\");\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/OFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../lzApp/NonblockingLzApp.sol\";\r\nimport \"./IOFTCore.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract OFTCore is NonblockingLzApp, ERC165, IOFTCore {\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _amount, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        // mock the payload for send()\r\n        bytes memory payload = abi.encode(_toAddress, _amount);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _send(_from, _dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // decode and load the toAddress\r\n        (bytes memory toAddressBytes, uint amount) = abi.decode(_payload, (bytes, uint));\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n\r\n        _creditTo(_srcChainId, toAddress, amount);\r\n\r\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, amount, _nonce);\r\n    }\r\n\r\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        _debitFrom(_from, _dstChainId, _toAddress, _amount);\r\n\r\n        bytes memory payload = abi.encode(_toAddress, _amount);\r\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n\r\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\r\n        emit SendToChain(_from, _dstChainId, _toAddress, _amount, nonce);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual;\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _amount) internal virtual;\r\n}\r\n"
    },
    "contracts/token/oft/IOFTCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the IOFT core standard\r\n */\r\ninterface IOFTCore is IERC165 {\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _amount - amount of the tokens to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\r\n     */\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    /**\r\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_from` the owner of token\r\n     * `_dstChainId` the destination chain identifier\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_amount` the quantity of tokens in wei\r\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _amount, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev returns the circulating amount of tokens on current chain\r\n     */\r\n    function circulatingSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce\r\n     */\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _amount, uint64 _nonce);\r\n\r\n    /**\r\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\r\n     * `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _amount, uint64 _nonce);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/token/oft/extension/ProxyOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFTCore.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract ProxyOFT is OFTCore {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable token;\r\n\r\n    constructor(address _lzEndpoint, address _proxyToken) OFTCore(_lzEndpoint) {\r\n        token = IERC20(_proxyToken);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        unchecked {\r\n            return token.totalSupply() - token.balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override {\r\n        require(_from == _msgSender(), \"ProxyOFT: owner is not send caller\");\r\n        token.safeTransferFrom(_from, address(this), _amount);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override {\r\n        token.safeTransfer(_toAddress, _amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/looksRare/trading/TradingReweardDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n/**\r\n * @title TradingRewardsDistributor\r\n * @notice It distributes LOOKS tokens with rolling Merkle airdrops.\r\n */\r\ncontract TradingRewardsDistributor is Pausable, ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public constant BUFFER_ADMIN_WITHDRAW = 3 days;\r\n\r\n    IERC20 public immutable looksRareToken;\r\n\r\n    // Current reward round (users can only claim pending rewards for the current round)\r\n    uint256 public currentRewardRound;\r\n\r\n    // Last paused timestamp\r\n    uint256 public lastPausedTimestamp;\r\n\r\n    // Max amount per user in current tree\r\n    uint256 public maximumAmountPerUserInCurrentTree;\r\n\r\n    // Total amount claimed by user (in LOOKS)\r\n    mapping(address => uint256) public amountClaimedByUser;\r\n\r\n    // Merkle root for a reward round\r\n    mapping(uint256 => bytes32) public merkleRootOfRewardRound;\r\n\r\n    // Checks whether a merkle root was used\r\n    mapping(bytes32 => bool) public merkleRootUsed;\r\n\r\n    // Keeps track on whether user has claimed at a given reward round\r\n    mapping(uint256 => mapping(address => bool)) public hasUserClaimedForRewardRound;\r\n\r\n    event RewardsClaim(address indexed user, uint256 indexed rewardRound, uint256 amount);\r\n    event UpdateTradingRewards(uint256 indexed rewardRound);\r\n    event TokenWithdrawnOwner(uint256 amount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _looksRareToken address of the LooksRare token\r\n     */\r\n    constructor(address _looksRareToken) {\r\n        looksRareToken = IERC20(_looksRareToken);\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Claim pending rewards\r\n     * @param amount amount to claim\r\n     * @param merkleProof array containing the merkle proof\r\n     */\r\n    function claim(uint256 amount, bytes32[] calldata merkleProof) external whenNotPaused nonReentrant {\r\n        // Verify the reward round is not claimed already\r\n        require(!hasUserClaimedForRewardRound[currentRewardRound][msg.sender], \"Rewards: Already claimed\");\r\n\r\n        (bool claimStatus, uint256 adjustedAmount) = _canClaim(msg.sender, amount, merkleProof);\r\n\r\n        require(claimStatus, \"Rewards: Invalid proof\");\r\n        require(maximumAmountPerUserInCurrentTree >= amount, \"Rewards: Amount higher than max\");\r\n\r\n        // Set mapping for user and round as true\r\n        hasUserClaimedForRewardRound[currentRewardRound][msg.sender] = true;\r\n\r\n        // Adjust amount claimed\r\n        amountClaimedByUser[msg.sender] += adjustedAmount;\r\n\r\n        // Transfer adjusted amount\r\n        looksRareToken.safeTransfer(msg.sender, adjustedAmount);\r\n\r\n        emit RewardsClaim(msg.sender, currentRewardRound, adjustedAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Update trading rewards with a new merkle root\r\n     * @dev It automatically increments the currentRewardRound\r\n     * @param merkleRoot root of the computed merkle tree\r\n     */\r\n    function updateTradingRewards(bytes32 merkleRoot, uint256 newMaximumAmountPerUser) external onlyOwner {\r\n        require(!merkleRootUsed[merkleRoot], \"Owner: Merkle root already used\");\r\n\r\n        currentRewardRound++;\r\n        merkleRootOfRewardRound[currentRewardRound] = merkleRoot;\r\n        merkleRootUsed[merkleRoot] = true;\r\n        maximumAmountPerUserInCurrentTree = newMaximumAmountPerUser;\r\n\r\n        emit UpdateTradingRewards(currentRewardRound);\r\n    }\r\n\r\n    /**\r\n     * @notice Pause distribution\r\n     */\r\n    function pauseDistribution() external onlyOwner whenNotPaused {\r\n        lastPausedTimestamp = block.timestamp;\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause distribution\r\n     */\r\n    function unpauseDistribution() external onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer LOOKS tokens back to owner\r\n     * @dev It is for emergency purposes\r\n     * @param amount amount to withdraw\r\n     */\r\n    function withdrawTokenRewards(uint256 amount) external onlyOwner whenPaused {\r\n        require(block.timestamp > (lastPausedTimestamp + BUFFER_ADMIN_WITHDRAW), \"Owner: Too early to withdraw\");\r\n        looksRareToken.safeTransfer(msg.sender, amount);\r\n\r\n        emit TokenWithdrawnOwner(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether it is possible to claim and how much based on previous distribution\r\n     * @param user address of the user\r\n     * @param amount amount to claim\r\n     * @param merkleProof array with the merkle proof\r\n     */\r\n    function canClaim(\r\n        address user,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external view returns (bool, uint256) {\r\n        return _canClaim(user, amount, merkleProof);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether it is possible to claim and how much based on previous distribution\r\n     * @param user address of the user\r\n     * @param amount amount to claim\r\n     * @param merkleProof array with the merkle proof\r\n     */\r\n    function _canClaim(\r\n        address user,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) internal view returns (bool, uint256) {\r\n        // Compute the node and verify the merkle proof\r\n        bytes32 node = keccak256(abi.encodePacked(user, amount));\r\n        bool canUserClaim = MerkleProof.verify(merkleProof, merkleRootOfRewardRound[currentRewardRound], node);\r\n\r\n        if ((!canUserClaim) || (hasUserClaimedForRewardRound[currentRewardRound][user])) {\r\n            return (false, 0);\r\n        } else {\r\n            return (true, amount - amountClaimedByUser[user]);\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/token/onft/extension/AdvancedONFT721.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8;\r\n\r\nimport \"../ONFT721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\n/// @title Interface of the AdvancedONFT standard\r\n/// @author exakoss\r\n/// @notice this implementation supports: batch mint, payable public and private mint, reveal of metadata and EIP-2981 on-chain royalties\r\ncontract AdvancedONFT721 is ONFT721Enumerable, ReentrancyGuard {\r\n    using Strings for uint;\r\n\r\n    uint public price = 0;\r\n    uint public nextMintId;\r\n    uint public maxMintId;\r\n    uint public maxTokensPerMint;\r\n\r\n    // royalty fee in basis points (i.e. 100% = 10000, 1% = 100)\r\n    uint royaltyBasisPoints = 500;\r\n    // address for withdrawing money and receiving royalties, separate from owner\r\n    address payable beneficiary;\r\n    // Merkle Root for WL implementation\r\n    bytes32 public merkleRoot;\r\n\r\n    string public contractURI;\r\n    string private baseURI;\r\n    string private hiddenMetadataURI;\r\n\r\n    mapping(address => uint) public _boughtCount;\r\n\r\n    bool public _publicSaleStarted;\r\n    bool public _saleStarted;\r\n    bool revealed;\r\n\r\n    /// @notice Constructor for the AdvancedONFT\r\n    /// @param _name the name of the token\r\n    /// @param _symbol the token symbol\r\n    /// @param _layerZeroEndpoint handles message transmission across chains\r\n    /// @param _startMintId the starting mint number on this chain, excluded\r\n    /// @param _endMintId the max number of mints on this chain\r\n    /// @param _maxTokensPerMint the max number of tokens that could be minted in a single transaction\r\n    /// @param _baseTokenURI the base URI for computing the tokenURI\r\n    /// @param _hiddenURI the URI for computing the hiddenMetadataUri\r\n    constructor(string memory _name, string memory _symbol, address _layerZeroEndpoint, uint _startMintId, uint _endMintId, uint _maxTokensPerMint, string memory _baseTokenURI, string memory _hiddenURI) ONFT721Enumerable(_name, _symbol, _layerZeroEndpoint) {\r\n        nextMintId = _startMintId;\r\n        maxMintId = _endMintId;\r\n        maxTokensPerMint = _maxTokensPerMint;\r\n        //set default beneficiary to owner\r\n        beneficiary = payable(msg.sender);\r\n        baseURI = _baseTokenURI;\r\n        hiddenMetadataURI = _hiddenURI;\r\n    }\r\n\r\n    /// @notice Mint your ONFTs\r\n    function publicMint(uint _nbTokens) external payable {\r\n        require(_publicSaleStarted == true, \"AdvancedONFT721: Public sale has not started yet!\");\r\n        require(_saleStarted == true, \"AdvancedONFT721: Sale has not started yet!\");\r\n        require(_nbTokens != 0, \"AdvancedONFT721: Cannot mint 0 tokens!\");\r\n        require(_nbTokens <= maxTokensPerMint, \"AdvancedONFT721: You cannot mint more than maxTokensPerMint tokens at once!\");\r\n        require(nextMintId + _nbTokens <= maxMintId, \"AdvancedONFT721: max mint limit reached\");\r\n        require(_nbTokens * price <= msg.value, \"AdvancedONFT721: Inconsistent amount sent!\");\r\n\r\n        //using a local variable, _mint and ++X pattern to save gas\r\n        uint local_nextMintId = nextMintId;\r\n        for (uint i; i < _nbTokens; i++) {\r\n            _mint(msg.sender, ++local_nextMintId);\r\n        }\r\n        nextMintId = local_nextMintId;\r\n    }\r\n\r\n    /// @notice Mint your ONFTs, whitelisted addresses only\r\n    function mint(uint _nbTokens, bytes32[] calldata _merkleProof) external payable {\r\n        require(_saleStarted == true, \"AdvancedONFT721: Sale has not started yet!\");\r\n        require(_nbTokens != 0, \"AdvancedONFT721: Cannot mint 0 tokens!\");\r\n        require(_nbTokens <= maxTokensPerMint, \"AdvancedONFT721: You cannot mint more than maxTokensPerMint tokens at once!\");\r\n        require(nextMintId + _nbTokens <= maxMintId, \"AdvancedONFT721: max mint limit reached\");\r\n        require(_nbTokens * price <= msg.value, \"AdvancedONFT721: Inconsistent amount sent!\");\r\n        require(_boughtCount[msg.sender] + _nbTokens <= maxTokensPerMint, \"AdvancedONFT721: You exceeded your token limit.\");\r\n\r\n        bool isWL = MerkleProof.verify(_merkleProof, merkleRoot, keccak256(abi.encodePacked(_msgSender())));\r\n        require(isWL == true, \"AdvancedONFT721: Invalid Merkle Proof\");\r\n\r\n        _boughtCount[msg.sender] += _nbTokens;\r\n\r\n        //using a local variable, _mint and ++X pattern to save gas\r\n        uint local_nextMintId = nextMintId;\r\n        for (uint i; i < _nbTokens; i++) {\r\n            _mint(msg.sender, ++local_nextMintId);\r\n        }\r\n        nextMintId = local_nextMintId;\r\n    }\r\n\r\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\r\n        merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    function setPrice(uint newPrice) external onlyOwner {\r\n        price = newPrice;\r\n    }\r\n\r\n    function withdraw() public virtual onlyOwner {\r\n        require(beneficiary != address(0), \"AdvancedONFT721: Beneficiary not set!\");\r\n        uint _balance = address(this).balance;\r\n        require(payable(beneficiary).send(_balance));\r\n    }\r\n\r\n    function royaltyInfo(uint, uint salePrice) external view returns (address receiver, uint royaltyAmount) {\r\n        receiver = beneficiary;\r\n        royaltyAmount = (salePrice * royaltyBasisPoints) / 10000;\r\n    }\r\n\r\n    function setContractURI(string memory _contractURI) public onlyOwner {\r\n        contractURI = _contractURI;\r\n    }\r\n\r\n    function setBaseURI(string memory uri) public onlyOwner {\r\n        baseURI = uri;\r\n    }\r\n\r\n    function setRoyaltyFee(uint _royaltyBasisPoints) external onlyOwner {\r\n        royaltyBasisPoints = _royaltyBasisPoints;\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) external onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function setHiddenMetadataUri(string memory _hiddenMetadataUri) external onlyOwner {\r\n        hiddenMetadataURI = _hiddenMetadataUri;\r\n    }\r\n\r\n    function flipRevealed() external onlyOwner {\r\n        revealed = !revealed;\r\n    }\r\n\r\n    function flipSaleStarted() external onlyOwner {\r\n        _saleStarted = !_saleStarted;\r\n    }\r\n\r\n    function flipPublicSaleStarted() external onlyOwner {\r\n        _publicSaleStarted = !_publicSaleStarted;\r\n    }\r\n\r\n    // The following functions are overrides required by Solidity.\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    function tokenURI(uint tokenId) public view override(ERC721) returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        if (!revealed) {\r\n            return hiddenMetadataURI;\r\n        }\r\n        return string(abi.encodePacked(_baseURI(), tokenId.toString()));\r\n    }\r\n}\r\n"
    },
    "contracts/token/onft/ONFT721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IONFT721Enumerable.sol\";\nimport \"./ONFT721Core.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\n// NOTE: this ONFT contract has no public minting logic.\n// must implement your own minting logic in child classes\ncontract ONFT721Enumerable is ONFT721Core, ERC721Enumerable, IONFT721Enumerable {\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC721(_name, _symbol) ONFT721Core(_lzEndpoint) {}\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT721Core, ERC721Enumerable, IERC165) returns (bool) {\n        return interfaceId == type(IONFT721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\n        require(_isApprovedOrOwner(_msgSender(), _tokenId), \"ONFT721Enumerable: send caller is not owner nor approved\");\n        require(ERC721.ownerOf(_tokenId) == _from, \"ONFT721Enumerable: send from incorrect owner\");\n        _burn(_tokenId);\n    }\n\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\n        _safeMint(_toAddress, _tokenId);\n    }\n}\n"
    },
    "contracts/token/onft/IONFT721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IONFT721Core.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\n/**\n * @dev Interface of the ONFTEnumerable standard\n */\ninterface IONFT721Enumerable is IONFT721Core, IERC721Enumerable {\n\n}\n"
    },
    "contracts/token/onft/ONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT721Core.sol\";\r\nimport \"../../lzApp/NonblockingLzApp.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nabstract contract ONFT721Core is NonblockingLzApp, ERC165, IONFT721Core {\r\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT721Core).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\r\n        // mock the payload for send()\r\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\r\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\r\n    }\r\n\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\r\n        _send(_from, _dstChainId, _toAddress, _tokenId, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        _debitFrom(_from, _dstChainId, _toAddress, _tokenId);\r\n\r\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\r\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n\r\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\r\n        emit SendToChain(_from, _dstChainId, _toAddress, _tokenId, nonce);\r\n    }\r\n\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // decode and load the toAddress\r\n        (bytes memory toAddressBytes, uint tokenId) = abi.decode(_payload, (bytes, uint));\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n\r\n        _creditTo(_srcChainId, toAddress, tokenId);\r\n\r\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenId, _nonce);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId) internal virtual;\r\n\r\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _tokenId) internal virtual;\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "contracts/token/onft/IONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT Core standard\r\n */\r\ninterface IONFT721Core is IERC165 {\r\n    /**\r\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\r\n     * _dstChainId - L0 defined chain id to send tokens too\r\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\r\n     * _tokenId - token Id to transfer\r\n     * _useZro - indicates to use zro to pay L0 fees\r\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\r\n     */\r\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    /**\r\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\r\n     * `_nonce` is the outbound nonce from\r\n     */\r\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n\r\n    /**\r\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\r\n     */\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint64 _nonce);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/looksRare/trading/TokenSplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n/**\r\n * @title TokenSplitter\r\n * @notice It splits LOOKS to team/treasury/trading volume reward accounts based on shares.\r\n */\r\ncontract TokenSplitter is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct AccountInfo {\r\n        uint256 shares;\r\n        uint256 tokensDistributedToAccount;\r\n    }\r\n\r\n    uint256 public immutable TOTAL_SHARES;\r\n\r\n    IERC20 public immutable looksRareToken;\r\n\r\n    // Total LOOKS tokens distributed across all accounts\r\n    uint256 public totalTokensDistributed;\r\n\r\n    mapping(address => AccountInfo) public accountInfo;\r\n\r\n    event NewSharesOwner(address indexed oldRecipient, address indexed newRecipient);\r\n    event TokensTransferred(address indexed account, uint256 amount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _accounts array of accounts addresses\r\n     * @param _shares array of shares per account\r\n     * @param _looksRareToken address of the LOOKS token\r\n     */\r\n    constructor(\r\n        address[] memory _accounts,\r\n        uint256[] memory _shares,\r\n        address _looksRareToken\r\n    ) {\r\n        require(_accounts.length == _shares.length, \"Splitter: Length differ\");\r\n        require(_accounts.length > 0, \"Splitter: Length must be > 0\");\r\n\r\n        uint256 currentShares;\r\n\r\n        for (uint256 i = 0; i < _accounts.length; i++) {\r\n            require(_shares[i] > 0, \"Splitter: Shares are 0\");\r\n\r\n            currentShares += _shares[i];\r\n            accountInfo[_accounts[i]].shares = _shares[i];\r\n        }\r\n\r\n        TOTAL_SHARES = currentShares;\r\n        looksRareToken = IERC20(_looksRareToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Release LOOKS tokens to the account\r\n     * @param account address of the account\r\n     */\r\n    function releaseTokens(address account) external nonReentrant {\r\n        require(accountInfo[account].shares > 0, \"Splitter: Account has no share\");\r\n\r\n        // Calculate amount to transfer to the account\r\n        uint256 totalTokensReceived = looksRareToken.balanceOf(address(this)) + totalTokensDistributed;\r\n        uint256 pendingRewards = ((totalTokensReceived * accountInfo[account].shares) / TOTAL_SHARES) -\r\n            accountInfo[account].tokensDistributedToAccount;\r\n\r\n        // Revert if equal to 0\r\n        require(pendingRewards != 0, \"Splitter: Nothing to transfer\");\r\n\r\n        accountInfo[account].tokensDistributedToAccount += pendingRewards;\r\n        totalTokensDistributed += pendingRewards;\r\n\r\n        // Transfer funds to account\r\n        looksRareToken.safeTransfer(account, pendingRewards);\r\n\r\n        emit TokensTransferred(account, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Update share recipient\r\n     * @param _newRecipient address of the new recipient\r\n     * @param _currentRecipient address of the current recipient\r\n     */\r\n    function updateSharesOwner(address _newRecipient, address _currentRecipient) external onlyOwner {\r\n        require(accountInfo[_currentRecipient].shares > 0, \"Owner: Current recipient has no shares\");\r\n        require(accountInfo[_newRecipient].shares == 0, \"Owner: New recipient has existing shares\");\r\n\r\n        // Copy shares to new recipient\r\n        accountInfo[_newRecipient].shares = accountInfo[_currentRecipient].shares;\r\n        accountInfo[_newRecipient].tokensDistributedToAccount = accountInfo[_currentRecipient]\r\n            .tokensDistributedToAccount;\r\n\r\n        // Reset existing shares\r\n        accountInfo[_currentRecipient].shares = 0;\r\n        accountInfo[_currentRecipient].tokensDistributedToAccount = 0;\r\n\r\n        emit NewSharesOwner(_currentRecipient, _newRecipient);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve amount of LOOKS tokens that can be transferred\r\n     * @param account address of the account\r\n     */\r\n    function calculatePendingRewards(address account) external view returns (uint256) {\r\n        if (accountInfo[account].shares == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 totalTokensReceived = looksRareToken.balanceOf(address(this)) + totalTokensDistributed;\r\n        uint256 pendingRewards = ((totalTokensReceived * accountInfo[account].shares) / TOTAL_SHARES) -\r\n            accountInfo[account].tokensDistributedToAccount;\r\n\r\n        return pendingRewards;\r\n    }\r\n}"
    },
    "contracts/looksRare/trading/StakingPoolForUniswapV2Tokens.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {TokenDistributor} from \"./TokenDistributor.sol\";\r\nimport {TokenSplitter} from \"./TokenSplitter.sol\";\r\n\r\n/**\r\n * @title StakingPoolForUniswapV2Tokens\r\n * @notice It is a staking pool for Uniswap V2 LP tokens (stake Uniswap V2 LP tokens -> get LOOKS).\r\n */\r\ncontract StakingPoolForUniswapV2Tokens is Ownable, Pausable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // Amount of staked tokens provided by user\r\n        uint256 rewardDebt; // Reward debt\r\n    }\r\n\r\n    // Precision factor for reward calculation\r\n    uint256 public constant PRECISION_FACTOR = 10**12;\r\n\r\n    // LOOKS token (token distributed)\r\n    IERC20 public immutable looksRareToken;\r\n\r\n    // The staked token (i.e., Uniswap V2 WETH/LOOKS LP token)\r\n    IERC20 public immutable stakedToken;\r\n\r\n    // Block number when rewards start\r\n    uint256 public immutable START_BLOCK;\r\n\r\n    // Accumulated tokens per share\r\n    uint256 public accTokenPerShare;\r\n\r\n    // Block number when rewards end\r\n    uint256 public endBlock;\r\n\r\n    // Block number of the last update\r\n    uint256 public lastRewardBlock;\r\n\r\n    // Tokens distributed per block (in looksRareToken)\r\n    uint256 public rewardPerBlock;\r\n\r\n    // UserInfo for users that stake tokens (stakedToken)\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    event AdminRewardWithdraw(uint256 amount);\r\n    event Deposit(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event Harvest(address indexed user, uint256 harvestedAmount);\r\n    event NewRewardPerBlockAndEndBlock(uint256 rewardPerBlock, uint256 endBlock);\r\n    event Withdraw(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _stakedToken staked token address\r\n     * @param _looksRareToken reward token address\r\n     * @param _rewardPerBlock reward per block (in LOOKS)\r\n     * @param _startBlock start block\r\n     * @param _endBlock end block\r\n     */\r\n    constructor(\r\n        address _stakedToken,\r\n        address _looksRareToken,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _startBlock,\r\n        uint256 _endBlock\r\n    ) {\r\n        stakedToken = IERC20(_stakedToken);\r\n        looksRareToken = IERC20(_looksRareToken);\r\n        rewardPerBlock = _rewardPerBlock;\r\n        START_BLOCK = _startBlock;\r\n        endBlock = _endBlock;\r\n\r\n        // Set the lastRewardBlock as the start block\r\n        lastRewardBlock = _startBlock;\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit staked tokens and collect reward tokens (if any)\r\n     * @param amount amount to deposit (in stakedToken)\r\n     */\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"Deposit: Amount must be > 0\");\r\n\r\n        _updatePool();\r\n\r\n        uint256 pendingRewards;\r\n\r\n        if (userInfo[msg.sender].amount > 0) {\r\n            pendingRewards =\r\n                ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n                userInfo[msg.sender].rewardDebt;\r\n\r\n            if (pendingRewards > 0) {\r\n                looksRareToken.safeTransfer(msg.sender, pendingRewards);\r\n            }\r\n        }\r\n\r\n        stakedToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        userInfo[msg.sender].amount += amount;\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n        emit Deposit(msg.sender, amount, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Harvest tokens that are pending\r\n     */\r\n    function harvest() external nonReentrant {\r\n        _updatePool();\r\n\r\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n            userInfo[msg.sender].rewardDebt;\r\n\r\n        require(pendingRewards > 0, \"Harvest: Pending rewards must be > 0\");\r\n\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n        looksRareToken.safeTransfer(msg.sender, pendingRewards);\r\n\r\n        emit Harvest(msg.sender, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens and give up rewards\r\n     * @dev Only for emergency. It does not update the pool.\r\n     */\r\n    function emergencyWithdraw() external nonReentrant whenPaused {\r\n        uint256 userBalance = userInfo[msg.sender].amount;\r\n\r\n        require(userBalance != 0, \"Withdraw: Amount must be > 0\");\r\n\r\n        // Reset internal value for user\r\n        userInfo[msg.sender].amount = 0;\r\n        userInfo[msg.sender].rewardDebt = 0;\r\n\r\n        stakedToken.safeTransfer(msg.sender, userBalance);\r\n\r\n        emit EmergencyWithdraw(msg.sender, userBalance);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens and collect reward tokens\r\n     * @param amount amount to withdraw (in stakedToken)\r\n     */\r\n    function withdraw(uint256 amount) external nonReentrant {\r\n        require(\r\n            (userInfo[msg.sender].amount >= amount) && (amount > 0),\r\n            \"Withdraw: Amount must be > 0 or lower than user balance\"\r\n        );\r\n\r\n        _updatePool();\r\n\r\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n            userInfo[msg.sender].rewardDebt;\r\n\r\n        userInfo[msg.sender].amount -= amount;\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n        stakedToken.safeTransfer(msg.sender, amount);\r\n\r\n        if (pendingRewards > 0) {\r\n            looksRareToken.safeTransfer(msg.sender, pendingRewards);\r\n        }\r\n\r\n        emit Withdraw(msg.sender, amount, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw rewards (for admin)\r\n     * @param amount amount to withdraw (in looksRareToken)\r\n     * @dev Only callable by owner.\r\n     */\r\n    function adminRewardWithdraw(uint256 amount) external onlyOwner {\r\n        looksRareToken.safeTransfer(msg.sender, amount);\r\n\r\n        emit AdminRewardWithdraw(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Pause\r\n     * It allows calling emergencyWithdraw\r\n     */\r\n    function pause() external onlyOwner whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause\r\n     */\r\n    function unpause() external onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Update reward per block and the end block\r\n     * @param newRewardPerBlock the new reward per block\r\n     * @param newEndBlock the new end block\r\n     */\r\n    function updateRewardPerBlockAndEndBlock(uint256 newRewardPerBlock, uint256 newEndBlock) external onlyOwner {\r\n        if (block.number >= START_BLOCK) {\r\n            _updatePool();\r\n        }\r\n        require(newEndBlock > block.number, \"Owner: New endBlock must be after current block\");\r\n        require(newEndBlock > START_BLOCK, \"Owner: New endBlock must be after start block\");\r\n\r\n        endBlock = newEndBlock;\r\n        rewardPerBlock = newRewardPerBlock;\r\n\r\n        emit NewRewardPerBlockAndEndBlock(newRewardPerBlock, newEndBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice View function to see pending reward on frontend.\r\n     * @param user address of the user\r\n     * @return Pending reward\r\n     */\r\n    function calculatePendingRewards(address user) external view returns (uint256) {\r\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n\r\n        if ((block.number > lastRewardBlock) && (stakedTokenSupply != 0)) {\r\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n            uint256 tokenReward = multiplier * rewardPerBlock;\r\n            uint256 adjustedTokenPerShare = accTokenPerShare + (tokenReward * PRECISION_FACTOR) / stakedTokenSupply;\r\n\r\n            return (userInfo[user].amount * adjustedTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\r\n        } else {\r\n            return (userInfo[user].amount * accTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update reward variables of the pool to be up-to-date.\r\n     */\r\n    function _updatePool() internal {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n\r\n        if (stakedTokenSupply == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n        uint256 tokenReward = multiplier * rewardPerBlock;\r\n\r\n        // Update only if token reward for staking is not null\r\n        if (tokenReward > 0) {\r\n            accTokenPerShare = accTokenPerShare + ((tokenReward * PRECISION_FACTOR) / stakedTokenSupply);\r\n        }\r\n\r\n        // Update last reward block only if it wasn't updated after or at the end block\r\n        if (lastRewardBlock <= endBlock) {\r\n            lastRewardBlock = block.number;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Return reward multiplier over the given \"from\" to \"to\" block.\r\n     * @param from block to start calculating reward\r\n     * @param to block to finish calculating reward\r\n     * @return the multiplier for the period\r\n     */\r\n    function _getMultiplier(uint256 from, uint256 to) internal view returns (uint256) {\r\n        if (to <= endBlock) {\r\n            return to - from;\r\n        } else if (from >= endBlock) {\r\n            return 0;\r\n        } else {\r\n            return endBlock - from;\r\n        }\r\n    }\r\n}"
    },
    "contracts/looksRare/trading/TokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {ILooksRareToken} from \"../interfaces/ILooksRareToken.sol\";\r\n\r\n/**\r\n * @title TokenDistributor\r\n * @notice It handles the distribution of LOOKS token.\r\n * It auto-adjusts block rewards over a set number of periods.\r\n */\r\ncontract TokenDistributor is ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for ILooksRareToken;\r\n\r\n    struct StakingPeriod {\r\n        uint256 rewardPerBlockForStaking;\r\n        uint256 rewardPerBlockForOthers;\r\n        uint256 periodLengthInBlock;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // Amount of staked tokens provided by user\r\n        uint256 rewardDebt; // Reward debt\r\n    }\r\n\r\n    // Precision factor for calculating rewards\r\n    uint256 public constant PRECISION_FACTOR = 10**12;\r\n\r\n    ILooksRareToken public immutable looksRareToken;\r\n\r\n    address public immutable tokenSplitter;\r\n\r\n    // Number of reward periods\r\n    uint256 public immutable NUMBER_PERIODS;\r\n\r\n    // Block number when rewards start\r\n    uint256 public immutable START_BLOCK;\r\n\r\n    // Accumulated tokens per share\r\n    uint256 public accTokenPerShare;\r\n\r\n    // Current phase for rewards\r\n    uint256 public currentPhase;\r\n\r\n    // Block number when rewards end\r\n    uint256 public endBlock;\r\n\r\n    // Block number of the last update\r\n    uint256 public lastRewardBlock;\r\n\r\n    // Tokens distributed per block for other purposes (team + treasury + trading rewards)\r\n    uint256 public rewardPerBlockForOthers;\r\n\r\n    // Tokens distributed per block for staking\r\n    uint256 public rewardPerBlockForStaking;\r\n\r\n    // Total amount staked\r\n    uint256 public totalAmountStaked;\r\n\r\n    mapping(uint256 => StakingPeriod) public stakingPeriod;\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    event Compound(address indexed user, uint256 harvestedAmount);\r\n    event Deposit(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n    event NewRewardsPerBlock(\r\n        uint256 indexed currentPhase,\r\n        uint256 startBlock,\r\n        uint256 rewardPerBlockForStaking,\r\n        uint256 rewardPerBlockForOthers\r\n    );\r\n    event Withdraw(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _looksRareToken LOOKS token address\r\n     * @param _tokenSplitter token splitter contract address (for team and trading rewards)\r\n     * @param _startBlock start block for reward program\r\n     * @param _rewardsPerBlockForStaking array of rewards per block for staking\r\n     * @param _rewardsPerBlockForOthers array of rewards per block for other purposes (team + treasury + trading rewards)\r\n     * @param _periodLengthesInBlocks array of period lengthes\r\n     * @param _numberPeriods number of periods with different rewards/lengthes (e.g., if 3 changes --> 4 periods)\r\n     */\r\n    constructor(\r\n        address _looksRareToken,\r\n        address _tokenSplitter,\r\n        uint256 _startBlock,\r\n        uint256[] memory _rewardsPerBlockForStaking,\r\n        uint256[] memory _rewardsPerBlockForOthers,\r\n        uint256[] memory _periodLengthesInBlocks,\r\n        uint256 _numberPeriods\r\n    ) {\r\n        require(\r\n            (_periodLengthesInBlocks.length == _numberPeriods) &&\r\n                (_rewardsPerBlockForStaking.length == _numberPeriods) &&\r\n                (_rewardsPerBlockForStaking.length == _numberPeriods),\r\n            \"Distributor: Lengthes must match numberPeriods\"\r\n        );\r\n\r\n        // 1. Operational checks for supply\r\n        uint256 nonCirculatingSupply = ILooksRareToken(_looksRareToken).SUPPLY_CAP() -\r\n            ILooksRareToken(_looksRareToken).totalSupply();\r\n\r\n        uint256 amountTokensToBeMinted;\r\n\r\n        for (uint256 i = 0; i < _numberPeriods; i++) {\r\n            amountTokensToBeMinted +=\r\n                (_rewardsPerBlockForStaking[i] * _periodLengthesInBlocks[i]) +\r\n                (_rewardsPerBlockForOthers[i] * _periodLengthesInBlocks[i]);\r\n\r\n            stakingPeriod[i] = StakingPeriod({\r\n                rewardPerBlockForStaking: _rewardsPerBlockForStaking[i],\r\n                rewardPerBlockForOthers: _rewardsPerBlockForOthers[i],\r\n                periodLengthInBlock: _periodLengthesInBlocks[i]\r\n            });\r\n        }\r\n\r\n        require(amountTokensToBeMinted == nonCirculatingSupply, \"Distributor: Wrong reward parameters\");\r\n\r\n        // 2. Store values\r\n        looksRareToken = ILooksRareToken(_looksRareToken);\r\n        tokenSplitter = _tokenSplitter;\r\n        rewardPerBlockForStaking = _rewardsPerBlockForStaking[0];\r\n        rewardPerBlockForOthers = _rewardsPerBlockForOthers[0];\r\n\r\n        START_BLOCK = _startBlock;\r\n        endBlock = _startBlock + _periodLengthesInBlocks[0];\r\n\r\n        NUMBER_PERIODS = _numberPeriods;\r\n\r\n        // Set the lastRewardBlock as the startBlock\r\n        lastRewardBlock = _startBlock;\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit staked tokens and compounds pending rewards\r\n     * @param amount amount to deposit (in LOOKS)\r\n     */\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"Deposit: Amount must be > 0\");\r\n\r\n        // Update pool information\r\n        _updatePool();\r\n\r\n        // Transfer LOOKS tokens to this contract\r\n        looksRareToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        uint256 pendingRewards;\r\n\r\n        // If not new deposit, calculate pending rewards (for auto-compounding)\r\n        if (userInfo[msg.sender].amount > 0) {\r\n            pendingRewards =\r\n                ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n                userInfo[msg.sender].rewardDebt;\r\n        }\r\n\r\n        // Adjust user information\r\n        userInfo[msg.sender].amount += (amount + pendingRewards);\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n        // Increase totalAmountStaked\r\n        totalAmountStaked += (amount + pendingRewards);\r\n\r\n        emit Deposit(msg.sender, amount, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Compound based on pending rewards\r\n     */\r\n    function harvestAndCompound() external nonReentrant {\r\n        // Update pool information\r\n        _updatePool();\r\n\r\n        // Calculate pending rewards\r\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n            userInfo[msg.sender].rewardDebt;\r\n\r\n        // Return if no pending rewards\r\n        if (pendingRewards == 0) {\r\n            // It doesn't throw revertion (to help with the fee-sharing auto-compounding contract)\r\n            return;\r\n        }\r\n\r\n        // Adjust user amount for pending rewards\r\n        userInfo[msg.sender].amount += pendingRewards;\r\n\r\n        // Adjust totalAmountStaked\r\n        totalAmountStaked += pendingRewards;\r\n\r\n        // Recalculate reward debt based on new user amount\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n        emit Compound(msg.sender, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Update pool rewards\r\n     */\r\n    function updatePool() external nonReentrant {\r\n        _updatePool();\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens and compound pending rewards\r\n     * @param amount amount to withdraw\r\n     */\r\n    function withdraw(uint256 amount) external nonReentrant {\r\n        require(\r\n            (userInfo[msg.sender].amount >= amount) && (amount > 0),\r\n            \"Withdraw: Amount must be > 0 or lower than user balance\"\r\n        );\r\n\r\n        // Update pool\r\n        _updatePool();\r\n\r\n        // Calculate pending rewards\r\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n            userInfo[msg.sender].rewardDebt;\r\n\r\n        // Adjust user information\r\n        userInfo[msg.sender].amount = userInfo[msg.sender].amount + pendingRewards - amount;\r\n        userInfo[msg.sender].rewardDebt = (userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR;\r\n\r\n        // Adjust total amount staked\r\n        totalAmountStaked = totalAmountStaked + pendingRewards - amount;\r\n\r\n        // Transfer LOOKS tokens to the sender\r\n        looksRareToken.safeTransfer(msg.sender, amount);\r\n\r\n        emit Withdraw(msg.sender, amount, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw all staked tokens and collect tokens\r\n     */\r\n    function withdrawAll() external nonReentrant {\r\n        require(userInfo[msg.sender].amount > 0, \"Withdraw: Amount must be > 0\");\r\n\r\n        // Update pool\r\n        _updatePool();\r\n\r\n        // Calculate pending rewards and amount to transfer (to the sender)\r\n        uint256 pendingRewards = ((userInfo[msg.sender].amount * accTokenPerShare) / PRECISION_FACTOR) -\r\n            userInfo[msg.sender].rewardDebt;\r\n\r\n        uint256 amountToTransfer = userInfo[msg.sender].amount + pendingRewards;\r\n\r\n        // Adjust total amount staked\r\n        totalAmountStaked = totalAmountStaked - userInfo[msg.sender].amount;\r\n\r\n        // Adjust user information\r\n        userInfo[msg.sender].amount = 0;\r\n        userInfo[msg.sender].rewardDebt = 0;\r\n\r\n        // Transfer LOOKS tokens to the sender\r\n        looksRareToken.safeTransfer(msg.sender, amountToTransfer);\r\n\r\n        emit Withdraw(msg.sender, amountToTransfer, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate pending rewards for a user\r\n     * @param user address of the user\r\n     * @return Pending rewards\r\n     */\r\n    function calculatePendingRewards(address user) external view returns (uint256) {\r\n        if ((block.number > lastRewardBlock) && (totalAmountStaked != 0)) {\r\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n\r\n            uint256 tokenRewardForStaking = multiplier * rewardPerBlockForStaking;\r\n\r\n            uint256 adjustedEndBlock = endBlock;\r\n            uint256 adjustedCurrentPhase = currentPhase;\r\n\r\n            // Check whether to adjust multipliers and reward per block\r\n            while ((block.number > adjustedEndBlock) && (adjustedCurrentPhase < (NUMBER_PERIODS - 1))) {\r\n                // Update current phase\r\n                adjustedCurrentPhase++;\r\n\r\n                // Update rewards per block\r\n                uint256 adjustedRewardPerBlockForStaking = stakingPeriod[adjustedCurrentPhase].rewardPerBlockForStaking;\r\n\r\n                // Calculate adjusted block number\r\n                uint256 previousEndBlock = adjustedEndBlock;\r\n\r\n                // Update end block\r\n                adjustedEndBlock = previousEndBlock + stakingPeriod[adjustedCurrentPhase].periodLengthInBlock;\r\n\r\n                // Calculate new multiplier\r\n                uint256 newMultiplier = (block.number <= adjustedEndBlock)\r\n                    ? (block.number - previousEndBlock)\r\n                    : stakingPeriod[adjustedCurrentPhase].periodLengthInBlock;\r\n\r\n                // Adjust token rewards for staking\r\n                tokenRewardForStaking += (newMultiplier * adjustedRewardPerBlockForStaking);\r\n            }\r\n\r\n            uint256 adjustedTokenPerShare = accTokenPerShare +\r\n                (tokenRewardForStaking * PRECISION_FACTOR) /\r\n                totalAmountStaked;\r\n\r\n            return (userInfo[user].amount * adjustedTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\r\n        } else {\r\n            return (userInfo[user].amount * accTokenPerShare) / PRECISION_FACTOR - userInfo[user].rewardDebt;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update reward variables of the pool\r\n     */\r\n    function _updatePool() internal {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        if (totalAmountStaked == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        // Calculate multiplier\r\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n\r\n        // Calculate rewards for staking and others\r\n        uint256 tokenRewardForStaking = multiplier * rewardPerBlockForStaking;\r\n        uint256 tokenRewardForOthers = multiplier * rewardPerBlockForOthers;\r\n\r\n        // Check whether to adjust multipliers and reward per block\r\n        while ((block.number > endBlock) && (currentPhase < (NUMBER_PERIODS - 1))) {\r\n            // Update rewards per block\r\n            _updateRewardsPerBlock(endBlock);\r\n\r\n            uint256 previousEndBlock = endBlock;\r\n\r\n            // Adjust the end block\r\n            endBlock += stakingPeriod[currentPhase].periodLengthInBlock;\r\n\r\n            // Adjust multiplier to cover the missing periods with other lower inflation schedule\r\n            uint256 newMultiplier = _getMultiplier(previousEndBlock, block.number);\r\n\r\n            // Adjust token rewards\r\n            tokenRewardForStaking += (newMultiplier * rewardPerBlockForStaking);\r\n            tokenRewardForOthers += (newMultiplier * rewardPerBlockForOthers);\r\n        }\r\n\r\n        // Mint tokens only if token rewards for staking are not null\r\n        if (tokenRewardForStaking > 0) {\r\n            // It allows protection against potential issues to prevent funds from being locked\r\n            bool mintStatus = looksRareToken.mint(address(this), tokenRewardForStaking);\r\n            if (mintStatus) {\r\n                accTokenPerShare = accTokenPerShare + ((tokenRewardForStaking * PRECISION_FACTOR) / totalAmountStaked);\r\n            }\r\n\r\n            looksRareToken.mint(tokenSplitter, tokenRewardForOthers);\r\n        }\r\n\r\n        // Update last reward block only if it wasn't updated after or at the end block\r\n        if (lastRewardBlock <= endBlock) {\r\n            lastRewardBlock = block.number;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update rewards per block\r\n     * @dev Rewards are halved by 2 (for staking + others)\r\n     */\r\n    function _updateRewardsPerBlock(uint256 _newStartBlock) internal {\r\n        // Update current phase\r\n        currentPhase++;\r\n\r\n        // Update rewards per block\r\n        rewardPerBlockForStaking = stakingPeriod[currentPhase].rewardPerBlockForStaking;\r\n        rewardPerBlockForOthers = stakingPeriod[currentPhase].rewardPerBlockForOthers;\r\n\r\n        emit NewRewardsPerBlock(currentPhase, _newStartBlock, rewardPerBlockForStaking, rewardPerBlockForOthers);\r\n    }\r\n\r\n    /**\r\n     * @notice Return reward multiplier over the given \"from\" to \"to\" block.\r\n     * @param from block to start calculating reward\r\n     * @param to block to finish calculating reward\r\n     * @return the multiplier for the period\r\n     */\r\n    function _getMultiplier(uint256 from, uint256 to) internal view returns (uint256) {\r\n        if (to <= endBlock) {\r\n            return to - from;\r\n        } else if (from >= endBlock) {\r\n            return 0;\r\n        } else {\r\n            return endBlock - from;\r\n        }\r\n    }\r\n}"
    },
    "contracts/looksRare/interfaces/ILooksRareToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ILooksRareToken is IERC20 {\r\n    function SUPPLY_CAP() external view returns (uint256);\r\n\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n}"
    },
    "contracts/token/oft/IOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IOFTCore.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface of the OFT standard\r\n */\r\ninterface IOFT is IOFTCore, IERC20 {\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"
    },
    "contracts/token/onft/extension/ProxyONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\r\nimport \"../ONFT721Core.sol\";\r\n\r\ncontract ProxyONFT721 is ONFT721Core, IERC721Receiver {\r\n    using ERC165Checker for address;\r\n\r\n    IERC721 public immutable token;\r\n\r\n    constructor(address _lzEndpoint, address _proxyToken) ONFT721Core(_lzEndpoint) {\r\n        require(_proxyToken.supportsInterface(type(IERC721).interfaceId), \"ProxyONFT721: invalid ERC721 token\");\r\n        token = IERC721(_proxyToken);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC721Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\r\n        require(_from == _msgSender(), \"ProxyONFT721: owner is not send caller\");\r\n        token.safeTransferFrom(_from, address(this), _tokenId);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\r\n        token.safeTransferFrom(address(this), _toAddress, _tokenId);\r\n    }\r\n\r\n    function onERC721Received(address _operator, address, uint, bytes memory) public virtual override returns (bytes4) {\r\n        // only allow `this` to tranfser token from others\r\n        if (_operator != address(this)) return bytes4(0);\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n}\r\n"
    },
    "contracts/token/onft/IONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT721Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @dev Interface of the ONFT standard\r\n */\r\ninterface IONFT721 is IONFT721Core, IERC721 {\r\n\r\n}\r\n"
    },
    "contracts/token/onft/ONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IONFT721.sol\";\r\nimport \"./ONFT721Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\n// NOTE: this ONFT contract has no public minting logic.\r\n// must implement your own minting logic in child classes\r\ncontract ONFT721 is ONFT721Core, ERC721, IONFT721 {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC721(_name, _symbol) ONFT721Core(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT721Core, ERC721, IERC165) returns (bool) {\r\n        return interfaceId == type(IONFT721).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), _tokenId), \"ONFT721: send caller is not owner nor approved\");\r\n        require(ERC721.ownerOf(_tokenId) == _from, \"ONFT721: send from incorrect owner\");\r\n        _burn(_tokenId);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\r\n        _safeMint(_toAddress, _tokenId);\r\n    }\r\n}\r\n"
    },
    "contracts/token/onft/extension/UniversalONFT721.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8;\r\n\r\nimport \"../ONFT721.sol\";\r\n\r\n/// @title Interface of the UniversalONFT standard\r\ncontract UniversalONFT721 is ONFT721 {\r\n    uint public nextMintId;\r\n    uint public maxMintId;\r\n\r\n    /// @notice Constructor for the UniversalONFT\r\n    /// @param _name the name of the token\r\n    /// @param _symbol the token symbol\r\n    /// @param _layerZeroEndpoint handles message transmission across chains\r\n    /// @param _startMintId the starting mint number on this chain\r\n    /// @param _endMintId the max number of mints on this chain\r\n    constructor(string memory _name, string memory _symbol, address _layerZeroEndpoint, uint _startMintId, uint _endMintId) ONFT721(_name, _symbol, _layerZeroEndpoint) {\r\n        nextMintId = _startMintId;\r\n        maxMintId = _endMintId;\r\n    }\r\n\r\n    /// @notice Mint your ONFT\r\n    function mint() external payable {\r\n        require(nextMintId <= maxMintId, \"UniversalONFT721: max mint limit reached\");\r\n\r\n        uint newId = nextMintId;\r\n        nextMintId++;\r\n\r\n        _safeMint(msg.sender, newId);\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/ERC721Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\ncontract ERC721Mock is ERC721, ERC721URIStorage, Ownable {\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    constructor() ERC721(\"NFTToken\", \"MTK\") {}\r\n\r\n    function safeMint(address to, string memory _tokenURI) public onlyOwner {\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _tokenIdCounter.increment();\r\n        _safeMint(to, tokenId);\r\n        _setTokenURI(tokenId, _tokenURI);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n}\n"
    },
    "contracts/token/oft/extension/GlobalCappedOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./BasedOFT.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\";\r\n\r\n/**\r\n * @dev Extension of {OFT} that adds a global cap to the supply of tokens across all chains.\r\n */\r\ncontract GlobalCappedOFT is BasedOFT, ERC20Capped {\r\n    constructor(string memory _name, string memory _symbol, uint _cap, address _lzEndpoint) BasedOFT(_name, _symbol, _lzEndpoint) ERC20Capped(_cap) {}\r\n\r\n    function _mint(address account, uint amount) internal virtual override(ERC20, ERC20Capped) {\r\n        ERC20Capped._mint(account, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/extension/BasedOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFT.sol\";\r\n\r\ncontract BasedOFT is OFT {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) OFT(_name, _symbol, _lzEndpoint) {}\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        unchecked {\r\n            return totalSupply() - balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _transfer(_from, address(this), _amount);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override {\r\n        _transfer(address(this), _toAddress, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/OFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"./OFTCore.sol\";\r\nimport \"./IOFT.sol\";\r\n\r\n// override decimal() function is needed\r\ncontract OFT is OFTCore, ERC20, IOFT {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC20(_name, _symbol) OFTCore(_lzEndpoint) {}\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(OFTCore, IERC165) returns (bool) {\r\n        return interfaceId == type(IOFT).interfaceId || interfaceId == type(IERC20).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function circulatingSupply() public view virtual override returns (uint) {\r\n        return totalSupply();\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint _amount) internal virtual override {\r\n        address spender = _msgSender();\r\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\r\n        _burn(_from, _amount);\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override {\r\n        _mint(_toAddress, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/token/oft/extension/PausableOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../OFT.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\n\r\n// allow OFT to pause all cross-chain transactions\r\ncontract PausableOFT is OFT, Pausable {\r\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) OFT(_name, _symbol, _lzEndpoint) {}\r\n\r\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _amount) internal virtual override whenNotPaused {\r\n        super._debitFrom(_from, _dstChainId, _toAddress, _amount);\r\n    }\r\n\r\n    function pauseSendTokens(bool pause) external onlyOwner {\r\n        pause ? _pause() : _unpause();\r\n    }\r\n}\r\n"
    },
    "contracts/looksRare/trading/airdrop/LooksRareAirdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\nimport {OrderTypes} from \"../../libraries/OrderTypes.sol\";\r\nimport {SignatureChecker} from \"../../libraries/SignatureChecker.sol\";\r\n\r\n/**\r\n * @title LooksRareAirdrop\r\n * @notice It distributes LOOKS tokens with a Merkle-tree airdrop.\r\n */\r\ncontract LooksRareAirdrop is Pausable, ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using OrderTypes for OrderTypes.MakerOrder;\r\n\r\n    IERC20 public immutable looksRareToken;\r\n\r\n    address public immutable MAIN_STRATEGY;\r\n    address public immutable TRANSFER_MANAGER_ERC721;\r\n    address public immutable TRANSFER_MANAGER_ERC1155;\r\n    address public immutable WETH;\r\n\r\n    bytes32 public immutable DOMAIN_SEPARATOR_EXCHANGE;\r\n\r\n    uint256 public immutable MAXIMUM_AMOUNT_TO_CLAIM;\r\n\r\n    bool public isMerkleRootSet;\r\n\r\n    bytes32 public merkleRoot;\r\n\r\n    uint256 public endTimestamp;\r\n\r\n    mapping(address => bool) public hasClaimed;\r\n\r\n    event AirdropRewardsClaim(address indexed user, uint256 amount);\r\n    event MerkleRootSet(bytes32 merkleRoot);\r\n    event NewEndTimestamp(uint256 endTimestamp);\r\n    event TokensWithdrawn(uint256 amount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _endTimestamp end timestamp for claiming\r\n     * @param _looksRareToken address of the LooksRare token\r\n     * @param _domainSeparator domain separator for LooksRare exchange\r\n     * @param _transferManagerERC721 address of the transfer manager for ERC721 for LooksRare exchange\r\n     * @param _transferManagerERC1155 address of the transfer manager for ERC1155 for LooksRare exchange\r\n     * @param _mainStrategy main strategy (\"StandardSaleForFixedPrice\")\r\n     * @param _weth wrapped ETH address\r\n     * @param _maximumAmountToClaim maximum amount to claim per a user\r\n     */\r\n    constructor(\r\n        uint256 _endTimestamp,\r\n        uint256 _maximumAmountToClaim,\r\n        address _looksRareToken,\r\n        bytes32 _domainSeparator,\r\n        address _transferManagerERC721,\r\n        address _transferManagerERC1155,\r\n        address _mainStrategy,\r\n        address _weth\r\n    ) {\r\n        endTimestamp = _endTimestamp;\r\n        MAXIMUM_AMOUNT_TO_CLAIM = _maximumAmountToClaim;\r\n\r\n        looksRareToken = IERC20(_looksRareToken);\r\n\r\n        DOMAIN_SEPARATOR_EXCHANGE = _domainSeparator;\r\n        TRANSFER_MANAGER_ERC721 = _transferManagerERC721;\r\n        TRANSFER_MANAGER_ERC1155 = _transferManagerERC1155;\r\n\r\n        MAIN_STRATEGY = _mainStrategy;\r\n        WETH = _weth;\r\n    }\r\n\r\n    /**\r\n     * @notice Claim tokens for airdrop\r\n     * @param amount amount to claim for the airdrop\r\n     * @param merkleProof array containing the merkle proof\r\n     * @param makerAsk makerAsk order\r\n     * @param isERC721 whether the order is for ERC721 (true --> ERC721/ false --> ERC1155)\r\n     */\r\n    function claim(\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof,\r\n        OrderTypes.MakerOrder calldata makerAsk,\r\n        bool isERC721\r\n    ) external whenNotPaused nonReentrant {\r\n        require(isMerkleRootSet, \"Airdrop: Merkle root not set\");\r\n        require(amount <= MAXIMUM_AMOUNT_TO_CLAIM, \"Airdrop: Amount too high\");\r\n        require(block.timestamp <= endTimestamp, \"Airdrop: Too late to claim\");\r\n\r\n        // Verify the user has claimed\r\n        require(!hasClaimed[msg.sender], \"Airdrop: Already claimed\");\r\n\r\n        // Checks on orders\r\n        require(_isOrderMatchingRequirements(makerAsk), \"Airdrop: Order not eligible for airdrop\");\r\n\r\n        // Compute the hash\r\n        bytes32 askHash = makerAsk.hash();\r\n\r\n        // Verify signature is legit\r\n        require(\r\n            SignatureChecker.verify(\r\n                askHash,\r\n                makerAsk.signer,\r\n                makerAsk.v,\r\n                makerAsk.r,\r\n                makerAsk.s,\r\n                DOMAIN_SEPARATOR_EXCHANGE\r\n            ),\r\n            \"Airdrop: Signature invalid\"\r\n        );\r\n\r\n        // Verify tokens are approved\r\n        if (isERC721) {\r\n            require(\r\n                IERC721(makerAsk.collection).isApprovedForAll(msg.sender, TRANSFER_MANAGER_ERC721),\r\n                \"Airdrop: Collection must be approved\"\r\n            );\r\n        } else {\r\n            require(\r\n                IERC1155(makerAsk.collection).isApprovedForAll(msg.sender, TRANSFER_MANAGER_ERC1155),\r\n                \"Airdrop: Collection must be approved\"\r\n            );\r\n        }\r\n\r\n        // Compute the node and verify the merkle proof\r\n        bytes32 node = keccak256(abi.encodePacked(msg.sender, amount));\r\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), \"Airdrop: Invalid proof\");\r\n\r\n        // Set as claimed\r\n        hasClaimed[msg.sender] = true;\r\n\r\n        // Transfer tokens\r\n        looksRareToken.safeTransfer(msg.sender, amount);\r\n\r\n        emit AirdropRewardsClaim(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether it is possible to claim (it doesn't check orders)\r\n     * @param user address of the user\r\n     * @param amount amount to claim\r\n     * @param merkleProof array containing the merkle proof\r\n     */\r\n    function canClaim(\r\n        address user,\r\n        uint256 amount,\r\n        bytes32[] calldata merkleProof\r\n    ) external view returns (bool) {\r\n        if (block.timestamp <= endTimestamp) {\r\n            // Compute the node and verify the merkle proof\r\n            bytes32 node = keccak256(abi.encodePacked(user, amount));\r\n            return MerkleProof.verify(merkleProof, merkleRoot, node);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Pause airdrop\r\n     */\r\n    function pauseAirdrop() external onlyOwner whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Set merkle root for airdrop\r\n     * @param _merkleRoot merkle root\r\n     */\r\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\r\n        require(!isMerkleRootSet, \"Owner: Merkle root already set\");\r\n\r\n        isMerkleRootSet = true;\r\n        merkleRoot = _merkleRoot;\r\n\r\n        emit MerkleRootSet(_merkleRoot);\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause airdrop\r\n     */\r\n    function unpauseAirdrop() external onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @notice Update end timestamp\r\n     * @param newEndTimestamp new endtimestamp\r\n     * @dev Must be within 30 days\r\n     */\r\n    function updateEndTimestamp(uint256 newEndTimestamp) external onlyOwner {\r\n        require(block.timestamp + 30 days > newEndTimestamp, \"Owner: New timestamp too far\");\r\n        endTimestamp = newEndTimestamp;\r\n\r\n        emit NewEndTimestamp(newEndTimestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens back to owner\r\n     */\r\n    function withdrawTokenRewards() external onlyOwner {\r\n        require(block.timestamp > (endTimestamp + 1 days), \"Owner: Too early to remove rewards\");\r\n        uint256 balanceToWithdraw = looksRareToken.balanceOf(address(this));\r\n        looksRareToken.safeTransfer(msg.sender, balanceToWithdraw);\r\n\r\n        emit TokensWithdrawn(balanceToWithdraw);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether order is matching requirements for airdrop\r\n     * @param makerAsk makerAsk order\r\n     */\r\n    function _isOrderMatchingRequirements(OrderTypes.MakerOrder calldata makerAsk) internal view returns (bool) {\r\n        return\r\n            (makerAsk.isOrderAsk) &&\r\n            (makerAsk.signer == msg.sender) &&\r\n            (makerAsk.amount > 0) &&\r\n            (makerAsk.currency == WETH) &&\r\n            (makerAsk.strategy == MAIN_STRATEGY);\r\n    }\r\n}"
    },
    "contracts/looksRare/libraries/OrderTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title OrderTypes\r\n * @notice This library contains order types for the LooksRare exchange.\r\n */\r\nlibrary OrderTypes {\r\n    // keccak256(\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\")\r\n    bytes32 internal constant MAKER_ORDER_HASH = 0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\r\n\r\n    struct MakerOrder {\r\n        bool isOrderAsk; // true --> ask / false --> bid\r\n        address signer; // signer of the maker order\r\n        address collection; // collection address\r\n        uint256 price; // price (used as )\r\n        uint256 tokenId; // id of the token\r\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\r\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\r\n        address currency; // currency (e.g., WETH)\r\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\r\n        uint256 startTime; // startTime in timestamp\r\n        uint256 endTime; // endTime in timestamp\r\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\r\n        bytes params; // additional parameters\r\n        uint8 v; // v: parameter (27 or 28)\r\n        bytes32 r; // r: parameter\r\n        bytes32 s; // s: parameter\r\n    }\r\n\r\n    struct TakerOrder {\r\n        bool isOrderAsk; // true --> ask / false --> bid\r\n        address taker; // msg.sender\r\n        uint256 price; // final price for the purchase\r\n        uint256 tokenId;\r\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\r\n        bytes params; // other params (e.g., tokenId)\r\n    }\r\n\r\n    function hash(MakerOrder memory makerOrder) internal pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    MAKER_ORDER_HASH,\r\n                    makerOrder.isOrderAsk,\r\n                    makerOrder.signer,\r\n                    makerOrder.collection,\r\n                    makerOrder.price,\r\n                    makerOrder.tokenId,\r\n                    makerOrder.amount,\r\n                    makerOrder.strategy,\r\n                    makerOrder.currency,\r\n                    makerOrder.nonce,\r\n                    makerOrder.startTime,\r\n                    makerOrder.endTime,\r\n                    makerOrder.minPercentageToAsk,\r\n                    keccak256(makerOrder.params)\r\n                )\r\n            );\r\n    }\r\n}"
    },
    "contracts/looksRare/libraries/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\r\n\r\n/**\r\n * @title SignatureChecker\r\n * @notice This library allows verification of signatures for both EOAs and contracts.\r\n */\r\nlibrary SignatureChecker {\r\n    /**\r\n     * @notice Recovers the signer of a signature (for EOA)\r\n     * @param hash the hash containing the signed mesage\r\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\r\n     * @param r parameter\r\n     * @param s parameter\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\r\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\r\n        require(\r\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\r\n            \"Signature: Invalid s parameter\"\r\n        );\r\n\r\n        require(v == 27 || v == 28, \"Signature: Invalid v parameter\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"Signature: Invalid signer\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns whether the signer matches the signed message\r\n     * @param hash the hash containing the signed mesage\r\n     * @param signer the signer address to confirm message validity\r\n     * @param v parameter (27 or 28)\r\n     * @param r parameter\r\n     * @param s parameter\r\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\r\n     * @return true --> if valid // false --> if invalid\r\n     */\r\n    function verify(\r\n        bytes32 hash,\r\n        address signer,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 domainSeparator\r\n    ) internal view returns (bool) {\r\n        // \\x19\\x01 is the standardized encoding prefix\r\n        // https://eips.ethereum.org/EIPS/eip-712#specification\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, hash));\r\n        if (Address.isContract(signer)) {\r\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\r\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\r\n        } else {\r\n            return recover(digest, v, r, s) == signer;\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "contracts/looksRare/LooksRareExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin contracts\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n// LooksRare interfaces\r\nimport {ICurrencyManager} from \"./interfaces/ICurrencyManager.sol\";\r\nimport {IExecutionManager} from \"./interfaces/IExecutionManager.sol\";\r\nimport {IExecutionStrategy} from \"./interfaces/IExecutionStrategy.sol\";\r\nimport {IRoyaltyFeeManager} from \"./interfaces/IRoyaltyFeeManager.sol\";\r\nimport {ILooksRareExchange} from \"./interfaces/ILooksRareExchange.sol\";\r\nimport {ITransferManagerNFT} from \"./interfaces/ITransferManagerNFT.sol\";\r\nimport {ITransferSelectorNFT} from \"./interfaces/ITransferSelectorNFT.sol\";\r\nimport {IWETH} from \"./interfaces/IWETH.sol\";\r\n\r\n// LooksRare libraries\r\nimport {OrderTypes} from \"./libraries/OrderTypes.sol\";\r\nimport {SignatureChecker} from \"./libraries/SignatureChecker.sol\";\r\n\r\n/**\r\n * @title LooksRareExchange\r\n * @notice It is the core contract of the LooksRare exchange.\r\n */\r\ncontract LooksRareExchange is ILooksRareExchange, ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    using OrderTypes for OrderTypes.MakerOrder;\r\n    using OrderTypes for OrderTypes.TakerOrder;\r\n\r\n    address public immutable WETH;\r\n    bytes32 public immutable DOMAIN_SEPARATOR;\r\n\r\n    address public protocolFeeRecipient;\r\n\r\n    ICurrencyManager public currencyManager;\r\n    IExecutionManager public executionManager;\r\n    IRoyaltyFeeManager public royaltyFeeManager;\r\n    ITransferSelectorNFT public transferSelectorNFT;\r\n\r\n    mapping(address => uint256) public userMinOrderNonce;\r\n    mapping(address => mapping(uint256 => bool)) private _isUserOrderNonceExecutedOrCancelled;\r\n\r\n    event CancelAllOrders(address indexed user, uint256 newMinNonce);\r\n    event CancelMultipleOrders(address indexed user, uint256[] orderNonces);\r\n    event NewCurrencyManager(address indexed currencyManager);\r\n    event NewExecutionManager(address indexed executionManager);\r\n    event NewProtocolFeeRecipient(address indexed protocolFeeRecipient);\r\n    event NewRoyaltyFeeManager(address indexed royaltyFeeManager);\r\n    event NewTransferSelectorNFT(address indexed transferSelectorNFT);\r\n\r\n    event RoyaltyPayment(\r\n        address indexed collection,\r\n        uint256 indexed tokenId,\r\n        address indexed royaltyRecipient,\r\n        address currency,\r\n        uint256 amount\r\n    );\r\n\r\n    event TakerAsk(\r\n        bytes32 orderHash, // bid hash of the maker order\r\n        uint256 orderNonce, // user order nonce\r\n        address indexed taker, // sender address for the taker ask order\r\n        address indexed maker, // maker address of the initial bid order\r\n        address indexed strategy, // strategy that defines the execution\r\n        address currency, // currency address\r\n        address collection, // collection address\r\n        uint256 tokenId, // tokenId transferred\r\n        uint256 amount, // amount of tokens transferred\r\n        uint256 price // final transacted price\r\n    );\r\n\r\n    event TakerBid(\r\n        bytes32 orderHash, // ask hash of the maker order\r\n        uint256 orderNonce, // user order nonce\r\n        address indexed taker, // sender address for the taker bid order\r\n        address indexed maker, // maker address of the initial ask order\r\n        address indexed strategy, // strategy that defines the execution\r\n        address currency, // currency address\r\n        address collection, // collection address\r\n        uint256 tokenId, // tokenId transferred\r\n        uint256 amount, // amount of tokens transferred\r\n        uint256 price // final transacted price\r\n    );\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _currencyManager currency manager address\r\n     * @param _executionManager execution manager address\r\n     * @param _royaltyFeeManager royalty fee manager address\r\n     * @param _WETH wrapped ether address (for other chains, use wrapped native asset)\r\n     * @param _protocolFeeRecipient protocol fee recipient\r\n     */\r\n    constructor(\r\n        address _currencyManager,\r\n        address _executionManager,\r\n        address _royaltyFeeManager,\r\n        address _WETH,\r\n        address _protocolFeeRecipient\r\n    ) {\r\n        // Calculate the domain separator\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\r\n                0xda9101ba92939daf4bb2e18cd5f942363b9297fbc3232c9dd964abb1fb70ed71, // keccak256(\"LooksRareExchange\")\r\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\"1\")) for versionId = 1\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        currencyManager = ICurrencyManager(_currencyManager);\r\n        executionManager = IExecutionManager(_executionManager);\r\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\r\n        WETH = _WETH;\r\n        protocolFeeRecipient = _protocolFeeRecipient;\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel all pending orders for a sender\r\n     * @param minNonce minimum user nonce\r\n     */\r\n    function cancelAllOrdersForSender(uint256 minNonce) external {\r\n        require(minNonce > userMinOrderNonce[msg.sender], \"Cancel: Order nonce lower than current\");\r\n        require(minNonce < userMinOrderNonce[msg.sender] + 500000, \"Cancel: Cannot cancel more orders\");\r\n        userMinOrderNonce[msg.sender] = minNonce;\r\n\r\n        emit CancelAllOrders(msg.sender, minNonce);\r\n    }\r\n\r\n    /**\r\n     * @notice Cancel maker orders\r\n     * @param orderNonces array of order nonces\r\n     */\r\n    function cancelMultipleMakerOrders(uint256[] calldata orderNonces) external {\r\n        require(orderNonces.length > 0, \"Cancel: Cannot be empty\");\r\n\r\n        for (uint256 i = 0; i < orderNonces.length; i++) {\r\n            require(orderNonces[i] >= userMinOrderNonce[msg.sender], \"Cancel: Order nonce lower than current\");\r\n            _isUserOrderNonceExecutedOrCancelled[msg.sender][orderNonces[i]] = true;\r\n        }\r\n\r\n        emit CancelMultipleOrders(msg.sender, orderNonces);\r\n    }\r\n\r\n    /**\r\n     * @notice Match ask with a taker bid order using ETH\r\n     * @param takerBid taker bid order\r\n     * @param makerAsk maker ask order\r\n     */\r\n    function matchAskWithTakerBidUsingETHAndWETH(\r\n        OrderTypes.TakerOrder calldata takerBid,\r\n        OrderTypes.MakerOrder calldata makerAsk\r\n    ) external payable override nonReentrant {\r\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \"Order: Wrong sides\");\r\n        require(makerAsk.currency == WETH, \"Order: Currency must be WETH\");\r\n        require(msg.sender == takerBid.taker, \"Order: Taker must be the sender\");\r\n\r\n        // If not enough ETH to cover the price, use WETH\r\n        if (takerBid.price > msg.value) {\r\n            IERC20(WETH).safeTransferFrom(msg.sender, address(this), (takerBid.price - msg.value));\r\n        } else {\r\n            require(takerBid.price == msg.value, \"Order: Msg.value too high\");\r\n        }\r\n\r\n        // Wrap ETH sent to this contract\r\n        IWETH(WETH).deposit{value: msg.value}();\r\n\r\n        // Check the maker ask order\r\n        bytes32 askHash = makerAsk.hash();\r\n        _validateOrder(makerAsk, askHash);\r\n\r\n        // Retrieve execution parameters\r\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerAsk.strategy)\r\n            .canExecuteTakerBid(takerBid, makerAsk);\r\n\r\n        require(isExecutionValid, \"Strategy: Execution invalid\");\r\n\r\n        // Update maker ask order status to true (prevents replay)\r\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\r\n\r\n        // Execution part 1/2\r\n        _transferFeesAndFundsWithWETH(\r\n            makerAsk.strategy,\r\n            makerAsk.collection,\r\n            tokenId,\r\n            makerAsk.signer,\r\n            takerBid.price,\r\n            makerAsk.minPercentageToAsk\r\n        );\r\n\r\n        // Execution part 2/2\r\n        _transferNonFungibleToken(makerAsk.collection, makerAsk.signer, takerBid.taker, tokenId, amount);\r\n\r\n        emit TakerBid(\r\n            askHash,\r\n            makerAsk.nonce,\r\n            takerBid.taker,\r\n            makerAsk.signer,\r\n            makerAsk.strategy,\r\n            makerAsk.currency,\r\n            makerAsk.collection,\r\n            tokenId,\r\n            amount,\r\n            takerBid.price\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Match a takerBid with a matchAsk\r\n     * @param takerBid taker bid order\r\n     * @param makerAsk maker ask order\r\n     */\r\n    function matchAskWithTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external\r\n        override\r\n        nonReentrant\r\n    {\r\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \"Order: Wrong sides\");\r\n        require(msg.sender == takerBid.taker, \"Order: Taker must be the sender\");\r\n\r\n        // Check the maker ask order\r\n        bytes32 askHash = makerAsk.hash();\r\n        _validateOrder(makerAsk, askHash);\r\n\r\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerAsk.strategy)\r\n            .canExecuteTakerBid(takerBid, makerAsk);\r\n\r\n        require(isExecutionValid, \"Strategy: Execution invalid\");\r\n\r\n        // Update maker ask order status to true (prevents replay)\r\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\r\n\r\n        // Execution part 1/2\r\n        _transferFeesAndFunds(\r\n            makerAsk.strategy,\r\n            makerAsk.collection,\r\n            tokenId,\r\n            makerAsk.currency,\r\n            msg.sender,\r\n            makerAsk.signer,\r\n            takerBid.price,\r\n            makerAsk.minPercentageToAsk\r\n        );\r\n\r\n        // Execution part 2/2\r\n        _transferNonFungibleToken(makerAsk.collection, makerAsk.signer, takerBid.taker, tokenId, amount);\r\n\r\n        emit TakerBid(\r\n            askHash,\r\n            makerAsk.nonce,\r\n            takerBid.taker,\r\n            makerAsk.signer,\r\n            makerAsk.strategy,\r\n            makerAsk.currency,\r\n            makerAsk.collection,\r\n            tokenId,\r\n            amount,\r\n            takerBid.price\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Match a takerAsk with a makerBid\r\n     * @param takerAsk taker ask order\r\n     * @param makerBid maker bid order\r\n     */\r\n    function matchBidWithTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external\r\n        override\r\n        nonReentrant\r\n    {\r\n        require((!makerBid.isOrderAsk) && (takerAsk.isOrderAsk), \"Order: Wrong sides\");\r\n        require(msg.sender == takerAsk.taker, \"Order: Taker must be the sender\");\r\n\r\n        // Check the maker bid order\r\n        bytes32 bidHash = makerBid.hash();\r\n        _validateOrder(makerBid, bidHash);\r\n\r\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerBid.strategy)\r\n            .canExecuteTakerAsk(takerAsk, makerBid);\r\n\r\n        require(isExecutionValid, \"Strategy: Execution invalid\");\r\n\r\n        // Update maker bid order status to true (prevents replay)\r\n        _isUserOrderNonceExecutedOrCancelled[makerBid.signer][makerBid.nonce] = true;\r\n\r\n        // Execution part 1/2\r\n        _transferNonFungibleToken(makerBid.collection, msg.sender, makerBid.signer, tokenId, amount);\r\n\r\n        // Execution part 2/2\r\n        _transferFeesAndFunds(\r\n            makerBid.strategy,\r\n            makerBid.collection,\r\n            tokenId,\r\n            makerBid.currency,\r\n            makerBid.signer,\r\n            takerAsk.taker,\r\n            takerAsk.price,\r\n            takerAsk.minPercentageToAsk\r\n        );\r\n\r\n        emit TakerAsk(\r\n            bidHash,\r\n            makerBid.nonce,\r\n            takerAsk.taker,\r\n            makerBid.signer,\r\n            makerBid.strategy,\r\n            makerBid.currency,\r\n            makerBid.collection,\r\n            tokenId,\r\n            amount,\r\n            takerAsk.price\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Update currency manager\r\n     * @param _currencyManager new currency manager address\r\n     */\r\n    function updateCurrencyManager(address _currencyManager) external onlyOwner {\r\n        require(_currencyManager != address(0), \"Owner: Cannot be null address\");\r\n        currencyManager = ICurrencyManager(_currencyManager);\r\n        emit NewCurrencyManager(_currencyManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Update execution manager\r\n     * @param _executionManager new execution manager address\r\n     */\r\n    function updateExecutionManager(address _executionManager) external onlyOwner {\r\n        require(_executionManager != address(0), \"Owner: Cannot be null address\");\r\n        executionManager = IExecutionManager(_executionManager);\r\n        emit NewExecutionManager(_executionManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Update protocol fee and recipient\r\n     * @param _protocolFeeRecipient new recipient for protocol fees\r\n     */\r\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\r\n        protocolFeeRecipient = _protocolFeeRecipient;\r\n        emit NewProtocolFeeRecipient(_protocolFeeRecipient);\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty fee manager\r\n     * @param _royaltyFeeManager new fee manager address\r\n     */\r\n    function updateRoyaltyFeeManager(address _royaltyFeeManager) external onlyOwner {\r\n        require(_royaltyFeeManager != address(0), \"Owner: Cannot be null address\");\r\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\r\n        emit NewRoyaltyFeeManager(_royaltyFeeManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Update transfer selector NFT\r\n     * @param _transferSelectorNFT new transfer selector address\r\n     */\r\n    function updateTransferSelectorNFT(address _transferSelectorNFT) external onlyOwner {\r\n        require(_transferSelectorNFT != address(0), \"Owner: Cannot be null address\");\r\n        transferSelectorNFT = ITransferSelectorNFT(_transferSelectorNFT);\r\n\r\n        emit NewTransferSelectorNFT(_transferSelectorNFT);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether user order nonce is executed or cancelled\r\n     * @param user address of user\r\n     * @param orderNonce nonce of the order\r\n     */\r\n    function isUserOrderNonceExecutedOrCancelled(address user, uint256 orderNonce) external view returns (bool) {\r\n        return _isUserOrderNonceExecutedOrCancelled[user][orderNonce];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\r\n     * @param strategy address of the execution strategy\r\n     * @param collection non fungible token address for the transfer\r\n     * @param tokenId tokenId\r\n     * @param currency currency being used for the purchase (e.g., WETH/USDC)\r\n     * @param from sender of the funds\r\n     * @param to seller's recipient\r\n     * @param amount amount being transferred (in currency)\r\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\r\n     */\r\n    function _transferFeesAndFunds(\r\n        address strategy,\r\n        address collection,\r\n        uint256 tokenId,\r\n        address currency,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minPercentageToAsk\r\n    ) internal {\r\n        // Initialize the final amount that is transferred to seller\r\n        uint256 finalSellerAmount = amount;\r\n\r\n        // 1. Protocol fee\r\n        {\r\n            uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\r\n\r\n            // Check if the protocol fee is different than 0 for this strategy\r\n            if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\r\n                IERC20(currency).safeTransferFrom(from, protocolFeeRecipient, protocolFeeAmount);\r\n                finalSellerAmount -= protocolFeeAmount;\r\n            }\r\n        }\r\n\r\n        // 2. Royalty fee\r\n        {\r\n            (address royaltyFeeRecipient, uint256 royaltyFeeAmount) = royaltyFeeManager\r\n                .calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\r\n\r\n            // Check if there is a royalty fee and that it is different to 0\r\n            if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\r\n                IERC20(currency).safeTransferFrom(from, royaltyFeeRecipient, royaltyFeeAmount);\r\n                finalSellerAmount -= royaltyFeeAmount;\r\n\r\n                emit RoyaltyPayment(collection, tokenId, royaltyFeeRecipient, currency, royaltyFeeAmount);\r\n            }\r\n        }\r\n\r\n        require((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \"Fees: Higher than expected\");\r\n\r\n        // 3. Transfer final amount (post-fees) to seller\r\n        {\r\n            IERC20(currency).safeTransferFrom(from, to, finalSellerAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\r\n     * @param strategy address of the execution strategy\r\n     * @param collection non fungible token address for the transfer\r\n     * @param tokenId tokenId\r\n     * @param to seller's recipient\r\n     * @param amount amount being transferred (in currency)\r\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\r\n     */\r\n    function _transferFeesAndFundsWithWETH(\r\n        address strategy,\r\n        address collection,\r\n        uint256 tokenId,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minPercentageToAsk\r\n    ) internal {\r\n        // Initialize the final amount that is transferred to seller\r\n        uint256 finalSellerAmount = amount;\r\n\r\n        // 1. Protocol fee\r\n        {\r\n            uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\r\n\r\n            // Check if the protocol fee is different than 0 for this strategy\r\n            if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\r\n                IERC20(WETH).safeTransfer(protocolFeeRecipient, protocolFeeAmount);\r\n                finalSellerAmount -= protocolFeeAmount;\r\n            }\r\n        }\r\n\r\n        // 2. Royalty fee\r\n        {\r\n            (address royaltyFeeRecipient, uint256 royaltyFeeAmount) = royaltyFeeManager\r\n                .calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\r\n\r\n            // Check if there is a royalty fee and that it is different to 0\r\n            if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\r\n                IERC20(WETH).safeTransfer(royaltyFeeRecipient, royaltyFeeAmount);\r\n                finalSellerAmount -= royaltyFeeAmount;\r\n\r\n                emit RoyaltyPayment(collection, tokenId, royaltyFeeRecipient, address(WETH), royaltyFeeAmount);\r\n            }\r\n        }\r\n\r\n        require((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \"Fees: Higher than expected\");\r\n\r\n        // 3. Transfer final amount (post-fees) to seller\r\n        {\r\n            IERC20(WETH).safeTransfer(to, finalSellerAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer NFT\r\n     * @param collection address of the token collection\r\n     * @param from address of the sender\r\n     * @param to address of the recipient\r\n     * @param tokenId tokenId\r\n     * @param amount amount of tokens (1 for ERC721, 1+ for ERC1155)\r\n     * @dev For ERC721, amount is not used\r\n     */\r\n    function _transferNonFungibleToken(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) internal {\r\n        // Retrieve the transfer manager address\r\n        address transferManager = transferSelectorNFT.checkTransferManagerForToken(collection);\r\n\r\n        // If no transfer manager found, it returns address(0)\r\n        require(transferManager != address(0), \"Transfer: No NFT transfer manager available\");\r\n\r\n        // If one is found, transfer the token\r\n        ITransferManagerNFT(transferManager).transferNonFungibleToken(collection, from, to, tokenId, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate protocol fee for an execution strategy\r\n     * @param executionStrategy strategy\r\n     * @param amount amount to transfer\r\n     */\r\n    function _calculateProtocolFee(address executionStrategy, uint256 amount) internal view returns (uint256) {\r\n        uint256 protocolFee = IExecutionStrategy(executionStrategy).viewProtocolFee();\r\n        return (protocolFee * amount) / 10000;\r\n    }\r\n\r\n    /**\r\n     * @notice Verify the validity of the maker order\r\n     * @param makerOrder maker order\r\n     * @param orderHash computed hash for the order\r\n     */\r\n    function _validateOrder(OrderTypes.MakerOrder calldata makerOrder, bytes32 orderHash) internal view {\r\n        // Verify whether order nonce has expired\r\n        require(\r\n            (!_isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.nonce]) &&\r\n                (makerOrder.nonce >= userMinOrderNonce[makerOrder.signer]),\r\n            \"Order: Matching order expired\"\r\n        );\r\n\r\n        // Verify the signer is not address(0)\r\n        require(makerOrder.signer != address(0), \"Order: Invalid signer\");\r\n\r\n        // Verify the amount is not 0\r\n        require(makerOrder.amount > 0, \"Order: Amount cannot be 0\");\r\n\r\n        // Verify the validity of the signature\r\n        require(\r\n            SignatureChecker.verify(\r\n                orderHash,\r\n                makerOrder.signer,\r\n                makerOrder.v,\r\n                makerOrder.r,\r\n                makerOrder.s,\r\n                DOMAIN_SEPARATOR\r\n            ),\r\n            \"Signature: Invalid\"\r\n        );\r\n\r\n        // Verify whether the currency is whitelisted\r\n        require(currencyManager.isCurrencyWhitelisted(makerOrder.currency), \"Currency: Not whitelisted\");\r\n\r\n        // Verify whether strategy can be executed\r\n        require(executionManager.isStrategyWhitelisted(makerOrder.strategy), \"Strategy: Not whitelisted\");\r\n    }\r\n}"
    },
    "contracts/looksRare/interfaces/ICurrencyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ICurrencyManager {\r\n    function addCurrency(address currency) external;\r\n\r\n    function removeCurrency(address currency) external;\r\n\r\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\r\n\r\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\r\n\r\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\r\n}"
    },
    "contracts/looksRare/interfaces/IExecutionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IExecutionManager {\r\n    function addStrategy(address strategy) external;\r\n\r\n    function removeStrategy(address strategy) external;\r\n\r\n    function isStrategyWhitelisted(address strategy) external view returns (bool);\r\n\r\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\r\n\r\n    function viewCountWhitelistedStrategies() external view returns (uint256);\r\n}"
    },
    "contracts/looksRare/interfaces/IExecutionStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\n\r\ninterface IExecutionStrategy {\r\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function viewProtocolFee() external view returns (uint256);\r\n}"
    },
    "contracts/looksRare/interfaces/IRoyaltyFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRoyaltyFeeManager {\r\n    function calculateRoyaltyFeeAndGetRecipient(\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external view returns (address, uint256);\r\n}"
    },
    "contracts/looksRare/interfaces/ILooksRareExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\n\r\ninterface ILooksRareExchange {\r\n    function matchAskWithTakerBidUsingETHAndWETH(\r\n        OrderTypes.TakerOrder calldata takerBid,\r\n        OrderTypes.MakerOrder calldata makerAsk\r\n    ) external payable;\r\n\r\n    function matchAskWithTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external;\r\n\r\n    function matchBidWithTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external;\r\n}"
    },
    "contracts/looksRare/interfaces/ITransferManagerNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITransferManagerNFT {\r\n    function transferNonFungibleToken(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external;\r\n}"
    },
    "contracts/looksRare/interfaces/ITransferSelectorNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITransferSelectorNFT {\r\n    function checkTransferManagerForToken(address collection) external view returns (address);\r\n}"
    },
    "contracts/looksRare/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GNU\r\npragma solidity >=0.8.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}"
    },
    "contracts/looksRare/strategy/StrategyPrivateSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\r\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\r\n\r\n/**\r\n * @title StrategyPrivateSale\r\n * @notice Strategy to set up an order that can only be executed by\r\n * a specific address.\r\n */\r\ncontract StrategyPrivateSale is IExecutionStrategy {\r\n    uint256 public immutable PROTOCOL_FEE;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _protocolFee: protocol fee (200 --> 2%, 400 --> 4%)\r\n     */\r\n    constructor(uint256 _protocolFee) {\r\n        PROTOCOL_FEE = _protocolFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether a taker ask order can be executed against a maker bid\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata, OrderTypes.MakerOrder calldata)\r\n        external\r\n        pure\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (false, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether a taker bid order can be executed against a maker ask\r\n     * @param takerBid taker bid order\r\n     * @param makerAsk maker ask order\r\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\r\n     */\r\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        // Retrieve target buyer\r\n        address targetBuyer = abi.decode(makerAsk.params, (address));\r\n\r\n        return (\r\n            ((targetBuyer == takerBid.taker) &&\r\n                (makerAsk.price == takerBid.price) &&\r\n                (makerAsk.tokenId == takerBid.tokenId) &&\r\n                (makerAsk.startTime <= block.timestamp) &&\r\n                (makerAsk.endTime >= block.timestamp)),\r\n            makerAsk.tokenId,\r\n            makerAsk.amount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Return protocol fee for this strategy\r\n     * @return protocol fee\r\n     */\r\n    function viewProtocolFee() external view override returns (uint256) {\r\n        return PROTOCOL_FEE;\r\n    }\r\n}"
    },
    "contracts/looksRare/TransferSelectorNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\nimport {ITransferSelectorNFT} from \"./interfaces/ITransferSelectorNFT.sol\";\r\n\r\n/**\r\n * @title TransferSelectorNFT\r\n * @notice It selects the NFT transfer manager based on a collection address.\r\n */\r\ncontract TransferSelectorNFT is ITransferSelectorNFT, Ownable {\r\n    // ERC721 interfaceID\r\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    // ERC1155 interfaceID\r\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\r\n\r\n    // Address of the transfer manager contract for ERC721 tokens\r\n    address public immutable TRANSFER_MANAGER_ERC721;\r\n\r\n    // Address of the transfer manager contract for ERC1155 tokens\r\n    address public immutable TRANSFER_MANAGER_ERC1155;\r\n\r\n    // Map collection address to transfer manager address\r\n    mapping(address => address) public transferManagerSelectorForCollection;\r\n\r\n    event CollectionTransferManagerAdded(address indexed collection, address indexed transferManager);\r\n    event CollectionTransferManagerRemoved(address indexed collection);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _transferManagerERC721 address of the ERC721 transfer manager\r\n     * @param _transferManagerERC1155 address of the ERC1155 transfer manager\r\n     */\r\n    constructor(address _transferManagerERC721, address _transferManagerERC1155) {\r\n        TRANSFER_MANAGER_ERC721 = _transferManagerERC721;\r\n        TRANSFER_MANAGER_ERC1155 = _transferManagerERC1155;\r\n    }\r\n\r\n    /**\r\n     * @notice Add a transfer manager for a collection\r\n     * @param collection collection address to add specific transfer rule\r\n     * @dev It is meant to be used for exceptions only (e.g., CryptoKitties)\r\n     */\r\n    function addCollectionTransferManager(address collection, address transferManager) external onlyOwner {\r\n        require(collection != address(0), \"Owner: Collection cannot be null address\");\r\n        require(transferManager != address(0), \"Owner: TransferManager cannot be null address\");\r\n\r\n        transferManagerSelectorForCollection[collection] = transferManager;\r\n\r\n        emit CollectionTransferManagerAdded(collection, transferManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove a transfer manager for a collection\r\n     * @param collection collection address to remove exception\r\n     */\r\n    function removeCollectionTransferManager(address collection) external onlyOwner {\r\n        require(\r\n            transferManagerSelectorForCollection[collection] != address(0),\r\n            \"Owner: Collection has no transfer manager\"\r\n        );\r\n\r\n        // Set it to the address(0)\r\n        transferManagerSelectorForCollection[collection] = address(0);\r\n\r\n        emit CollectionTransferManagerRemoved(collection);\r\n    }\r\n\r\n    /**\r\n     * @notice Check the transfer manager for a token\r\n     * @param collection collection address\r\n     * @dev Support for ERC165 interface is checked AFTER custom implementation\r\n     */\r\n    function checkTransferManagerForToken(address collection) external view override returns (address transferManager) {\r\n        // Assign transfer manager (if any)\r\n        transferManager = transferManagerSelectorForCollection[collection];\r\n\r\n        if (transferManager == address(0)) {\r\n            if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\r\n                transferManager = TRANSFER_MANAGER_ERC721;\r\n            } else if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)) {\r\n                transferManager = TRANSFER_MANAGER_ERC1155;\r\n            }\r\n        }\r\n\r\n        return transferManager;\r\n    }\r\n}"
    },
    "contracts/looksRare/transfer/TransferManagerNonCompliantERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {ITransferManagerNFT} from \"../interfaces/ITransferManagerNFT.sol\";\r\n\r\n/**\r\n * @title TransferManagerNonCompliantERC721\r\n * @notice It allows the transfer of ERC721 tokens without safeTransferFrom.\r\n */\r\ncontract TransferManagerNonCompliantERC721 is ITransferManagerNFT {\r\n    address public immutable LOOKS_RARE_EXCHANGE;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _looksRareExchange address of the LooksRare exchange\r\n     */\r\n    constructor(address _looksRareExchange) {\r\n        LOOKS_RARE_EXCHANGE = _looksRareExchange;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ERC721 token\r\n     * @param collection address of the collection\r\n     * @param from address of the sender\r\n     * @param to address of the recipient\r\n     * @param tokenId tokenId\r\n     */\r\n    function transferNonFungibleToken(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256\r\n    ) external override {\r\n        require(msg.sender == LOOKS_RARE_EXCHANGE, \"Transfer: Only LooksRare Exchange\");\r\n        IERC721(collection).transferFrom(from, to, tokenId);\r\n    }\r\n}"
    },
    "contracts/looksRare/transfer/TransferManagerERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\nimport {ITransferManagerNFT} from \"../interfaces/ITransferManagerNFT.sol\";\r\n\r\n/**\r\n * @title TransferManagerERC721\r\n * @notice It allows the transfer of ERC721 tokens.\r\n */\r\ncontract TransferManagerERC721 is ITransferManagerNFT {\r\n    address public immutable LOOKS_RARE_EXCHANGE;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _looksRareExchange address of the LooksRare exchange\r\n     */\r\n    constructor(address _looksRareExchange) {\r\n        LOOKS_RARE_EXCHANGE = _looksRareExchange;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ERC721 token\r\n     * @param collection address of the collection\r\n     * @param from address of the sender\r\n     * @param to address of the recipient\r\n     * @param tokenId tokenId\r\n     * @dev For ERC721, amount is not used\r\n     */\r\n    function transferNonFungibleToken(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256\r\n    ) external override {\r\n        require(msg.sender == LOOKS_RARE_EXCHANGE, \"Transfer: Only LooksRare Exchange\");\r\n        // https://docs.openzeppelin.com/contracts/2.x/api/token/erc721#IERC721-safeTransferFrom\r\n        IERC721(collection).safeTransferFrom(from, to, tokenId);\r\n    }\r\n}"
    },
    "contracts/looksRare/transfer/TransferManagerERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\nimport {ITransferManagerNFT} from \"../interfaces/ITransferManagerNFT.sol\";\r\n\r\n/**\r\n * @title TransferManagerERC1155\r\n * @notice It allows the transfer of ERC1155 tokens.\r\n */\r\ncontract TransferManagerERC1155 is ITransferManagerNFT {\r\n    address public immutable LOOKS_RARE_EXCHANGE;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _looksRareExchange address of the LooksRare exchange\r\n     */\r\n    constructor(address _looksRareExchange) {\r\n        LOOKS_RARE_EXCHANGE = _looksRareExchange;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ERC1155 token(s)\r\n     * @param collection address of the collection\r\n     * @param from address of the sender\r\n     * @param to address of the recipient\r\n     * @param tokenId tokenId\r\n     * @param amount amount of tokens (1 and more for ERC1155)\r\n     */\r\n    function transferNonFungibleToken(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external override {\r\n        require(msg.sender == LOOKS_RARE_EXCHANGE, \"Transfer: Only LooksRare Exchange\");\r\n        // https://docs.openzeppelin.com/contracts/3.x/api/token/erc1155#IERC1155-safeTransferFrom-address-address-uint256-uint256-bytes-\r\n        IERC1155(collection).safeTransferFrom(from, to, tokenId, amount, \"\");\r\n    }\r\n}"
    },
    "contracts/token/onft/extension/ProxyONFT1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../ONFT1155Core.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\r\n\r\ncontract ProxyONFT1155 is ONFT1155Core, IERC1155Receiver {\r\n    using ERC165Checker for address;\r\n\r\n    IERC1155 public immutable token;\r\n\r\n    constructor(address _lzEndpoint, address _proxyToken) ONFT1155Core(_lzEndpoint) {\r\n        require(_proxyToken.supportsInterface(type(IERC1155).interfaceId), \"ProxyONFT1155: invalid ERC1155 token\");\r\n        token = IERC1155(_proxyToken);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT1155Core, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function _debitFrom(address _from, uint16, bytes memory, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        require(_from == _msgSender(), \"ProxyONFT1155: owner is not send caller\");\r\n        token.safeBatchTransferFrom(_from, address(this), _tokenIds, _amounts, \"\");\r\n    }\r\n\r\n    function _creditTo(uint16, address _toAddress, uint[] memory _tokenIds, uint[] memory _amounts) internal virtual override {\r\n        token.safeBatchTransferFrom(address(this), _toAddress, _tokenIds, _amounts, \"\");\r\n    }\r\n\r\n    function onERC1155Received(address _operator, address, uint, uint, bytes memory) public virtual override returns (bytes4) {\r\n        // only allow `this` to tranfser token from others\r\n        if (_operator != address(this)) return bytes4(0);\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address _operator, address, uint[] memory, uint[] memory, bytes memory) public virtual override returns (bytes4) {\r\n        // only allow `this` to tranfser token from others\r\n        if (_operator != address(this)) return bytes4(0);\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n"
    },
    "contracts/looksRare/RoyaltyFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC165, IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\n\r\nimport {IRoyaltyFeeManager} from \"./interfaces/IRoyaltyFeeManager.sol\";\r\nimport {IRoyaltyFeeRegistry} from \"./interfaces/IRoyaltyFeeRegistry.sol\";\r\n\r\n/**\r\n * @title RoyaltyFeeManager\r\n * @notice It handles the logic to check and transfer royalty fees (if any).\r\n */\r\ncontract RoyaltyFeeManager is IRoyaltyFeeManager, Ownable {\r\n    // https://eips.ethereum.org/EIPS/eip-2981\r\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n\r\n    IRoyaltyFeeRegistry public immutable royaltyFeeRegistry;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _royaltyFeeRegistry address of the RoyaltyFeeRegistry\r\n     */\r\n    constructor(address _royaltyFeeRegistry) {\r\n        royaltyFeeRegistry = IRoyaltyFeeRegistry(_royaltyFeeRegistry);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate royalty fee and get recipient\r\n     * @param collection address of the NFT contract\r\n     * @param tokenId tokenId\r\n     * @param amount amount to transfer\r\n     */\r\n    function calculateRoyaltyFeeAndGetRecipient(\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external view override returns (address, uint256) {\r\n        // 1. Check if there is a royalty info in the system\r\n        (address receiver, uint256 royaltyAmount) = royaltyFeeRegistry.royaltyInfo(collection, amount);\r\n\r\n        // 2. If the receiver is address(0), fee is null, check if it supports the ERC2981 interface\r\n        if ((receiver == address(0)) || (royaltyAmount == 0)) {\r\n            if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981)) {\r\n                (receiver, royaltyAmount) = IERC2981(collection).royaltyInfo(tokenId, amount);\r\n            }\r\n        }\r\n        return (receiver, royaltyAmount);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "contracts/looksRare/interfaces/IRoyaltyFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRoyaltyFeeRegistry {\r\n    function updateRoyaltyInfoForCollection(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) external;\r\n\r\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\r\n\r\n    function royaltyInfo(address collection, uint256 amount) external view returns (address, uint256);\r\n\r\n    function royaltyFeeInfoCollection(address collection)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            address,\r\n            uint256\r\n        );\r\n}"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "contracts/looksRare/royalty/RoyaltyFeeSetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\nimport {IRoyaltyFeeRegistry} from \"../interfaces/IRoyaltyFeeRegistry.sol\";\r\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\r\n\r\n/**\r\n * @title RoyaltyFeeSetter\r\n * @notice It is used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\r\n */\r\ncontract RoyaltyFeeSetter is Ownable {\r\n    // ERC721 interfaceID\r\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    // ERC1155 interfaceID\r\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\r\n\r\n    // ERC2981 interfaceID\r\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\r\n\r\n    address public immutable royaltyFeeRegistry;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _royaltyFeeRegistry address of the royalty fee registry\r\n     */\r\n    constructor(address _royaltyFeeRegistry) {\r\n        royaltyFeeRegistry = _royaltyFeeRegistry;\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection if admin\r\n     * @dev Only to be called if there is no setter address\r\n     * @param collection address of the NFT contract\r\n     * @param setter address that sets the receiver\r\n     * @param receiver receiver for the royalty fee\r\n     * @param fee fee (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyInfoForCollectionIfAdmin(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) external {\r\n        require(!IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981), \"Admin: Must not be ERC2981\");\r\n        require(msg.sender == IOwnable(collection).admin(), \"Admin: Not the admin\");\r\n\r\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(collection, setter, receiver, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection if owner\r\n     * @dev Only to be called if there is no setter address\r\n     * @param collection address of the NFT contract\r\n     * @param setter address that sets the receiver\r\n     * @param receiver receiver for the royalty fee\r\n     * @param fee fee (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyInfoForCollectionIfOwner(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) external {\r\n        require(!IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981), \"Owner: Must not be ERC2981\");\r\n        require(msg.sender == IOwnable(collection).owner(), \"Owner: Not the owner\");\r\n\r\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(collection, setter, receiver, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection\r\n     * @dev Only to be called if there msg.sender is the setter\r\n     * @param collection address of the NFT contract\r\n     * @param setter address that sets the receiver\r\n     * @param receiver receiver for the royalty fee\r\n     * @param fee fee (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyInfoForCollectionIfSetter(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) external {\r\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\r\n        require(msg.sender == currentSetter, \"Setter: Not the setter\");\r\n\r\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection\r\n     * @dev Can only be called by contract owner (of this)\r\n     * @param collection address of the NFT contract\r\n     * @param setter address that sets the receiver\r\n     * @param receiver receiver for the royalty fee\r\n     * @param fee fee (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyInfoForCollection(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) external onlyOwner {\r\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Update owner of royalty fee registry\r\n     * @dev Can be used for migration of this royalty fee setter contract\r\n     * @param _owner new owner address\r\n     */\r\n    function updateOwnerOfRoyaltyFeeRegistry(address _owner) external onlyOwner {\r\n        IOwnable(royaltyFeeRegistry).transferOwnership(_owner);\r\n    }\r\n\r\n    /**\r\n     * @notice Update royalty info for collection\r\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external onlyOwner {\r\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyFeeLimit(_royaltyFeeLimit);\r\n    }\r\n\r\n    /**\r\n     * @notice Check royalty info for collection\r\n     * @param collection collection address\r\n     * @return (whether there is a setter (address(0 if not)),\r\n     * Position\r\n     * 0: Royalty setter is set in the registry\r\n     * 1: ERC2981 and no setter\r\n     * 2: setter can be set using owner()\r\n     * 3: setter can be set using admin()\r\n     * 4: setter cannot be set, nor support for ERC2981\r\n     */\r\n    function checkForCollectionSetter(address collection) external view returns (address, uint8) {\r\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\r\n\r\n        if (currentSetter != address(0)) {\r\n            return (currentSetter, 0);\r\n        }\r\n\r\n        try IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981) returns (bool interfaceSupport) {\r\n            if (interfaceSupport) {\r\n                return (address(0), 1);\r\n            }\r\n        } catch {}\r\n\r\n        try IOwnable(collection).owner() returns (address setter) {\r\n            return (setter, 2);\r\n        } catch {\r\n            try IOwnable(collection).admin() returns (address setter) {\r\n                return (setter, 3);\r\n            } catch {\r\n                return (address(0), 4);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Update information and perform checks before updating royalty fee registry\r\n     * @param collection address of the NFT contract\r\n     * @param setter address that sets the receiver\r\n     * @param receiver receiver for the royalty fee\r\n     * @param fee fee (500 = 5%, 1,000 = 10%)\r\n     */\r\n    function _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\r\n        address collection,\r\n        address setter,\r\n        address receiver,\r\n        uint256 fee\r\n    ) internal {\r\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\r\n        require(currentSetter == address(0), \"Setter: Already set\");\r\n\r\n        require(\r\n            (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721) ||\r\n                IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)),\r\n            \"Setter: Not ERC721/ERC1155\"\r\n        );\r\n\r\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\r\n    }\r\n}"
    },
    "contracts/looksRare/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOwnable {\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function admin() external view returns (address);\r\n}"
    },
    "contracts/looksRare/ExecutionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nimport {IExecutionManager} from \"./interfaces/IExecutionManager.sol\";\r\n\r\n/**\r\n * @title ExecutionManager\r\n * @notice It allows adding/removing execution strategies for trading on the LooksRare exchange.\r\n */\r\ncontract ExecutionManager is IExecutionManager, Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    EnumerableSet.AddressSet private _whitelistedStrategies;\r\n\r\n    event StrategyRemoved(address indexed strategy);\r\n    event StrategyWhitelisted(address indexed strategy);\r\n\r\n    /**\r\n     * @notice Add an execution strategy in the system\r\n     * @param strategy address of the strategy to add\r\n     */\r\n    function addStrategy(address strategy) external override onlyOwner {\r\n        require(!_whitelistedStrategies.contains(strategy), \"Strategy: Already whitelisted\");\r\n        _whitelistedStrategies.add(strategy);\r\n\r\n        emit StrategyWhitelisted(strategy);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove an execution strategy from the system\r\n     * @param strategy address of the strategy to remove\r\n     */\r\n    function removeStrategy(address strategy) external override onlyOwner {\r\n        require(_whitelistedStrategies.contains(strategy), \"Strategy: Not whitelisted\");\r\n        _whitelistedStrategies.remove(strategy);\r\n\r\n        emit StrategyRemoved(strategy);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns if an execution strategy is in the system\r\n     * @param strategy address of the strategy\r\n     */\r\n    function isStrategyWhitelisted(address strategy) external view override returns (bool) {\r\n        return _whitelistedStrategies.contains(strategy);\r\n    }\r\n\r\n    /**\r\n     * @notice View number of whitelisted strategies\r\n     */\r\n    function viewCountWhitelistedStrategies() external view override returns (uint256) {\r\n        return _whitelistedStrategies.length();\r\n    }\r\n\r\n    /**\r\n     * @notice See whitelisted strategies in the system\r\n     * @param cursor cursor (should start at 0 for first request)\r\n     * @param size size of the response (e.g., 50)\r\n     */\r\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size)\r\n        external\r\n        view\r\n        override\r\n        returns (address[] memory, uint256)\r\n    {\r\n        uint256 length = size;\r\n\r\n        if (length > _whitelistedStrategies.length() - cursor) {\r\n            length = _whitelistedStrategies.length() - cursor;\r\n        }\r\n\r\n        address[] memory whitelistedStrategies = new address[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            whitelistedStrategies[i] = _whitelistedStrategies.at(cursor + i);\r\n        }\r\n\r\n        return (whitelistedStrategies, cursor + length);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/looksRare/CurrencyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nimport {ICurrencyManager} from \"./interfaces/ICurrencyManager.sol\";\r\n\r\n/**\r\n * @title CurrencyManager\r\n * @notice It allows adding/removing currencies for trading on the LooksRare exchange.\r\n */\r\ncontract CurrencyManager is ICurrencyManager, Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    EnumerableSet.AddressSet private _whitelistedCurrencies;\r\n\r\n    event CurrencyRemoved(address indexed currency);\r\n    event CurrencyWhitelisted(address indexed currency);\r\n\r\n    /**\r\n     * @notice Add a currency in the system\r\n     * @param currency address of the currency to add\r\n     */\r\n    function addCurrency(address currency) external override onlyOwner {\r\n        require(!_whitelistedCurrencies.contains(currency), \"Currency: Already whitelisted\");\r\n        _whitelistedCurrencies.add(currency);\r\n\r\n        emit CurrencyWhitelisted(currency);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove a currency from the system\r\n     * @param currency address of the currency to remove\r\n     */\r\n    function removeCurrency(address currency) external override onlyOwner {\r\n        require(_whitelistedCurrencies.contains(currency), \"Currency: Not whitelisted\");\r\n        _whitelistedCurrencies.remove(currency);\r\n\r\n        emit CurrencyRemoved(currency);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns if a currency is in the system\r\n     * @param currency address of the currency\r\n     */\r\n    function isCurrencyWhitelisted(address currency) external view override returns (bool) {\r\n        return _whitelistedCurrencies.contains(currency);\r\n    }\r\n\r\n    /**\r\n     * @notice View number of whitelisted currencies\r\n     */\r\n    function viewCountWhitelistedCurrencies() external view override returns (uint256) {\r\n        return _whitelistedCurrencies.length();\r\n    }\r\n\r\n    /**\r\n     * @notice See whitelisted currencies in the system\r\n     * @param cursor cursor (should start at 0 for first request)\r\n     * @param size size of the response (e.g., 50)\r\n     */\r\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size)\r\n        external\r\n        view\r\n        override\r\n        returns (address[] memory, uint256)\r\n    {\r\n        uint256 length = size;\r\n\r\n        if (length > _whitelistedCurrencies.length() - cursor) {\r\n            length = _whitelistedCurrencies.length() - cursor;\r\n        }\r\n\r\n        address[] memory whitelistedCurrencies = new address[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            whitelistedCurrencies[i] = _whitelistedCurrencies.at(cursor + i);\r\n        }\r\n\r\n        return (whitelistedCurrencies, cursor + length);\r\n    }\r\n}"
    },
    "contracts/mocks/ONFT721Mock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8;\r\n\r\nimport \"../token/onft/ONFT721.sol\";\r\n\r\ncontract ONFT721Mock is ONFT721 {\r\n    constructor(string memory _name, string memory _symbol, address _layerZeroEndpoint) ONFT721(_name, _symbol, _layerZeroEndpoint) {}\r\n\r\n    function mint(address _tokenOwner, uint _newId) external payable {\r\n        _safeMint(_tokenOwner, _newId);\r\n    }\r\n}\r\n"
    },
    "contracts/looksRare/trading/FeeSharingSystem.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport {TokenDistributor} from \"./TokenDistributor.sol\";\r\n\r\n/**\r\n * @title FeeSharingSystem\r\n * @notice It handles the distribution of fees using\r\n * WETH along with the auto-compounding of LOOKS.\r\n */\r\ncontract FeeSharingSystem is ReentrancyGuard, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct UserInfo {\r\n        uint256 shares; // shares of token staked\r\n        uint256 userRewardPerTokenPaid; // user reward per token paid\r\n        uint256 rewards; // pending rewards\r\n    }\r\n\r\n    // Precision factor for calculating rewards and exchange rate\r\n    uint256 public constant PRECISION_FACTOR = 10**18;\r\n\r\n    IERC20 public immutable looksRareToken;\r\n\r\n    IERC20 public immutable rewardToken;\r\n\r\n    TokenDistributor public immutable tokenDistributor;\r\n\r\n    // Reward rate (block)\r\n    uint256 public currentRewardPerBlock;\r\n\r\n    // Last reward adjustment block number\r\n    uint256 public lastRewardAdjustment;\r\n\r\n    // Last update block for rewards\r\n    uint256 public lastUpdateBlock;\r\n\r\n    // Current end block for the current reward period\r\n    uint256 public periodEndBlock;\r\n\r\n    // Reward per token stored\r\n    uint256 public rewardPerTokenStored;\r\n\r\n    // Total existing shares\r\n    uint256 public totalShares;\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    event Deposit(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n    event Harvest(address indexed user, uint256 harvestedAmount);\r\n    event NewRewardPeriod(uint256 numberBlocks, uint256 rewardPerBlock, uint256 reward);\r\n    event Withdraw(address indexed user, uint256 amount, uint256 harvestedAmount);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param _looksRareToken address of the token staked (LOOKS)\r\n     * @param _rewardToken address of the reward token\r\n     * @param _tokenDistributor address of the token distributor contract\r\n     */\r\n    constructor(\r\n        address _looksRareToken,\r\n        address _rewardToken,\r\n        address _tokenDistributor\r\n    ) {\r\n        rewardToken = IERC20(_rewardToken);\r\n        looksRareToken = IERC20(_looksRareToken);\r\n        tokenDistributor = TokenDistributor(_tokenDistributor);\r\n    }\r\n\r\n    /**\r\n     * @notice Deposit staked tokens (and collect reward tokens if requested)\r\n     * @param amount amount to deposit (in LOOKS)\r\n     * @param claimRewardToken whether to claim reward tokens\r\n     * @dev There is a limit of 1 LOOKS per deposit to prevent potential manipulation of current shares\r\n     */\r\n    function deposit(uint256 amount, bool claimRewardToken) external nonReentrant {\r\n        require(amount >= PRECISION_FACTOR, \"Deposit: Amount must be >= 1 LOOKS\");\r\n\r\n        // Auto compounds for everyone\r\n        tokenDistributor.harvestAndCompound();\r\n\r\n        // Update reward for user\r\n        _updateReward(msg.sender);\r\n\r\n        // Retrieve total amount staked by this contract\r\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\r\n\r\n        // Transfer LOOKS tokens to this address\r\n        looksRareToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        uint256 currentShares;\r\n\r\n        // Calculate the number of shares to issue for the user\r\n        if (totalShares != 0) {\r\n            currentShares = (amount * totalShares) / totalAmountStaked;\r\n            // This is a sanity check to prevent deposit for 0 shares\r\n            require(currentShares != 0, \"Deposit: Fail\");\r\n        } else {\r\n            currentShares = amount;\r\n        }\r\n\r\n        // Adjust internal shares\r\n        userInfo[msg.sender].shares += currentShares;\r\n        totalShares += currentShares;\r\n\r\n        uint256 pendingRewards;\r\n\r\n        if (claimRewardToken) {\r\n            // Fetch pending rewards\r\n            pendingRewards = userInfo[msg.sender].rewards;\r\n\r\n            if (pendingRewards > 0) {\r\n                userInfo[msg.sender].rewards = 0;\r\n                rewardToken.safeTransfer(msg.sender, pendingRewards);\r\n            }\r\n        }\r\n\r\n        // Verify LOOKS token allowance and adjust if necessary\r\n        _checkAndAdjustLOOKSTokenAllowanceIfRequired(amount, address(tokenDistributor));\r\n\r\n        // Deposit user amount in the token distributor contract\r\n        tokenDistributor.deposit(amount);\r\n\r\n        emit Deposit(msg.sender, amount, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Harvest reward tokens that are pending\r\n     */\r\n    function harvest() external nonReentrant {\r\n        // Auto compounds for everyone\r\n        tokenDistributor.harvestAndCompound();\r\n\r\n        // Update reward for user\r\n        _updateReward(msg.sender);\r\n\r\n        // Retrieve pending rewards\r\n        uint256 pendingRewards = userInfo[msg.sender].rewards;\r\n\r\n        // If pending rewards are null, revert\r\n        require(pendingRewards > 0, \"Harvest: Pending rewards must be > 0\");\r\n\r\n        // Adjust user rewards and transfer\r\n        userInfo[msg.sender].rewards = 0;\r\n\r\n        // Transfer reward token to sender\r\n        rewardToken.safeTransfer(msg.sender, pendingRewards);\r\n\r\n        emit Harvest(msg.sender, pendingRewards);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens (and collect reward tokens if requested)\r\n     * @param shares shares to withdraw\r\n     * @param claimRewardToken whether to claim reward tokens\r\n     */\r\n    function withdraw(uint256 shares, bool claimRewardToken) external nonReentrant {\r\n        require(\r\n            (shares > 0) && (shares <= userInfo[msg.sender].shares),\r\n            \"Withdraw: Shares equal to 0 or larger than user shares\"\r\n        );\r\n\r\n        _withdraw(shares, claimRewardToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw all staked tokens (and collect reward tokens if requested)\r\n     * @param claimRewardToken whether to claim reward tokens\r\n     */\r\n    function withdrawAll(bool claimRewardToken) external nonReentrant {\r\n        _withdraw(userInfo[msg.sender].shares, claimRewardToken);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the reward per block (in rewardToken)\r\n     * @dev Only callable by owner. Owner is meant to be another smart contract.\r\n     */\r\n    function updateRewards(uint256 reward, uint256 rewardDurationInBlocks) external onlyOwner {\r\n        // Adjust the current reward per block\r\n        if (block.number >= periodEndBlock) {\r\n            currentRewardPerBlock = reward / rewardDurationInBlocks;\r\n        } else {\r\n            currentRewardPerBlock =\r\n                (reward + ((periodEndBlock - block.number) * currentRewardPerBlock)) /\r\n                rewardDurationInBlocks;\r\n        }\r\n\r\n        lastUpdateBlock = block.number;\r\n        periodEndBlock = block.number + rewardDurationInBlocks;\r\n\r\n        emit NewRewardPeriod(rewardDurationInBlocks, currentRewardPerBlock, reward);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate pending rewards (WETH) for a user\r\n     * @param user address of the user\r\n     */\r\n    function calculatePendingRewards(address user) external view returns (uint256) {\r\n        return _calculatePendingRewards(user);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate value of LOOKS for a user given a number of shares owned\r\n     * @param user address of the user\r\n     */\r\n    function calculateSharesValueInLOOKS(address user) external view returns (uint256) {\r\n        // Retrieve amount staked\r\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\r\n\r\n        // Adjust for pending rewards\r\n        totalAmountStaked += tokenDistributor.calculatePendingRewards(address(this));\r\n\r\n        // Return user pro-rata of total shares\r\n        return userInfo[user].shares == 0 ? 0 : (totalAmountStaked * userInfo[user].shares) / totalShares;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate price of one share (in LOOKS token)\r\n     * Share price is expressed times 1e18\r\n     */\r\n    function calculateSharePriceInLOOKS() external view returns (uint256) {\r\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\r\n\r\n        // Adjust for pending rewards\r\n        totalAmountStaked += tokenDistributor.calculatePendingRewards(address(this));\r\n\r\n        return totalShares == 0 ? PRECISION_FACTOR : (totalAmountStaked * PRECISION_FACTOR) / (totalShares);\r\n    }\r\n\r\n    /**\r\n     * @notice Return last block where trading rewards were distributed\r\n     */\r\n    function lastRewardBlock() external view returns (uint256) {\r\n        return _lastRewardBlock();\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate pending rewards for a user\r\n     * @param user address of the user\r\n     */\r\n    function _calculatePendingRewards(address user) internal view returns (uint256) {\r\n        return\r\n            ((userInfo[user].shares * (_rewardPerToken() - (userInfo[user].userRewardPerTokenPaid))) /\r\n                PRECISION_FACTOR) + userInfo[user].rewards;\r\n    }\r\n\r\n    /**\r\n     * @notice Check current allowance and adjust if necessary\r\n     * @param _amount amount to transfer\r\n     * @param _to token to transfer\r\n     */\r\n    function _checkAndAdjustLOOKSTokenAllowanceIfRequired(uint256 _amount, address _to) internal {\r\n        if (looksRareToken.allowance(address(this), _to) < _amount) {\r\n            looksRareToken.approve(_to, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Return last block where rewards must be distributed\r\n     */\r\n    function _lastRewardBlock() internal view returns (uint256) {\r\n        return block.number < periodEndBlock ? block.number : periodEndBlock;\r\n    }\r\n\r\n    /**\r\n     * @notice Return reward per token\r\n     */\r\n    function _rewardPerToken() internal view returns (uint256) {\r\n        if (totalShares == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n\r\n        return\r\n            rewardPerTokenStored +\r\n            ((_lastRewardBlock() - lastUpdateBlock) * (currentRewardPerBlock * PRECISION_FACTOR)) /\r\n            totalShares;\r\n    }\r\n\r\n    /**\r\n     * @notice Update reward for a user account\r\n     * @param _user address of the user\r\n     */\r\n    function _updateReward(address _user) internal {\r\n        if (block.number != lastUpdateBlock) {\r\n            rewardPerTokenStored = _rewardPerToken();\r\n            lastUpdateBlock = _lastRewardBlock();\r\n        }\r\n\r\n        userInfo[_user].rewards = _calculatePendingRewards(_user);\r\n        userInfo[_user].userRewardPerTokenPaid = rewardPerTokenStored;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw staked tokens (and collect reward tokens if requested)\r\n     * @param shares shares to withdraw\r\n     * @param claimRewardToken whether to claim reward tokens\r\n     */\r\n    function _withdraw(uint256 shares, bool claimRewardToken) internal {\r\n        // Auto compounds for everyone\r\n        tokenDistributor.harvestAndCompound();\r\n\r\n        // Update reward for user\r\n        _updateReward(msg.sender);\r\n\r\n        // Retrieve total amount staked and calculated current amount (in LOOKS)\r\n        (uint256 totalAmountStaked, ) = tokenDistributor.userInfo(address(this));\r\n        uint256 currentAmount = (totalAmountStaked * shares) / totalShares;\r\n\r\n        userInfo[msg.sender].shares -= shares;\r\n        totalShares -= shares;\r\n\r\n        // Withdraw amount equivalent in shares\r\n        tokenDistributor.withdraw(currentAmount);\r\n\r\n        uint256 pendingRewards;\r\n\r\n        if (claimRewardToken) {\r\n            // Fetch pending rewards\r\n            pendingRewards = userInfo[msg.sender].rewards;\r\n\r\n            if (pendingRewards > 0) {\r\n                userInfo[msg.sender].rewards = 0;\r\n                rewardToken.safeTransfer(msg.sender, pendingRewards);\r\n            }\r\n        }\r\n\r\n        // Transfer LOOKS tokens to sender\r\n        looksRareToken.safeTransfer(msg.sender, currentAmount);\r\n\r\n        emit Withdraw(msg.sender, currentAmount, pendingRewards);\r\n    }\r\n}"
    },
    "contracts/mocks/LZEndpointMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\npragma abicoder v2;\r\n\r\nimport \"../interfaces/ILayerZeroReceiver.sol\";\r\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\r\n\r\n/*\r\nmocking multi endpoint connection.\r\n- send() will short circuit to lzReceive() directly\r\n- no reentrancy guard. the real LayerZero endpoint on main net has a send and receive guard, respectively.\r\nif we run a ping-pong-like application, the recursive call might use all gas limit in the block.\r\n- not using any messaging library, hence all messaging library func, e.g. estimateFees, version, will not work\r\n*/\r\ncontract LZEndpointMock is ILayerZeroEndpoint {\r\n    mapping(address => address) public lzEndpointLookup;\r\n\r\n    uint16 public mockChainId;\r\n    address payable public mockOracle;\r\n    address payable public mockRelayer;\r\n    uint public mockBlockConfirmations;\r\n    uint16 public mockLibraryVersion;\r\n    uint public mockStaticNativeFee;\r\n    uint16 public mockLayerZeroVersion;\r\n    uint public nativeFee;\r\n    uint public zroFee;\r\n    bool nextMsgBLocked;\r\n\r\n    struct StoredPayload {\r\n        uint64 payloadLength;\r\n        address dstAddress;\r\n        bytes32 payloadHash;\r\n    }\r\n\r\n    struct QueuedPayload {\r\n        address dstAddress;\r\n        uint64 nonce;\r\n        bytes payload;\r\n    }\r\n\r\n    // inboundNonce = [srcChainId][srcAddress].\r\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\r\n    // outboundNonce = [dstChainId][srcAddress].\r\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\r\n    // storedPayload = [srcChainId][srcAddress]\r\n    mapping(uint16 => mapping(bytes => StoredPayload)) public storedPayload;\r\n    // msgToDeliver = [srcChainId][srcAddress]\r\n    mapping(uint16 => mapping(bytes => QueuedPayload[])) public msgsToDeliver;\r\n\r\n    event UaForceResumeReceive(uint16 chainId, bytes srcAddress);\r\n    event PayloadCleared(uint16 srcChainId, bytes srcAddress, uint64 nonce, address dstAddress);\r\n    event PayloadStored(uint16 srcChainId, bytes srcAddress, address dstAddress, uint64 nonce, bytes payload, bytes reason);\r\n\r\n    constructor(uint16 _chainId) {\r\n        mockStaticNativeFee = 42;\r\n        mockLayerZeroVersion = 1;\r\n        mockChainId = _chainId;\r\n    }\r\n\r\n    // mock helper to set the value returned by `estimateNativeFees`\r\n    function setEstimatedFees(uint _nativeFee, uint _zroFee) public {\r\n        nativeFee = _nativeFee;\r\n        zroFee = _zroFee;\r\n    }\r\n\r\n    function getChainId() external view override returns (uint16) {\r\n        return mockChainId;\r\n    }\r\n\r\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {\r\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\r\n    }\r\n\r\n    function send(\r\n        uint16 _chainId,\r\n        bytes calldata _destination,\r\n        bytes calldata _payload,\r\n        address payable, // _refundAddress\r\n        address, // _zroPaymentAddress\r\n        bytes memory _adapterParams\r\n    ) external payable override {\r\n        address destAddr = packedBytesToAddr(_destination);\r\n        address lzEndpoint = lzEndpointLookup[destAddr];\r\n\r\n        require(lzEndpoint != address(0), \"LayerZeroMock: destination LayerZero Endpoint not found\");\r\n\r\n        require(msg.value >= nativeFee * _payload.length, \"LayerZeroMock: not enough native for fees\");\r\n\r\n        uint64 nonce;\r\n        {\r\n            nonce = ++outboundNonce[_chainId][msg.sender];\r\n        }\r\n\r\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\r\n        {\r\n            uint extraGas;\r\n            uint dstNative;\r\n            address dstNativeAddr;\r\n            assembly {\r\n                extraGas := mload(add(_adapterParams, 34))\r\n                dstNative := mload(add(_adapterParams, 66))\r\n                dstNativeAddr := mload(add(_adapterParams, 86))\r\n            }\r\n\r\n            // to simulate actually sending the ether, add a transfer call and ensure the LZEndpointMock contract has an ether balance\r\n        }\r\n\r\n        bytes memory bytesSourceUserApplicationAddr = addrToPackedBytes(address(msg.sender)); // cast this address to bytes\r\n\r\n        // not using the extra gas parameter because this is a single tx call, not split between different chains\r\n        // LZEndpointMock(lzEndpoint).receivePayload(mockChainId, bytesSourceUserApplicationAddr, destAddr, nonce, extraGas, _payload);\r\n        LZEndpointMock(lzEndpoint).receivePayload(mockChainId, bytesSourceUserApplicationAddr, destAddr, nonce, 0, _payload);\r\n    }\r\n\r\n    function receivePayload(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        address _dstAddress,\r\n        uint64 _nonce,\r\n        uint, /*_gasLimit*/\r\n        bytes calldata _payload\r\n    ) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n\r\n        // assert and increment the nonce. no message shuffling\r\n        require(_nonce == ++inboundNonce[_srcChainId][_srcAddress], \"LayerZero: wrong nonce\");\r\n\r\n        // queue the following msgs inside of a stack to simulate a successful send on src, but not fully delivered on dst\r\n        if (sp.payloadHash != bytes32(0)) {\r\n            QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_srcAddress];\r\n            QueuedPayload memory newMsg = QueuedPayload(_dstAddress, _nonce, _payload);\r\n\r\n            // warning, might run into gas issues trying to forward through a bunch of queued msgs\r\n            // shift all the msgs over so we can treat this like a fifo via array.pop()\r\n            if (msgs.length > 0) {\r\n                // extend the array\r\n                msgs.push(newMsg);\r\n\r\n                // shift all the indexes up for pop()\r\n                for (uint i = 0; i < msgs.length - 1; i++) {\r\n                    msgs[i + 1] = msgs[i];\r\n                }\r\n\r\n                // put the newMsg at the bottom of the stack\r\n                msgs[0] = newMsg;\r\n            } else {\r\n                msgs.push(newMsg);\r\n            }\r\n        } else if (nextMsgBLocked) {\r\n            storedPayload[_srcChainId][_srcAddress] = StoredPayload(uint64(_payload.length), _dstAddress, keccak256(_payload));\r\n            emit PayloadStored(_srcChainId, _srcAddress, _dstAddress, _nonce, _payload, bytes(\"\"));\r\n            // ensure the next msgs that go through are no longer blocked\r\n            nextMsgBLocked = false;\r\n        } else {\r\n            // we ignore the gas limit because this call is made in one tx due to being \"same chain\"\r\n            // ILayerZeroReceiver(_dstAddress).lzReceive{gas: _gasLimit}(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive\r\n            ILayerZeroReceiver(_dstAddress).lzReceive(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive\r\n        }\r\n    }\r\n\r\n    // used to simulate messages received get stored as a payload\r\n    function blockNextMsg() external {\r\n        nextMsgBLocked = true;\r\n    }\r\n\r\n    function getLengthOfQueue(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint) {\r\n        return msgsToDeliver[_srcChainId][_srcAddress].length;\r\n    }\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16, address, bytes memory _payload, bool, bytes memory) external view override returns (uint _nativeFee, uint _zroFee) {\r\n        _nativeFee = nativeFee * _payload.length;\r\n        _zroFee = zroFee;\r\n    }\r\n\r\n    // give 20 bytes, return the decoded address\r\n    function packedBytesToAddr(bytes calldata _b) public pure returns (address) {\r\n        address addr;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, sub(_b.offset, 2), add(_b.length, 2))\r\n            addr := mload(sub(ptr, 10))\r\n        }\r\n        return addr;\r\n    }\r\n\r\n    // given an address, return the 20 bytes\r\n    function addrToPackedBytes(address _a) public pure returns (bytes memory) {\r\n        bytes memory data = abi.encodePacked(_a);\r\n        return data;\r\n    }\r\n\r\n    function setConfig(\r\n        uint16, /*_version*/\r\n        uint16, /*_chainId*/\r\n        uint, /*_configType*/\r\n        bytes memory /*_config*/\r\n    ) external override {}\r\n\r\n    function getConfig(\r\n        uint16, /*_version*/\r\n        uint16, /*_chainId*/\r\n        address, /*_ua*/\r\n        uint /*_configType*/\r\n    ) external pure override returns (bytes memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function setSendVersion(\r\n        uint16 /*version*/\r\n    ) external override {}\r\n\r\n    function setReceiveVersion(\r\n        uint16 /*version*/\r\n    ) external override {}\r\n\r\n    function getSendVersion(\r\n        address /*_userApplication*/\r\n    ) external pure override returns (uint16) {\r\n        return 1;\r\n    }\r\n\r\n    function getReceiveVersion(\r\n        address /*_userApplication*/\r\n    ) external pure override returns (uint16) {\r\n        return 1;\r\n    }\r\n\r\n    function getInboundNonce(uint16 _chainID, bytes calldata _srcAddress) external view override returns (uint64) {\r\n        return inboundNonce[_chainID][_srcAddress];\r\n    }\r\n\r\n    function getOutboundNonce(uint16 _chainID, address _srcAddress) external view override returns (uint64) {\r\n        return outboundNonce[_chainID][_srcAddress];\r\n    }\r\n\r\n    // simulates the relayer pushing through the rest of the msgs that got delayed due to the stored payload\r\n    function _clearMsgQue(uint16 _srcChainId, bytes calldata _srcAddress) internal {\r\n        QueuedPayload[] storage msgs = msgsToDeliver[_srcChainId][_srcAddress];\r\n\r\n        // warning, might run into gas issues trying to forward through a bunch of queued msgs\r\n        while (msgs.length > 0) {\r\n            QueuedPayload memory payload = msgs[msgs.length - 1];\r\n            ILayerZeroReceiver(payload.dstAddress).lzReceive(_srcChainId, _srcAddress, payload.nonce, payload.payload);\r\n            msgs.pop();\r\n        }\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n        // revert if no messages are cached. safeguard malicious UA behaviour\r\n        require(sp.payloadHash != bytes32(0), \"LayerZero: no stored payload\");\r\n        require(sp.dstAddress == msg.sender, \"LayerZero: invalid caller\");\r\n\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        emit UaForceResumeReceive(_srcChainId, _srcAddress);\r\n\r\n        // resume the receiving of msgs after we force clear the \"stuck\" msg\r\n        _clearMsgQue(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external override {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n        require(sp.payloadHash != bytes32(0), \"LayerZero: no stored payload\");\r\n        require(_payload.length == sp.payloadLength && keccak256(_payload) == sp.payloadHash, \"LayerZero: invalid payload\");\r\n\r\n        address dstAddress = sp.dstAddress;\r\n        // empty the storedPayload\r\n        sp.payloadLength = 0;\r\n        sp.dstAddress = address(0);\r\n        sp.payloadHash = bytes32(0);\r\n\r\n        uint64 nonce = inboundNonce[_srcChainId][_srcAddress];\r\n\r\n        ILayerZeroReceiver(dstAddress).lzReceive(_srcChainId, _srcAddress, nonce, _payload);\r\n        emit PayloadCleared(_srcChainId, _srcAddress, nonce, dstAddress);\r\n    }\r\n\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view override returns (bool) {\r\n        StoredPayload storage sp = storedPayload[_srcChainId][_srcAddress];\r\n        return sp.payloadHash != bytes32(0);\r\n    }\r\n\r\n    function isSendingPayload() external pure override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function isReceivingPayload() external pure override returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function getSendLibraryAddress(address) external view override returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function getReceiveLibraryAddress(address) external view override returns (address) {\r\n        return address(this);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}