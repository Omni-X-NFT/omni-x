{
  "address": "0xFDB6907c2544cA8bC2bF665dEAbAc03242429E28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_layerZeroEndpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startMintId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endMintId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTokensPerMint",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseTokenURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_boughtCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_publicSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_saleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipPublicSaleStarted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipRevealed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipSaleStarted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLzEndpoint",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemote",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTokensPerMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nbTokens",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextMintId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nbTokens",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "sendFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_royaltyBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x803021f469d64ef8bce63bcbd0b25fc7f751394870f3e1a3ef23dc765dfcb785",
  "receipt": {
    "to": null,
    "from": "0x34c935743ddEaCbd6675d2705e4A55992eB99F82",
    "contractAddress": "0xFDB6907c2544cA8bC2bF665dEAbAc03242429E28",
    "transactionIndex": 0,
    "gasUsed": "4162542",
    "logsBloom": "0x
    "blockHash": "0x6060dc4045cf2ad7d5351903fb452fb260fec3f5eedd2e3b3f747c4ab1ab8c72",
    "transactionHash": "0x803021f469d64ef8bce63bcbd0b25fc7f751394870f3e1a3ef23dc765dfcb785",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1278561,
        "transactionHash": "0x803021f469d64ef8bce63bcbd0b25fc7f751394870f3e1a3ef23dc765dfcb785",
        "address": "0xFDB6907c2544cA8bC2bF665dEAbAc03242429E28",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000034c935743ddeacbd6675d2705e4a55992eb99f82"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6060dc4045cf2ad7d5351903fb452fb260fec3f5eedd2e3b3f747c4ab1ab8c72"
      }
    ],
    "blockNumber": 1278561,
    "cumulativeGasUsed": "4162542",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Kanpai Pandas",
    "KPD",
    "0xae92d5aD7583AD66E49A0c67BAd18F6ba52dDDc1",
    3900,
    4200,
    5,
    "ipfs://QmV8cx4TAMX4ghZJTXKFYG37Fq4uLmqXrKNB1jUTXqke3R/images/"
  ],
  "numDeployments": 1,
  "solcInputHash": "90fa4295504689b094020841c8d1a0df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_layerZeroEndpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startMintId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endMintId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokensPerMint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_boughtCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_publicSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_saleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPublicSaleStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipRevealed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSaleStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLzEndpoint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemote\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nbTokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMintId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nbTokens\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltyBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"exakoss\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"_baseTokenURI\":\"the base URI for computing the tokenURI\",\"_endMintId\":\"the max number of mints on this chain\",\"_layerZeroEndpoint\":\"handles message transmission across chains\",\"_maxTokensPerMint\":\"the max number of tokens that could be minted in a single transaction\",\"_name\":\"the name of the token\",\"_startMintId\":\"the starting mint number on this chain, excluded\",\"_symbol\":\"the token symbol\"}},\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"details\":\"estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenId - token Id to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"sendFrom(address,uint16,bytes,uint256,address,address,bytes)\":{\"details\":\"send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Interface of the AdvancedONFT standard\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor for the AdvancedONFT\"},\"mint(uint256,bytes32[])\":{\"notice\":\"Mint your ONFTs, whitelisted addresses only\"},\"publicMint(uint256)\":{\"notice\":\"Mint your ONFTs\"}},\"notice\":\"this implementation supports: batch mint, payable public and private mint, reveal of metadata and EIP-2981 on-chain royalties\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/onft/extension/KanpaiPandas.sol\":\"KanpaiPandas\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xea64fbaccbf9d8c235cf6838240ddcebb97f9fc383660289e9dff32e4fb85f7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\",\"keccak256\":\"0x99e841ea21cba851b8356c00db1f42f8b6f51f7c69c9d51c567124530a3cf842\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\",\"keccak256\":\"0x8d3744d49cea963aca1774a20e95e4ea157725f8d70eaa8fdf601c4ca28cb99b\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\",\"keccak256\":\"0xc4a255f5e1c8636ff1f46c97eecfdf583f50d87f53f7dad5451bea4f14fe3132\",\"license\":\"MIT\"},\"contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    ILayerZeroEndpoint internal immutable lzEndpoint;\\n\\n    mapping(uint16 => bytes) internal trustedRemoteLookup;\\n\\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) external override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint));\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemoteLookup[_srcChainId].length && keccak256(_srcAddress) == keccak256(trustedRemoteLookup[_srcChainId]), \\\"LzReceiver: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParam) internal {\\n        require(trustedRemoteLookup[_dstChainId].length != 0, \\\"LzSend: destination chain is not a trusted source.\\\");\\n        lzEndpoint.send{value: msg.value}(_dstChainId, trustedRemoteLookup[_dstChainId], _payload, _refundAddress, _zroPaymentAddress, _adapterParam);\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(lzEndpoint.getSendVersion(address(this)), _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // allow owner to set it multiple times.\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\n    }\\n\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    // interacting with the LayerZero Endpoint and remote contracts\\n\\n    function getTrustedRemote(uint16 _chainId) external view returns (bytes memory) {\\n        return trustedRemoteLookup[_chainId];\\n    }\\n\\n    function getLzEndpoint() external view returns (address) {\\n        return address(lzEndpoint);\\n    }\\n}\",\"keccak256\":\"0x4de64ebc690dd67137ea67167de2d2f5cf3b38bc3b49eb025bbc46cf3182f67a\",\"license\":\"MIT\"},\"contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        // try-catch all errors/exceptions\\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\n            // do nothing\\n        } catch {\\n            // error / exception\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\n        }\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"LzReceiver: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes calldata _payload) external payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"LzReceiver: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"LzReceiver: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n}\",\"keccak256\":\"0xead348f4e87c286f57afc5b423a82332993f71c336305427f002cf654e5a2753\",\"license\":\"MIT\"},\"contracts/token/onft/IONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the ONFT Core standard\\n */\\ninterface IONFT721Core is IERC165 {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _tokenId - token Id to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes calldata _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    /**\\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce from\\n     */\\n    event SendToChain(address indexed _sender, uint16 indexed _dstChainId, bytes indexed _toAddress, uint _tokenId, uint64 _nonce);\\n\\n    /**\\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, bytes indexed _srcAddress, address indexed _toAddress, uint _tokenId, uint64 _nonce);\\n}\\n\",\"keccak256\":\"0x5e0573be45ff4218d9deaf581b93b75c2ce6d7f252fcea2a8ff627b03ba18fdb\",\"license\":\"MIT\"},\"contracts/token/onft/IONFT721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IONFT721Core.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev Interface of the ONFTEnumerable standard\\n */\\ninterface IONFT721Enumerable is IONFT721Core, IERC721Enumerable {\\n\\n}\",\"keccak256\":\"0x895bf7d912954034dff5d0275cd671fdafe0afae72b17d03516c8bad7611ea70\",\"license\":\"MIT\"},\"contracts/token/onft/ONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IONFT721Core.sol\\\";\\nimport \\\"../../lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract ONFT721Core is NonblockingLzApp, ERC165, IONFT721Core {\\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IONFT721Core).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\n        // mock the payload for send()\\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\\n        _send(_from, _dstChainId, _toAddress, _tokenId, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\\n        _debitFrom(_from, _dstChainId, _toAddress, _tokenId);\\n\\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n\\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\\n        emit SendToChain(_from, _dstChainId, _toAddress, _tokenId, nonce);\\n    }\\n\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        // decode and load the toAddress\\n        (bytes memory toAddressBytes, uint tokenId) = abi.decode(_payload, (bytes, uint));\\n        address toAddress;\\n        assembly {\\n            toAddress := mload(add(toAddressBytes, 20))\\n        }\\n\\n        _creditTo(_srcChainId, toAddress, tokenId);\\n\\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenId, _nonce);\\n    }\\n\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId) internal virtual;\\n\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _tokenId) internal virtual;\\n}\\n\",\"keccak256\":\"0x088266ad5264ce228341509fe0f7d5969b783b17042362f32aca73bb5a85a086\",\"license\":\"MIT\"},\"contracts/token/onft/ONFT721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IONFT721Enumerable.sol\\\";\\nimport \\\"./ONFT721Core.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\n// NOTE: this ONFT contract has no public minting logic.\\n// must implement your own minting logic in child classes\\ncontract ONFT721Enumerable is ONFT721Core, ERC721Enumerable, IONFT721Enumerable {\\n    constructor(string memory _name, string memory _symbol, address _lzEndpoint) ERC721(_name, _symbol) ONFT721Core(_lzEndpoint) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ONFT721Core, ERC721Enumerable, IERC165) returns (bool) {\\n        return interfaceId == type(IONFT721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _debitFrom(address _from, uint16, bytes memory, uint _tokenId) internal virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), _tokenId), \\\"ONFT721Enumerable: send caller is not owner nor approved\\\");\\n        require(ERC721.ownerOf(_tokenId) == _from, \\\"ONFT721Enumerable: send from incorrect owner\\\");\\n        _burn(_tokenId);\\n    }\\n\\n    function _creditTo(uint16, address _toAddress, uint _tokenId) internal virtual override {\\n        _safeMint(_toAddress, _tokenId);\\n    }\\n}\",\"keccak256\":\"0xf242cecbf875b1602ada82a910839d43418e8fa2d2c179f636e2aaa38444c42a\",\"license\":\"MIT\"},\"contracts/token/onft/extension/KanpaiPandas.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8;\\n\\nimport \\\"../ONFT721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/// @title Interface of the AdvancedONFT standard\\n/// @author exakoss\\n/// @notice this implementation supports: batch mint, payable public and private mint, reveal of metadata and EIP-2981 on-chain royalties\\ncontract KanpaiPandas is ONFT721Enumerable, ReentrancyGuard {\\n    using Strings for uint;\\n\\n    uint public price = 0;\\n    uint public nextMintId;\\n    uint public maxMintId;\\n    uint public maxTokensPerMint;\\n\\n    // royalty fee in basis points (i.e. 100% = 10000, 1% = 100)\\n    uint royaltyBasisPoints = 500;\\n    // address for withdrawing money and receiving royalties, separate from owner\\n    address payable beneficiary;\\n    // Merkle Root for WL implementation\\n    bytes32 public merkleRoot;\\n\\n    string public contractURI;\\n    string private baseURI;\\n\\n    mapping(address => uint) public _boughtCount;\\n\\n    bool public _publicSaleStarted;\\n    bool public _saleStarted;\\n    bool revealed;\\n\\n    /// @notice Constructor for the AdvancedONFT\\n    /// @param _name the name of the token\\n    /// @param _symbol the token symbol\\n    /// @param _layerZeroEndpoint handles message transmission across chains\\n    /// @param _startMintId the starting mint number on this chain, excluded\\n    /// @param _endMintId the max number of mints on this chain\\n    /// @param _maxTokensPerMint the max number of tokens that could be minted in a single transaction\\n    /// @param _baseTokenURI the base URI for computing the tokenURI\\n    constructor(string memory _name, string memory _symbol, address _layerZeroEndpoint, uint _startMintId, uint _endMintId, uint _maxTokensPerMint, string memory _baseTokenURI) ONFT721Enumerable(_name, _symbol, _layerZeroEndpoint) {\\n        nextMintId = _startMintId;\\n        maxMintId = _endMintId;\\n        maxTokensPerMint = _maxTokensPerMint;\\n        //set default beneficiary to owner\\n        beneficiary = payable(msg.sender);\\n        baseURI = _baseTokenURI;\\n    }\\n\\n    /// @notice Mint your ONFTs\\n    function publicMint(uint _nbTokens) external payable {\\n        require(_publicSaleStarted == true, \\\"KanpaiPandas: Public sale has not started yet!\\\");\\n        require(_saleStarted == true, \\\"KanpaiPandas: Sale has not started yet!\\\");\\n        require(_nbTokens != 0, \\\"KanpaiPandas: Cannot mint 0 tokens!\\\");\\n        require(_nbTokens <= maxTokensPerMint, \\\"KanpaiPandas: You cannot mint more than maxTokensPerMint tokens at once!\\\");\\n        require(nextMintId + _nbTokens <= maxMintId, \\\"KanpaiPandas: max mint limit reached\\\");\\n        require(_nbTokens * price <= msg.value, \\\"KanpaiPandas: Inconsistent amount sent!\\\");\\n\\n        //using a local variable, _mint and ++X pattern to save gas\\n        uint local_nextMintId = nextMintId;\\n        for (uint i; i < _nbTokens; i++) {\\n            _mint(msg.sender, ++local_nextMintId);\\n        }\\n        nextMintId = local_nextMintId;\\n    }\\n\\n    /// @notice Mint your ONFTs, whitelisted addresses only\\n    function mint(uint _nbTokens, bytes32[] calldata _merkleProof) external payable {\\n        require(_saleStarted == true, \\\"KanpaiPandas: Sale has not started yet!\\\");\\n        require(_nbTokens != 0, \\\"KanpaiPandas: Cannot mint 0 tokens!\\\");\\n        require(_nbTokens <= maxTokensPerMint, \\\"KanpaiPandas: You cannot mint more than maxTokensPerMint tokens at once!\\\");\\n        require(nextMintId + _nbTokens <= maxMintId, \\\"KanpaiPandas: max mint limit reached\\\");\\n        require(_nbTokens * price <= msg.value, \\\"KanpaiPandas: Inconsistent amount sent!\\\");\\n        require(_boughtCount[msg.sender] + _nbTokens <= maxTokensPerMint, \\\"KanpaiPandas: You exceeded your token limit.\\\");\\n\\n        bool isWL = MerkleProof.verify(_merkleProof, merkleRoot, keccak256(abi.encodePacked(_msgSender())));\\n        require(isWL == true, \\\"KanpaiPandas: Invalid Merkle Proof\\\");\\n\\n        _boughtCount[msg.sender] += _nbTokens;\\n\\n        //using a local variable, _mint and ++X pattern to save gas\\n        uint local_nextMintId = nextMintId;\\n        for (uint i; i < _nbTokens; i++) {\\n            _mint(msg.sender, ++local_nextMintId);\\n        }\\n        nextMintId = local_nextMintId;\\n    }\\n\\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        merkleRoot = _merkleRoot;\\n    }\\n\\n    function setPrice(uint newPrice) external onlyOwner {\\n        price = newPrice;\\n    }\\n\\n    function withdraw() public virtual onlyOwner {\\n        require(beneficiary != address(0), \\\"KanpaiPandas: Beneficiary not set!\\\");\\n        uint _balance = address(this).balance;\\n        require(payable(beneficiary).send(_balance));\\n    }\\n\\n    function royaltyInfo(uint, uint salePrice) external view returns (address receiver, uint royaltyAmount) {\\n        receiver = beneficiary;\\n        royaltyAmount = (salePrice * royaltyBasisPoints) / 10000;\\n    }\\n\\n    function setContractURI(string memory _contractURI) public onlyOwner {\\n        contractURI = _contractURI;\\n    }\\n\\n    function setBaseURI(string memory uri) public onlyOwner {\\n        baseURI = uri;\\n    }\\n\\n    function setRoyaltyFee(uint _royaltyBasisPoints) external onlyOwner {\\n        royaltyBasisPoints = _royaltyBasisPoints;\\n    }\\n\\n    function setBeneficiary(address payable _beneficiary) external onlyOwner {\\n        beneficiary = _beneficiary;\\n    }\\n\\n    function flipRevealed() external onlyOwner {\\n        revealed = !revealed;\\n    }\\n\\n    function flipSaleStarted() external onlyOwner {\\n        _saleStarted = !_saleStarted;\\n    }\\n\\n    function flipPublicSaleStarted() external onlyOwner {\\n        _publicSaleStarted = !_publicSaleStarted;\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function tokenURI(uint tokenId) public view override(ERC721) returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n        return string(abi.encodePacked(_baseURI(), tokenId.toString()));\\n    }\\n}\",\"keccak256\":\"0x2221be77910272f7ff37f398ac0f47b9aee44fbc65106be2f367f1571c19e003\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040526000600e556101f46012553480156200001c57600080fd5b5060405162004927380380620049278339810160408190526200003f9162000287565b86868682828280806200005233620000de565b60601b6001600160601b03191660805250508151620000799060039060208501906200012e565b5080516200008f9060049060208401906200012e565b50506001600d55505050600f8590555060108390556011829055601380546001600160a01b031916331790558051620000d09060169060208401906200012e565b5050505050505050620003a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200013c9062000353565b90600052602060002090601f016020900481019282620001605760008555620001ab565b82601f106200017b57805160ff1916838001178555620001ab565b82800160010185558215620001ab579182015b82811115620001ab5782518255916020019190600101906200018e565b50620001b9929150620001bd565b5090565b5b80821115620001b95760008155600101620001be565b600082601f830112620001e5578081fd5b81516001600160401b038082111562000202576200020262000390565b604051601f8301601f19908116603f011681019082821181831017156200022d576200022d62000390565b8160405283815260209250868385880101111562000249578485fd5b8491505b838210156200026c57858201830151818301840152908201906200024d565b838211156200027d57848385830101525b9695505050505050565b600080600080600080600060e0888a031215620002a2578283fd5b87516001600160401b0380821115620002b9578485fd5b620002c78b838c01620001d4565b985060208a0151915080821115620002dd578485fd5b620002eb8b838c01620001d4565b60408b015190985091506001600160a01b03821682146200030a578485fd5b60608a015160808b015160a08c015160c08d0151949950919750955093508082111562000335578283fd5b50620003448a828b01620001d4565b91505092959891949750929550565b600181811c908216806200036857607f821691505b602082108114156200038a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c614523620004046000396000818161099b01528181610a9601528181610c9401528181610eea0152818161101c0152818161155701528181611d8e015281816121710152818161285e0152612f2c01526145236000f3fe60806040526004361061036a5760003560e01c80636352211e116101c6578063a035b1fe116100f7578063dacbcbe211610095578063e985e9c51161006f578063e985e9c5146109ea578063eb8d72b714610a33578063f2fde38b14610a53578063f5ecbdbc14610a7357600080fd5b8063dacbcbe21461098c578063e1d4c870146109bf578063e8a3d485146109d557600080fd5b8063ba41b0c6116100d1578063ba41b0c614610926578063c87b56dd14610939578063cbed8b9c14610959578063d1deba1f1461097957600080fd5b8063a035b1fe146108d0578063a22cb465146108e6578063b88d4fde1461090657600080fd5b806387c348bf116101645780638ee749121161013e5780638ee749121461082c57806391b7f5ed1461087b578063938e3d7b1461089b57806395d89b41146108bb57600080fd5b806387c348bf146107da578063899d7b38146107f95780638da5cb5b1461080e57600080fd5b80636aa99da3116101a05780636aa99da31461076f57806370a0823114610785578063715018a6146107a55780637cb64759146107ba57600080fd5b80636352211e1461070f57806366ad5c8a1461072f57806369b41f951461074f57600080fd5b80632a55205a116102a05780633e4086e51161023e5780634f6ccce7116102185780634f6ccce7146106a257806351905636146106c257806355f804b3146106d5578063600e97f6146106f557600080fd5b80633e4086e51461064257806342842e0e1461066257806342d65a8d1461068257600080fd5b80632f745c591161027a5780632f745c59146105d85780633b2c3fb6146105f85780633ccfd60b1461060d5780633d8b38f61461062257600080fd5b80632a55205a146105705780632db11544146105af5780632eb4a7ab146105c257600080fd5b806310ddb1371161030d57806318160ddd116102e757806318160ddd146104e65780631c31f710146104fb57806323b872dd1461051b5780632a205e3d1461053b57600080fd5b806310ddb1371461049b5780631291e33e146104bb57806317465471146104d057600080fd5b806307e0db171161034957806307e0db17146103e8578063081812fc14610408578063095ea7b31461044057806309dc20ce1461046057600080fd5b80621d35671461036f57806301ffc9a71461039157806306fdde03146103c6575b600080fd5b34801561037b57600080fd5b5061038f61038a366004613b19565b610a93565b005b34801561039d57600080fd5b506103b16103ac36600461382b565b610b9c565b60405190151581526020015b60405180910390f35b3480156103d257600080fd5b506103db610bbf565b6040516103bd9190613e78565b3480156103f457600080fd5b5061038f61040336600461391e565b610c51565b34801561041457600080fd5b50610428610423366004613813565b610cfc565b6040516001600160a01b0390911681526020016103bd565b34801561044c57600080fd5b5061038f61045b3660046137e8565b610d91565b34801561046c57600080fd5b5061048d61047b366004613608565b60176020526000908152604090205481565b6040519081526020016103bd565b3480156104a757600080fd5b5061038f6104b636600461391e565b610ea7565b3480156104c757600080fd5b5061038f610f21565b3480156104dc57600080fd5b5061048d60115481565b3480156104f257600080fd5b50600b5461048d565b34801561050757600080fd5b5061038f610516366004613608565b610f5f565b34801561052757600080fd5b5061038f61053636600461365c565b610fab565b34801561054757600080fd5b5061055b6105563660046139fe565b610fdd565b604080519283526020830191909152016103bd565b34801561057c57600080fd5b5061059061058b366004613cbc565b6110b7565b604080516001600160a01b0390931683526020830191909152016103bd565b61038f6105bd366004613813565b6110ed565b3480156105ce57600080fd5b5061048d60145481565b3480156105e457600080fd5b5061048d6105f33660046137e8565b61125f565b34801561060457600080fd5b5061038f6112f5565b34801561061957600080fd5b5061038f61133e565b34801561062e57600080fd5b506103b161063d366004613956565b611400565b34801561064e57600080fd5b5061038f61065d366004613813565b6114cc565b34801561066e57600080fd5b5061038f61067d36600461365c565b6114fb565b34801561068e57600080fd5b5061038f61069d366004613956565b611516565b3480156106ae57600080fd5b5061048d6106bd366004613813565b6115c7565b61038f6106d0366004613730565b611668565b3480156106e157600080fd5b5061038f6106f03660046138d9565b611677565b34801561070157600080fd5b506018546103b19060ff1681565b34801561071b57600080fd5b5061042861072a366004613813565b6116b8565b34801561073b57600080fd5b5061038f61074a366004613b19565b61172f565b34801561075b57600080fd5b506103db61076a36600461391e565b61178a565b34801561077b57600080fd5b5061048d600f5481565b34801561079157600080fd5b5061048d6107a0366004613608565b611831565b3480156107b157600080fd5b5061038f6118b8565b3480156107c657600080fd5b5061038f6107d5366004613813565b6118ee565b3480156107e657600080fd5b506018546103b190610100900460ff1681565b34801561080557600080fd5b5061038f61191d565b34801561081a57600080fd5b506000546001600160a01b0316610428565b34801561083857600080fd5b5061048d6108473660046139a8565b6002602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561088757600080fd5b5061038f610896366004613813565b611964565b3480156108a757600080fd5b5061038f6108b63660046138d9565b611993565b3480156108c757600080fd5b506103db6119d0565b3480156108dc57600080fd5b5061048d600e5481565b3480156108f257600080fd5b5061038f610901366004613705565b6119df565b34801561091257600080fd5b5061038f61092136600461369c565b6119ea565b61038f610934366004613c43565b611a1c565b34801561094557600080fd5b506103db610954366004613813565b611c96565b34801561096557600080fd5b5061038f610974366004613be4565b611d4d565b61038f610987366004613a8b565b611e04565b34801561099857600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610428565b3480156109cb57600080fd5b5061048d60105481565b3480156109e157600080fd5b506103db611faa565b3480156109f657600080fd5b506103b1610a05366004613624565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b348015610a3f57600080fd5b5061038f610a4e366004613956565b612038565b348015610a5f57600080fd5b5061038f610a6e366004613608565b6120c1565b348015610a7f57600080fd5b506103db610a8e366004613b94565b612159565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ac857600080fd5b61ffff841660009081526001602052604090208054610ae6906143f1565b90508351148015610b25575061ffff8416600090815260016020526040908190209051610b139190613d9d565b60405180910390208380519060200120145b610b8a5760405162461bcd60e51b815260206004820152602b60248201527f4c7a52656365697665723a20696e76616c696420736f757263652073656e646960448201526a1b99c818dbdb9d1c9858dd60aa1b60648201526084015b60405180910390fd5b610b9684848484612291565b50505050565b60006001600160e01b031982161580610bb95750610bb982612382565b92915050565b606060038054610bce906143f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfa906143f1565b8015610c475780601f10610c1c57610100808354040283529160200191610c47565b820191906000526020600020905b815481529060010190602001808311610c2a57829003601f168201915b5050505050905090565b6000546001600160a01b03163314610c7b5760405162461bcd60e51b8152600401610b8190613ff7565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610ce157600080fd5b505af1158015610cf5573d6000803e3d6000fd5b5050505050565b6000818152600560205260408120546001600160a01b0316610d755760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b81565b506000908152600760205260409020546001600160a01b031690565b6000610d9c826116b8565b9050806001600160a01b0316836001600160a01b03161415610e0a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b81565b336001600160a01b0382161480610e265750610e268133610a05565b610e985760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610b81565b610ea283836123a7565b505050565b6000546001600160a01b03163314610ed15760405162461bcd60e51b8152600401610b8190613ff7565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610cc7565b6000546001600160a01b03163314610f4b5760405162461bcd60e51b8152600401610b8190613ff7565b6018805460ff19811660ff90911615179055565b6000546001600160a01b03163314610f895760405162461bcd60e51b8152600401610b8190613ff7565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b610fb6335b82612415565b610fd25760405162461bcd60e51b8152600401610b8190614070565b610ea2838383612508565b60008060008686604051602001610ff5929190613e8b565b60408051601f198184030181529082905263040a7bb160e41b825291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090611059908b90309086908b908b90600401614108565b604080518083038186803b15801561107057600080fd5b505afa158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a89190613cdd565b92509250509550959350505050565b6013546012546001600160a01b0390911690600090612710906110da908561438f565b6110e4919061437b565b90509250929050565b60185460ff16151560011461115b5760405162461bcd60e51b815260206004820152602e60248201527f4b616e70616950616e6461733a205075626c69632073616c6520686173206e6f60448201526d742073746172746564207965742160901b6064820152608401610b81565b60185460ff6101009091041615156001146111885760405162461bcd60e51b8152600401610b8190613f42565b806111a55760405162461bcd60e51b8152600401610b8190613eff565b6011548111156111c75760405162461bcd60e51b8152600401610b8190613f89565b60105481600f546111d89190614363565b11156111f65760405162461bcd60e51b8152600401610b819061402c565b34600e5482611205919061438f565b11156112235760405162461bcd60e51b8152600401610b81906140c1565b600f5460005b82811015611258576112463361123e8461442c565b9350836126af565b806112508161442c565b915050611229565b50600f5550565b600061126a83611831565b82106112cc5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610b81565b506001600160a01b03919091166000908152600960209081526040808320938352929052205490565b6000546001600160a01b0316331461131f5760405162461bcd60e51b8152600401610b8190613ff7565b6018805462ff0000198116620100009182900460ff1615909102179055565b6000546001600160a01b031633146113685760405162461bcd60e51b8152600401610b8190613ff7565b6013546001600160a01b03166113cb5760405162461bcd60e51b815260206004820152602260248201527f4b616e70616950616e6461733a2042656e6566696369617279206e6f74207365604482015261742160f01b6064820152608401610b81565b60135460405147916001600160a01b03169082156108fc029083906000818181858888f193505050506113fd57600080fd5b50565b61ffff831660009081526001602052604081208054829190611421906143f1565b80601f016020809104026020016040519081016040528092919081815260200182805461144d906143f1565b801561149a5780601f1061146f5761010080835404028352916020019161149a565b820191906000526020600020905b81548152906001019060200180831161147d57829003601f168201915b5050505050905083836040516114b1929190613d71565b60405180910390208180519060200120149150509392505050565b6000546001600160a01b031633146114f65760405162461bcd60e51b8152600401610b8190613ff7565b601255565b610ea2838383604051806020016040528060008152506119ea565b6000546001600160a01b031633146115405760405162461bcd60e51b8152600401610b8190613ff7565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d906115909086908690869060040161415c565b600060405180830381600087803b1580156115aa57600080fd5b505af11580156115be573d6000803e3d6000fd5b50505050505050565b60006115d2600b5490565b82106116355760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610b81565b600b828154811061165657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6115be878787878787876127fd565b6000546001600160a01b031633146116a15760405162461bcd60e51b8152600401610b8190613ff7565b80516116b49060169060208401906133f9565b5050565b6000818152600560205260408120546001600160a01b031680610bb95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610b81565b33301461177e5760405162461bcd60e51b815260206004820181905260248201527f4c7a52656365697665723a2063616c6c6572206d757374206265204c7a4170706044820152606401610b81565b610b9684848484612954565b61ffff811660009081526001602052604090208054606091906117ac906143f1565b80601f01602080910402602001604051908101604052809291908181526020018280546117d8906143f1565b80156118255780601f106117fa57610100808354040283529160200191611825565b820191906000526020600020905b81548152906001019060200180831161180857829003601f168201915b50505050509050919050565b60006001600160a01b03821661189c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610b81565b506001600160a01b031660009081526006602052604090205490565b6000546001600160a01b031633146118e25760405162461bcd60e51b8152600401610b8190613ff7565b6118ec60006129ef565b565b6000546001600160a01b031633146119185760405162461bcd60e51b8152600401610b8190613ff7565b601455565b6000546001600160a01b031633146119475760405162461bcd60e51b8152600401610b8190613ff7565b6018805461ff001981166101009182900460ff1615909102179055565b6000546001600160a01b0316331461198e5760405162461bcd60e51b8152600401610b8190613ff7565b600e55565b6000546001600160a01b031633146119bd5760405162461bcd60e51b8152600401610b8190613ff7565b80516116b49060159060208401906133f9565b606060048054610bce906143f1565b6116b4338383612a3f565b6119f43383612415565b611a105760405162461bcd60e51b8152600401610b8190614070565b610b9684848484612b0e565b60185460ff610100909104161515600114611a495760405162461bcd60e51b8152600401610b8190613f42565b82611a665760405162461bcd60e51b8152600401610b8190613eff565b601154831115611a885760405162461bcd60e51b8152600401610b8190613f89565b60105483600f54611a999190614363565b1115611ab75760405162461bcd60e51b8152600401610b819061402c565b34600e5484611ac6919061438f565b1115611ae45760405162461bcd60e51b8152600401610b81906140c1565b60115433600090815260176020526040902054611b02908590614363565b1115611b655760405162461bcd60e51b815260206004820152602c60248201527f4b616e70616950616e6461733a20596f7520657863656564656420796f75722060448201526b3a37b5b2b7103634b6b4ba1760a11b6064820152608401610b81565b6000611bdc838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506014546040516bffffffffffffffffffffffff193360601b166020820152909250603401905060405160208183030381529060405280519060200120612b41565b9050600181151514611c3b5760405162461bcd60e51b815260206004820152602260248201527f4b616e70616950616e6461733a20496e76616c6964204d65726b6c652050726f60448201526137b360f11b6064820152608401610b81565b3360009081526017602052604081208054869290611c5a908490614363565b9091555050600f5460005b85811015611c8c57611c7a3361123e8461442c565b80611c848161442c565b915050611c65565b50600f5550505050565b6000818152600560205260409020546060906001600160a01b0316611d155760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610b81565b611d1d612b57565b611d2683612b66565b604051602001611d37929190613e0c565b6040516020818303038152906040529050919050565b6000546001600160a01b03163314611d775760405162461bcd60e51b8152600401610b8190613ff7565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611dcb90889088908890889088906004016142de565b600060405180830381600087803b158015611de557600080fd5b505af1158015611df9573d6000803e3d6000fd5b505050505050505050565b61ffff85166000908152600260205260408082209051611e25908790613d81565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080611e995760405162461bcd60e51b815260206004820152601d60248201527f4c7a52656365697665723a206e6f2073746f726564206d6573736167650000006044820152606401610b81565b808383604051611eaa929190613d71565b604051809103902014611eff5760405162461bcd60e51b815260206004820152601b60248201527f4c7a52656365697665723a20696e76616c6964207061796c6f616400000000006044820152606401610b81565b61ffff86166000908152600260205260408082209051611f20908890613d81565b9081526040805191829003602090810183206001600160401b038916600090815291522091909155633356ae4560e11b815230906366ad5c8a90611f70908990899089908990899060040161417a565b600060405180830381600087803b158015611f8a57600080fd5b505af1158015611f9e573d6000803e3d6000fd5b50505050505050505050565b60158054611fb7906143f1565b80601f0160208091040260200160405190810160405280929190818152602001828054611fe3906143f1565b80156120305780601f1061200557610100808354040283529160200191612030565b820191906000526020600020905b81548152906001019060200180831161201357829003601f168201915b505050505081565b6000546001600160a01b031633146120625760405162461bcd60e51b8152600401610b8190613ff7565b61ffff8316600090815260016020526040902061208090838361347d565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516120b49392919061415c565b60405180910390a1505050565b6000546001600160a01b031633146120eb5760405162461bcd60e51b8152600401610b8190613ff7565b6001600160a01b0381166121505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b81565b6113fd816129ef565b6040516304b2b47b60e11b81523060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90829063096568f69060240160206040518083038186803b1580156121c357600080fd5b505afa1580156121d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fb919061393a565b6040516001600160e01b031960e084901b16815261ffff918216600482015290871660248201523060448201526064810185905260840160006040518083038186803b15801561224a57600080fd5b505afa15801561225e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122869190810190613863565b90505b949350505050565b604051633356ae4560e11b815230906366ad5c8a906122ba9087908790879087906004016141b9565b600060405180830381600087803b1580156122d457600080fd5b505af19250505080156122e5575060015b610b96578080519060200120600260008661ffff1661ffff1681526020019081526020016000208460405161231a9190613d81565b9081526040805191829003602090810183206001600160401b0387166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d906123759086908690869086906141b9565b60405180910390a1610b96565b60006001600160e01b0319821663780e9d6360e01b1480610bb95750610bb982612c7f565b600081815260076020526040902080546001600160a01b0319166001600160a01b03841690811790915581906123dc826116b8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600560205260408120546001600160a01b031661248e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b81565b6000612499836116b8565b9050806001600160a01b0316846001600160a01b031614806124d45750836001600160a01b03166124c984610cfc565b6001600160a01b0316145b8061228957506001600160a01b0380821660009081526008602090815260408083209388168352929052205460ff16612289565b826001600160a01b031661251b826116b8565b6001600160a01b03161461257f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b81565b6001600160a01b0382166125e15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b81565b6125ec838383612cbf565b6125f76000826123a7565b6001600160a01b03831660009081526006602052604081208054600192906126209084906143ae565b90915550506001600160a01b038216600090815260066020526040812080546001929061264e908490614363565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166127055760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b81565b6000818152600560205260409020546001600160a01b03161561276a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b81565b61277660008383612cbf565b6001600160a01b038216600090815260066020526040812080546001929061279f908490614363565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61280987878787612d77565b6000858560405160200161281e929190613e8b565b604051602081830303815290604052905061283c8782868686612e79565b604051630f428ae960e31b815261ffff881660048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a1457489060440160206040518083038186803b1580156128a857600080fd5b505afa1580156128bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e09190613d00565b9050866040516128f09190613d81565b604080519182900382208883526001600160401b03841660208401529161ffff8b16916001600160a01b038d16917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a4505050505050505050565b6000808280602001905181019061296b9190613895565b60148201519193509150612980878284612f85565b806001600160a01b0316866040516129989190613d81565b604080519182900382208583526001600160401b03891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b03161415612aa15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b81565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612b19848484612508565b612b2584848484612f8f565b610b965760405162461bcd60e51b8152600401610b8190613ead565b600082612b4e8584613099565b14949350505050565b606060168054610bce906143f1565b606081612b8a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612bb45780612b9e8161442c565b9150612bad9050600a8361437b565b9150612b8e565b6000816001600160401b03811115612bdc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612c06576020820181803683370190505b5090505b841561228957612c1b6001836143ae565b9150612c28600a86614447565b612c33906030614363565b60f81b818381518110612c5657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612c78600a8661437b565b9450612c0a565b60006001600160e01b031982166380ac58cd60e01b1480612cb057506001600160e01b03198216635b5e139f60e01b145b80610bb95750610bb98261311b565b6001600160a01b038316612d1a57612d1581600b80546000838152600c60205260408120829055600182018355919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90155565b612d3d565b816001600160a01b0316836001600160a01b031614612d3d57612d3d8382613150565b6001600160a01b038216612d5457610ea2816131ed565b826001600160a01b0316826001600160a01b031614610ea257610ea282826132c6565b612d8033610fb0565b612df25760405162461bcd60e51b815260206004820152603860248201527f4f4e4654373231456e756d657261626c653a2073656e642063616c6c6572206960448201527f73206e6f74206f776e6572206e6f7220617070726f76656400000000000000006064820152608401610b81565b836001600160a01b0316612e05826116b8565b6001600160a01b031614612e705760405162461bcd60e51b815260206004820152602c60248201527f4f4e4654373231456e756d657261626c653a2073656e642066726f6d20696e6360448201526b37b93932b1ba1037bbb732b960a11b6064820152608401610b81565b610b968161330a565b61ffff851660009081526001602052604090208054612e97906143f1565b15159050612f025760405162461bcd60e51b815260206004820152603260248201527f4c7a53656e643a2064657374696e6174696f6e20636861696e206973206e6f746044820152711030903a393ab9ba32b21039b7bab931b29760711b6064820152608401610b81565b61ffff851660009081526001602052604090819020905162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c5803100913491612f6c918a91908a908a908a908a90600401614202565b6000604051808303818588803b158015611f8a57600080fd5b610ea282826133b1565b60006001600160a01b0384163b1561309157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612fd3903390899088908890600401613e3b565b602060405180830381600087803b158015612fed57600080fd5b505af192505050801561301d575060408051601f3d908101601f1916820190925261301a91810190613847565b60015b613077573d80801561304b576040519150601f19603f3d011682016040523d82523d6000602084013e613050565b606091505b50805161306f5760405162461bcd60e51b8152600401610b8190613ead565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612289565b506001612289565b600081815b84518110156131135760008582815181106130c957634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116130ef5760008381526020829052604090209250613100565b600081815260208490526040902092505b508061310b8161442c565b91505061309e565b509392505050565b60006001600160e01b03198216637bb0080b60e01b1480610bb957506301ffc9a760e01b6001600160e01b0319831614610bb9565b6000600161315d84611831565b61316791906143ae565b6000838152600a60205260409020549091508082146131ba576001600160a01b03841660009081526009602090815260408083208584528252808320548484528184208190558352600a90915290208190555b506000918252600a602090815260408084208490556001600160a01b039094168352600981528383209183525290812055565b600b546000906131ff906001906143ae565b6000838152600c6020526040812054600b805493945090928490811061323557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600b838154811061326457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600c9091526040808220849055858252812055600b8054806132aa57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006132d183611831565b6001600160a01b0390931660009081526009602090815260408083208684528252808320859055938252600a9052919091209190915550565b6000613315826116b8565b905061332381600084612cbf565b61332e6000836123a7565b6001600160a01b03811660009081526006602052604081208054600192906133579084906143ae565b909155505060008281526005602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6116b48282604051806020016040528060008152506133d083836126af565b6133dd6000848484612f8f565b610ea25760405162461bcd60e51b8152600401610b8190613ead565b828054613405906143f1565b90600052602060002090601f016020900481019282613427576000855561346d565b82601f1061344057805160ff191683800117855561346d565b8280016001018555821561346d579182015b8281111561346d578251825591602001919060010190613452565b506134799291506134f1565b5090565b828054613489906143f1565b90600052602060002090601f0160209004810192826134ab576000855561346d565b82601f106134c45782800160ff1982351617855561346d565b8280016001018555821561346d579182015b8281111561346d5782358255916020019190600101906134d6565b5b8082111561347957600081556001016134f2565b60006135196135148461433c565b61430c565b905082815283838301111561352d57600080fd5b828260208301376000602084830101529392505050565b8035801515811461355457600080fd5b919050565b60008083601f84011261356a578182fd5b5081356001600160401b03811115613580578182fd5b60208301915083602082850101111561359857600080fd5b9250929050565b600082601f8301126135af578081fd5b6135be83833560208501613506565b9392505050565b600082601f8301126135d5578081fd5b81516135e36135148261433c565b8181528460208386010111156135f7578283fd5b6122898260208301602087016143c5565b600060208284031215613619578081fd5b81356135be8161449d565b60008060408385031215613636578081fd5b82356136418161449d565b915060208301356136518161449d565b809150509250929050565b600080600060608486031215613670578081fd5b833561367b8161449d565b9250602084013561368b8161449d565b929592945050506040919091013590565b600080600080608085870312156136b1578081fd5b84356136bc8161449d565b935060208501356136cc8161449d565b92506040850135915060608501356001600160401b038111156136ed578182fd5b6136f98782880161359f565b91505092959194509250565b60008060408385031215613717578182fd5b82356137228161449d565b91506110e460208401613544565b600080600080600080600060e0888a03121561374a578485fd5b87356137558161449d565b96506020880135613765816144c8565b955060408801356001600160401b0380821115613780578687fd5b61378c8b838c0161359f565b965060608a0135955060808a013591506137a58261449d565b90935060a0890135906137b78261449d565b90925060c089013590808211156137cc578283fd5b506137d98a828b0161359f565b91505092959891949750929550565b600080604083850312156137fa578182fd5b82356138058161449d565b946020939093013593505050565b600060208284031215613824578081fd5b5035919050565b60006020828403121561383c578081fd5b81356135be816144b2565b600060208284031215613858578081fd5b81516135be816144b2565b600060208284031215613874578081fd5b81516001600160401b03811115613889578182fd5b612289848285016135c5565b600080604083850312156138a7578182fd5b82516001600160401b038111156138bc578283fd5b6138c8858286016135c5565b925050602083015190509250929050565b6000602082840312156138ea578081fd5b81356001600160401b038111156138ff578182fd5b8201601f8101841361390f578182fd5b61228984823560208401613506565b60006020828403121561392f578081fd5b81356135be816144c8565b60006020828403121561394b578081fd5b81516135be816144c8565b60008060006040848603121561396a578081fd5b8335613975816144c8565b925060208401356001600160401b0381111561398f578182fd5b61399b86828701613559565b9497909650939450505050565b6000806000606084860312156139bc578081fd5b83356139c7816144c8565b925060208401356001600160401b038111156139e1578182fd5b6139ed8682870161359f565b925050604084013590509250925092565b600080600080600060a08688031215613a15578283fd5b8535613a20816144c8565b945060208601356001600160401b0380821115613a3b578485fd5b613a4789838a0161359f565b955060408801359450613a5c60608901613544565b93506080880135915080821115613a71578283fd5b50613a7e8882890161359f565b9150509295509295909350565b600080600080600060808688031215613aa2578283fd5b8535613aad816144c8565b945060208601356001600160401b0380821115613ac8578485fd5b613ad489838a0161359f565b955060408801359150613ae6826144d8565b90935060608701359080821115613afb578283fd5b50613b0888828901613559565b969995985093965092949392505050565b60008060008060808587031215613b2e578182fd5b8435613b39816144c8565b935060208501356001600160401b0380821115613b54578384fd5b613b608883890161359f565b945060408701359150613b72826144d8565b90925060608601359080821115613b87578283fd5b506136f98782880161359f565b60008060008060808587031215613ba9578182fd5b8435613bb4816144c8565b93506020850135613bc4816144c8565b92506040850135613bd48161449d565b9396929550929360600135925050565b600080600080600060808688031215613bfb578283fd5b8535613c06816144c8565b94506020860135613c16816144c8565b93506040860135925060608601356001600160401b03811115613c37578182fd5b613b0888828901613559565b600080600060408486031215613c57578081fd5b8335925060208401356001600160401b0380821115613c74578283fd5b818601915086601f830112613c87578283fd5b813581811115613c95578384fd5b8760208260051b8501011115613ca9578384fd5b6020830194508093505050509250925092565b60008060408385031215613cce578182fd5b50508035926020909101359150565b60008060408385031215613cef578182fd5b505080516020909101519092909150565b600060208284031215613d11578081fd5b81516135be816144d8565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452613d5d8160208601602086016143c5565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251613d938184602087016143c5565b9190910192915050565b6000808354613dab816143f1565b60018281168015613dc35760018114613dd457613e00565b60ff19841687528287019450613e00565b8786526020808720875b85811015613df75781548a820152908401908201613dde565b50505082870194505b50929695505050505050565b60008351613e1e8184602088016143c5565b835190830190613e328183602088016143c5565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613e6e90830184613d45565b9695505050505050565b6020815260006135be6020830184613d45565b604081526000613e9e6040830185613d45565b90508260208301529392505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526023908201527f4b616e70616950616e6461733a2043616e6e6f74206d696e74203020746f6b656040820152626e732160e81b606082015260800190565b60208082526027908201527f4b616e70616950616e6461733a2053616c6520686173206e6f742073746172746040820152666564207965742160c81b606082015260800190565b60208082526048908201527f4b616e70616950616e6461733a20596f752063616e6e6f74206d696e74206d6f60408201527f7265207468616e206d6178546f6b656e735065724d696e7420746f6b656e73206060820152676174206f6e63652160c01b608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f4b616e70616950616e6461733a206d6178206d696e74206c696d69742072656160408201526318da195960e21b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526027908201527f4b616e70616950616e6461733a20496e636f6e73697374656e7420616d6f756e604082015266742073656e742160c81b606082015260800190565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061413690830186613d45565b841515606084015282810360808401526141508185613d45565b98975050505050505050565b61ffff84168152604060208201526000612286604083018486613d1c565b61ffff861681526080602082015260006141976080830187613d45565b6001600160401b03861660408401528281036060840152614150818587613d1c565b61ffff851681526080602082015260006141d66080830186613d45565b6001600160401b038516604084015282810360608401526141f78185613d45565b979650505050505050565b61ffff871681526000602060c08184015281885461421f816143f1565b8060c087015260e0600180841660008114614241576001811461425657614281565b60ff1985168984015261010089019550614281565b8d8852868820885b858110156142795781548b820186015290830190880161425e565b8a0184019650505b505050505083810360408501526142988189613d45565b9150506142b060608401876001600160a01b03169052565b6001600160a01b038516608084015282810360a08401526142d18185613d45565b9998505050505050505050565b600061ffff8088168352808716602084015250846040830152608060608301526141f7608083018486613d1c565b604051601f8201601f191681016001600160401b038111828210171561433457614334614487565b604052919050565b60006001600160401b0382111561435557614355614487565b50601f01601f191660200190565b600082198211156143765761437661445b565b500190565b60008261438a5761438a614471565b500490565b60008160001904831182151516156143a9576143a961445b565b500290565b6000828210156143c0576143c061445b565b500390565b60005b838110156143e05781810151838201526020016143c8565b83811115610b965750506000910152565b600181811c9082168061440557607f821691505b6020821081141561442657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156144405761444061445b565b5060010190565b60008261445657614456614471565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146113fd57600080fd5b6001600160e01b0319811681146113fd57600080fd5b61ffff811681146113fd57600080fd5b6001600160401b03811681146113fd57600080fdfea26469706673582212204f639de40de0dc81ca92868906cf1a43cffbb2e25ed37cb4398c36fda28c330f64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061036a5760003560e01c80636352211e116101c6578063a035b1fe116100f7578063dacbcbe211610095578063e985e9c51161006f578063e985e9c5146109ea578063eb8d72b714610a33578063f2fde38b14610a53578063f5ecbdbc14610a7357600080fd5b8063dacbcbe21461098c578063e1d4c870146109bf578063e8a3d485146109d557600080fd5b8063ba41b0c6116100d1578063ba41b0c614610926578063c87b56dd14610939578063cbed8b9c14610959578063d1deba1f1461097957600080fd5b8063a035b1fe146108d0578063a22cb465146108e6578063b88d4fde1461090657600080fd5b806387c348bf116101645780638ee749121161013e5780638ee749121461082c57806391b7f5ed1461087b578063938e3d7b1461089b57806395d89b41146108bb57600080fd5b806387c348bf146107da578063899d7b38146107f95780638da5cb5b1461080e57600080fd5b80636aa99da3116101a05780636aa99da31461076f57806370a0823114610785578063715018a6146107a55780637cb64759146107ba57600080fd5b80636352211e1461070f57806366ad5c8a1461072f57806369b41f951461074f57600080fd5b80632a55205a116102a05780633e4086e51161023e5780634f6ccce7116102185780634f6ccce7146106a257806351905636146106c257806355f804b3146106d5578063600e97f6146106f557600080fd5b80633e4086e51461064257806342842e0e1461066257806342d65a8d1461068257600080fd5b80632f745c591161027a5780632f745c59146105d85780633b2c3fb6146105f85780633ccfd60b1461060d5780633d8b38f61461062257600080fd5b80632a55205a146105705780632db11544146105af5780632eb4a7ab146105c257600080fd5b806310ddb1371161030d57806318160ddd116102e757806318160ddd146104e65780631c31f710146104fb57806323b872dd1461051b5780632a205e3d1461053b57600080fd5b806310ddb1371461049b5780631291e33e146104bb57806317465471146104d057600080fd5b806307e0db171161034957806307e0db17146103e8578063081812fc14610408578063095ea7b31461044057806309dc20ce1461046057600080fd5b80621d35671461036f57806301ffc9a71461039157806306fdde03146103c6575b600080fd5b34801561037b57600080fd5b5061038f61038a366004613b19565b610a93565b005b34801561039d57600080fd5b506103b16103ac36600461382b565b610b9c565b60405190151581526020015b60405180910390f35b3480156103d257600080fd5b506103db610bbf565b6040516103bd9190613e78565b3480156103f457600080fd5b5061038f61040336600461391e565b610c51565b34801561041457600080fd5b50610428610423366004613813565b610cfc565b6040516001600160a01b0390911681526020016103bd565b34801561044c57600080fd5b5061038f61045b3660046137e8565b610d91565b34801561046c57600080fd5b5061048d61047b366004613608565b60176020526000908152604090205481565b6040519081526020016103bd565b3480156104a757600080fd5b5061038f6104b636600461391e565b610ea7565b3480156104c757600080fd5b5061038f610f21565b3480156104dc57600080fd5b5061048d60115481565b3480156104f257600080fd5b50600b5461048d565b34801561050757600080fd5b5061038f610516366004613608565b610f5f565b34801561052757600080fd5b5061038f61053636600461365c565b610fab565b34801561054757600080fd5b5061055b6105563660046139fe565b610fdd565b604080519283526020830191909152016103bd565b34801561057c57600080fd5b5061059061058b366004613cbc565b6110b7565b604080516001600160a01b0390931683526020830191909152016103bd565b61038f6105bd366004613813565b6110ed565b3480156105ce57600080fd5b5061048d60145481565b3480156105e457600080fd5b5061048d6105f33660046137e8565b61125f565b34801561060457600080fd5b5061038f6112f5565b34801561061957600080fd5b5061038f61133e565b34801561062e57600080fd5b506103b161063d366004613956565b611400565b34801561064e57600080fd5b5061038f61065d366004613813565b6114cc565b34801561066e57600080fd5b5061038f61067d36600461365c565b6114fb565b34801561068e57600080fd5b5061038f61069d366004613956565b611516565b3480156106ae57600080fd5b5061048d6106bd366004613813565b6115c7565b61038f6106d0366004613730565b611668565b3480156106e157600080fd5b5061038f6106f03660046138d9565b611677565b34801561070157600080fd5b506018546103b19060ff1681565b34801561071b57600080fd5b5061042861072a366004613813565b6116b8565b34801561073b57600080fd5b5061038f61074a366004613b19565b61172f565b34801561075b57600080fd5b506103db61076a36600461391e565b61178a565b34801561077b57600080fd5b5061048d600f5481565b34801561079157600080fd5b5061048d6107a0366004613608565b611831565b3480156107b157600080fd5b5061038f6118b8565b3480156107c657600080fd5b5061038f6107d5366004613813565b6118ee565b3480156107e657600080fd5b506018546103b190610100900460ff1681565b34801561080557600080fd5b5061038f61191d565b34801561081a57600080fd5b506000546001600160a01b0316610428565b34801561083857600080fd5b5061048d6108473660046139a8565b6002602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561088757600080fd5b5061038f610896366004613813565b611964565b3480156108a757600080fd5b5061038f6108b63660046138d9565b611993565b3480156108c757600080fd5b506103db6119d0565b3480156108dc57600080fd5b5061048d600e5481565b3480156108f257600080fd5b5061038f610901366004613705565b6119df565b34801561091257600080fd5b5061038f61092136600461369c565b6119ea565b61038f610934366004613c43565b611a1c565b34801561094557600080fd5b506103db610954366004613813565b611c96565b34801561096557600080fd5b5061038f610974366004613be4565b611d4d565b61038f610987366004613a8b565b611e04565b34801561099857600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610428565b3480156109cb57600080fd5b5061048d60105481565b3480156109e157600080fd5b506103db611faa565b3480156109f657600080fd5b506103b1610a05366004613624565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b348015610a3f57600080fd5b5061038f610a4e366004613956565b612038565b348015610a5f57600080fd5b5061038f610a6e366004613608565b6120c1565b348015610a7f57600080fd5b506103db610a8e366004613b94565b612159565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610ac857600080fd5b61ffff841660009081526001602052604090208054610ae6906143f1565b90508351148015610b25575061ffff8416600090815260016020526040908190209051610b139190613d9d565b60405180910390208380519060200120145b610b8a5760405162461bcd60e51b815260206004820152602b60248201527f4c7a52656365697665723a20696e76616c696420736f757263652073656e646960448201526a1b99c818dbdb9d1c9858dd60aa1b60648201526084015b60405180910390fd5b610b9684848484612291565b50505050565b60006001600160e01b031982161580610bb95750610bb982612382565b92915050565b606060038054610bce906143f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610bfa906143f1565b8015610c475780601f10610c1c57610100808354040283529160200191610c47565b820191906000526020600020905b815481529060010190602001808311610c2a57829003601f168201915b5050505050905090565b6000546001600160a01b03163314610c7b5760405162461bcd60e51b8152600401610b8190613ff7565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610ce157600080fd5b505af1158015610cf5573d6000803e3d6000fd5b5050505050565b6000818152600560205260408120546001600160a01b0316610d755760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b81565b506000908152600760205260409020546001600160a01b031690565b6000610d9c826116b8565b9050806001600160a01b0316836001600160a01b03161415610e0a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b81565b336001600160a01b0382161480610e265750610e268133610a05565b610e985760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610b81565b610ea283836123a7565b505050565b6000546001600160a01b03163314610ed15760405162461bcd60e51b8152600401610b8190613ff7565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610cc7565b6000546001600160a01b03163314610f4b5760405162461bcd60e51b8152600401610b8190613ff7565b6018805460ff19811660ff90911615179055565b6000546001600160a01b03163314610f895760405162461bcd60e51b8152600401610b8190613ff7565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b610fb6335b82612415565b610fd25760405162461bcd60e51b8152600401610b8190614070565b610ea2838383612508565b60008060008686604051602001610ff5929190613e8b565b60408051601f198184030181529082905263040a7bb160e41b825291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb1090611059908b90309086908b908b90600401614108565b604080518083038186803b15801561107057600080fd5b505afa158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a89190613cdd565b92509250509550959350505050565b6013546012546001600160a01b0390911690600090612710906110da908561438f565b6110e4919061437b565b90509250929050565b60185460ff16151560011461115b5760405162461bcd60e51b815260206004820152602e60248201527f4b616e70616950616e6461733a205075626c69632073616c6520686173206e6f60448201526d742073746172746564207965742160901b6064820152608401610b81565b60185460ff6101009091041615156001146111885760405162461bcd60e51b8152600401610b8190613f42565b806111a55760405162461bcd60e51b8152600401610b8190613eff565b6011548111156111c75760405162461bcd60e51b8152600401610b8190613f89565b60105481600f546111d89190614363565b11156111f65760405162461bcd60e51b8152600401610b819061402c565b34600e5482611205919061438f565b11156112235760405162461bcd60e51b8152600401610b81906140c1565b600f5460005b82811015611258576112463361123e8461442c565b9350836126af565b806112508161442c565b915050611229565b50600f5550565b600061126a83611831565b82106112cc5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610b81565b506001600160a01b03919091166000908152600960209081526040808320938352929052205490565b6000546001600160a01b0316331461131f5760405162461bcd60e51b8152600401610b8190613ff7565b6018805462ff0000198116620100009182900460ff1615909102179055565b6000546001600160a01b031633146113685760405162461bcd60e51b8152600401610b8190613ff7565b6013546001600160a01b03166113cb5760405162461bcd60e51b815260206004820152602260248201527f4b616e70616950616e6461733a2042656e6566696369617279206e6f74207365604482015261742160f01b6064820152608401610b81565b60135460405147916001600160a01b03169082156108fc029083906000818181858888f193505050506113fd57600080fd5b50565b61ffff831660009081526001602052604081208054829190611421906143f1565b80601f016020809104026020016040519081016040528092919081815260200182805461144d906143f1565b801561149a5780601f1061146f5761010080835404028352916020019161149a565b820191906000526020600020905b81548152906001019060200180831161147d57829003601f168201915b5050505050905083836040516114b1929190613d71565b60405180910390208180519060200120149150509392505050565b6000546001600160a01b031633146114f65760405162461bcd60e51b8152600401610b8190613ff7565b601255565b610ea2838383604051806020016040528060008152506119ea565b6000546001600160a01b031633146115405760405162461bcd60e51b8152600401610b8190613ff7565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d906115909086908690869060040161415c565b600060405180830381600087803b1580156115aa57600080fd5b505af11580156115be573d6000803e3d6000fd5b50505050505050565b60006115d2600b5490565b82106116355760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610b81565b600b828154811061165657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6115be878787878787876127fd565b6000546001600160a01b031633146116a15760405162461bcd60e51b8152600401610b8190613ff7565b80516116b49060169060208401906133f9565b5050565b6000818152600560205260408120546001600160a01b031680610bb95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610b81565b33301461177e5760405162461bcd60e51b815260206004820181905260248201527f4c7a52656365697665723a2063616c6c6572206d757374206265204c7a4170706044820152606401610b81565b610b9684848484612954565b61ffff811660009081526001602052604090208054606091906117ac906143f1565b80601f01602080910402602001604051908101604052809291908181526020018280546117d8906143f1565b80156118255780601f106117fa57610100808354040283529160200191611825565b820191906000526020600020905b81548152906001019060200180831161180857829003601f168201915b50505050509050919050565b60006001600160a01b03821661189c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610b81565b506001600160a01b031660009081526006602052604090205490565b6000546001600160a01b031633146118e25760405162461bcd60e51b8152600401610b8190613ff7565b6118ec60006129ef565b565b6000546001600160a01b031633146119185760405162461bcd60e51b8152600401610b8190613ff7565b601455565b6000546001600160a01b031633146119475760405162461bcd60e51b8152600401610b8190613ff7565b6018805461ff001981166101009182900460ff1615909102179055565b6000546001600160a01b0316331461198e5760405162461bcd60e51b8152600401610b8190613ff7565b600e55565b6000546001600160a01b031633146119bd5760405162461bcd60e51b8152600401610b8190613ff7565b80516116b49060159060208401906133f9565b606060048054610bce906143f1565b6116b4338383612a3f565b6119f43383612415565b611a105760405162461bcd60e51b8152600401610b8190614070565b610b9684848484612b0e565b60185460ff610100909104161515600114611a495760405162461bcd60e51b8152600401610b8190613f42565b82611a665760405162461bcd60e51b8152600401610b8190613eff565b601154831115611a885760405162461bcd60e51b8152600401610b8190613f89565b60105483600f54611a999190614363565b1115611ab75760405162461bcd60e51b8152600401610b819061402c565b34600e5484611ac6919061438f565b1115611ae45760405162461bcd60e51b8152600401610b81906140c1565b60115433600090815260176020526040902054611b02908590614363565b1115611b655760405162461bcd60e51b815260206004820152602c60248201527f4b616e70616950616e6461733a20596f7520657863656564656420796f75722060448201526b3a37b5b2b7103634b6b4ba1760a11b6064820152608401610b81565b6000611bdc838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506014546040516bffffffffffffffffffffffff193360601b166020820152909250603401905060405160208183030381529060405280519060200120612b41565b9050600181151514611c3b5760405162461bcd60e51b815260206004820152602260248201527f4b616e70616950616e6461733a20496e76616c6964204d65726b6c652050726f60448201526137b360f11b6064820152608401610b81565b3360009081526017602052604081208054869290611c5a908490614363565b9091555050600f5460005b85811015611c8c57611c7a3361123e8461442c565b80611c848161442c565b915050611c65565b50600f5550505050565b6000818152600560205260409020546060906001600160a01b0316611d155760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610b81565b611d1d612b57565b611d2683612b66565b604051602001611d37929190613e0c565b6040516020818303038152906040529050919050565b6000546001600160a01b03163314611d775760405162461bcd60e51b8152600401610b8190613ff7565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611dcb90889088908890889088906004016142de565b600060405180830381600087803b158015611de557600080fd5b505af1158015611df9573d6000803e3d6000fd5b505050505050505050565b61ffff85166000908152600260205260408082209051611e25908790613d81565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080611e995760405162461bcd60e51b815260206004820152601d60248201527f4c7a52656365697665723a206e6f2073746f726564206d6573736167650000006044820152606401610b81565b808383604051611eaa929190613d71565b604051809103902014611eff5760405162461bcd60e51b815260206004820152601b60248201527f4c7a52656365697665723a20696e76616c6964207061796c6f616400000000006044820152606401610b81565b61ffff86166000908152600260205260408082209051611f20908890613d81565b9081526040805191829003602090810183206001600160401b038916600090815291522091909155633356ae4560e11b815230906366ad5c8a90611f70908990899089908990899060040161417a565b600060405180830381600087803b158015611f8a57600080fd5b505af1158015611f9e573d6000803e3d6000fd5b50505050505050505050565b60158054611fb7906143f1565b80601f0160208091040260200160405190810160405280929190818152602001828054611fe3906143f1565b80156120305780601f1061200557610100808354040283529160200191612030565b820191906000526020600020905b81548152906001019060200180831161201357829003601f168201915b505050505081565b6000546001600160a01b031633146120625760405162461bcd60e51b8152600401610b8190613ff7565b61ffff8316600090815260016020526040902061208090838361347d565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516120b49392919061415c565b60405180910390a1505050565b6000546001600160a01b031633146120eb5760405162461bcd60e51b8152600401610b8190613ff7565b6001600160a01b0381166121505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b81565b6113fd816129ef565b6040516304b2b47b60e11b81523060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90829063096568f69060240160206040518083038186803b1580156121c357600080fd5b505afa1580156121d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fb919061393a565b6040516001600160e01b031960e084901b16815261ffff918216600482015290871660248201523060448201526064810185905260840160006040518083038186803b15801561224a57600080fd5b505afa15801561225e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122869190810190613863565b90505b949350505050565b604051633356ae4560e11b815230906366ad5c8a906122ba9087908790879087906004016141b9565b600060405180830381600087803b1580156122d457600080fd5b505af19250505080156122e5575060015b610b96578080519060200120600260008661ffff1661ffff1681526020019081526020016000208460405161231a9190613d81565b9081526040805191829003602090810183206001600160401b0387166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d906123759086908690869086906141b9565b60405180910390a1610b96565b60006001600160e01b0319821663780e9d6360e01b1480610bb95750610bb982612c7f565b600081815260076020526040902080546001600160a01b0319166001600160a01b03841690811790915581906123dc826116b8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600560205260408120546001600160a01b031661248e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b81565b6000612499836116b8565b9050806001600160a01b0316846001600160a01b031614806124d45750836001600160a01b03166124c984610cfc565b6001600160a01b0316145b8061228957506001600160a01b0380821660009081526008602090815260408083209388168352929052205460ff16612289565b826001600160a01b031661251b826116b8565b6001600160a01b03161461257f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b81565b6001600160a01b0382166125e15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b81565b6125ec838383612cbf565b6125f76000826123a7565b6001600160a01b03831660009081526006602052604081208054600192906126209084906143ae565b90915550506001600160a01b038216600090815260066020526040812080546001929061264e908490614363565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166127055760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b81565b6000818152600560205260409020546001600160a01b03161561276a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b81565b61277660008383612cbf565b6001600160a01b038216600090815260066020526040812080546001929061279f908490614363565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61280987878787612d77565b6000858560405160200161281e929190613e8b565b604051602081830303815290604052905061283c8782868686612e79565b604051630f428ae960e31b815261ffff881660048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a1457489060440160206040518083038186803b1580156128a857600080fd5b505afa1580156128bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e09190613d00565b9050866040516128f09190613d81565b604080519182900382208883526001600160401b03841660208401529161ffff8b16916001600160a01b038d16917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a4505050505050505050565b6000808280602001905181019061296b9190613895565b60148201519193509150612980878284612f85565b806001600160a01b0316866040516129989190613d81565b604080519182900382208583526001600160401b03891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b03161415612aa15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b81565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612b19848484612508565b612b2584848484612f8f565b610b965760405162461bcd60e51b8152600401610b8190613ead565b600082612b4e8584613099565b14949350505050565b606060168054610bce906143f1565b606081612b8a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612bb45780612b9e8161442c565b9150612bad9050600a8361437b565b9150612b8e565b6000816001600160401b03811115612bdc57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612c06576020820181803683370190505b5090505b841561228957612c1b6001836143ae565b9150612c28600a86614447565b612c33906030614363565b60f81b818381518110612c5657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612c78600a8661437b565b9450612c0a565b60006001600160e01b031982166380ac58cd60e01b1480612cb057506001600160e01b03198216635b5e139f60e01b145b80610bb95750610bb98261311b565b6001600160a01b038316612d1a57612d1581600b80546000838152600c60205260408120829055600182018355919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90155565b612d3d565b816001600160a01b0316836001600160a01b031614612d3d57612d3d8382613150565b6001600160a01b038216612d5457610ea2816131ed565b826001600160a01b0316826001600160a01b031614610ea257610ea282826132c6565b612d8033610fb0565b612df25760405162461bcd60e51b815260206004820152603860248201527f4f4e4654373231456e756d657261626c653a2073656e642063616c6c6572206960448201527f73206e6f74206f776e6572206e6f7220617070726f76656400000000000000006064820152608401610b81565b836001600160a01b0316612e05826116b8565b6001600160a01b031614612e705760405162461bcd60e51b815260206004820152602c60248201527f4f4e4654373231456e756d657261626c653a2073656e642066726f6d20696e6360448201526b37b93932b1ba1037bbb732b960a11b6064820152608401610b81565b610b968161330a565b61ffff851660009081526001602052604090208054612e97906143f1565b15159050612f025760405162461bcd60e51b815260206004820152603260248201527f4c7a53656e643a2064657374696e6174696f6e20636861696e206973206e6f746044820152711030903a393ab9ba32b21039b7bab931b29760711b6064820152608401610b81565b61ffff851660009081526001602052604090819020905162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c5803100913491612f6c918a91908a908a908a908a90600401614202565b6000604051808303818588803b158015611f8a57600080fd5b610ea282826133b1565b60006001600160a01b0384163b1561309157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612fd3903390899088908890600401613e3b565b602060405180830381600087803b158015612fed57600080fd5b505af192505050801561301d575060408051601f3d908101601f1916820190925261301a91810190613847565b60015b613077573d80801561304b576040519150601f19603f3d011682016040523d82523d6000602084013e613050565b606091505b50805161306f5760405162461bcd60e51b8152600401610b8190613ead565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612289565b506001612289565b600081815b84518110156131135760008582815181106130c957634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116130ef5760008381526020829052604090209250613100565b600081815260208490526040902092505b508061310b8161442c565b91505061309e565b509392505050565b60006001600160e01b03198216637bb0080b60e01b1480610bb957506301ffc9a760e01b6001600160e01b0319831614610bb9565b6000600161315d84611831565b61316791906143ae565b6000838152600a60205260409020549091508082146131ba576001600160a01b03841660009081526009602090815260408083208584528252808320548484528184208190558352600a90915290208190555b506000918252600a602090815260408084208490556001600160a01b039094168352600981528383209183525290812055565b600b546000906131ff906001906143ae565b6000838152600c6020526040812054600b805493945090928490811061323557634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600b838154811061326457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600c9091526040808220849055858252812055600b8054806132aa57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006132d183611831565b6001600160a01b0390931660009081526009602090815260408083208684528252808320859055938252600a9052919091209190915550565b6000613315826116b8565b905061332381600084612cbf565b61332e6000836123a7565b6001600160a01b03811660009081526006602052604081208054600192906133579084906143ae565b909155505060008281526005602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6116b48282604051806020016040528060008152506133d083836126af565b6133dd6000848484612f8f565b610ea25760405162461bcd60e51b8152600401610b8190613ead565b828054613405906143f1565b90600052602060002090601f016020900481019282613427576000855561346d565b82601f1061344057805160ff191683800117855561346d565b8280016001018555821561346d579182015b8281111561346d578251825591602001919060010190613452565b506134799291506134f1565b5090565b828054613489906143f1565b90600052602060002090601f0160209004810192826134ab576000855561346d565b82601f106134c45782800160ff1982351617855561346d565b8280016001018555821561346d579182015b8281111561346d5782358255916020019190600101906134d6565b5b8082111561347957600081556001016134f2565b60006135196135148461433c565b61430c565b905082815283838301111561352d57600080fd5b828260208301376000602084830101529392505050565b8035801515811461355457600080fd5b919050565b60008083601f84011261356a578182fd5b5081356001600160401b03811115613580578182fd5b60208301915083602082850101111561359857600080fd5b9250929050565b600082601f8301126135af578081fd5b6135be83833560208501613506565b9392505050565b600082601f8301126135d5578081fd5b81516135e36135148261433c565b8181528460208386010111156135f7578283fd5b6122898260208301602087016143c5565b600060208284031215613619578081fd5b81356135be8161449d565b60008060408385031215613636578081fd5b82356136418161449d565b915060208301356136518161449d565b809150509250929050565b600080600060608486031215613670578081fd5b833561367b8161449d565b9250602084013561368b8161449d565b929592945050506040919091013590565b600080600080608085870312156136b1578081fd5b84356136bc8161449d565b935060208501356136cc8161449d565b92506040850135915060608501356001600160401b038111156136ed578182fd5b6136f98782880161359f565b91505092959194509250565b60008060408385031215613717578182fd5b82356137228161449d565b91506110e460208401613544565b600080600080600080600060e0888a03121561374a578485fd5b87356137558161449d565b96506020880135613765816144c8565b955060408801356001600160401b0380821115613780578687fd5b61378c8b838c0161359f565b965060608a0135955060808a013591506137a58261449d565b90935060a0890135906137b78261449d565b90925060c089013590808211156137cc578283fd5b506137d98a828b0161359f565b91505092959891949750929550565b600080604083850312156137fa578182fd5b82356138058161449d565b946020939093013593505050565b600060208284031215613824578081fd5b5035919050565b60006020828403121561383c578081fd5b81356135be816144b2565b600060208284031215613858578081fd5b81516135be816144b2565b600060208284031215613874578081fd5b81516001600160401b03811115613889578182fd5b612289848285016135c5565b600080604083850312156138a7578182fd5b82516001600160401b038111156138bc578283fd5b6138c8858286016135c5565b925050602083015190509250929050565b6000602082840312156138ea578081fd5b81356001600160401b038111156138ff578182fd5b8201601f8101841361390f578182fd5b61228984823560208401613506565b60006020828403121561392f578081fd5b81356135be816144c8565b60006020828403121561394b578081fd5b81516135be816144c8565b60008060006040848603121561396a578081fd5b8335613975816144c8565b925060208401356001600160401b0381111561398f578182fd5b61399b86828701613559565b9497909650939450505050565b6000806000606084860312156139bc578081fd5b83356139c7816144c8565b925060208401356001600160401b038111156139e1578182fd5b6139ed8682870161359f565b925050604084013590509250925092565b600080600080600060a08688031215613a15578283fd5b8535613a20816144c8565b945060208601356001600160401b0380821115613a3b578485fd5b613a4789838a0161359f565b955060408801359450613a5c60608901613544565b93506080880135915080821115613a71578283fd5b50613a7e8882890161359f565b9150509295509295909350565b600080600080600060808688031215613aa2578283fd5b8535613aad816144c8565b945060208601356001600160401b0380821115613ac8578485fd5b613ad489838a0161359f565b955060408801359150613ae6826144d8565b90935060608701359080821115613afb578283fd5b50613b0888828901613559565b969995985093965092949392505050565b60008060008060808587031215613b2e578182fd5b8435613b39816144c8565b935060208501356001600160401b0380821115613b54578384fd5b613b608883890161359f565b945060408701359150613b72826144d8565b90925060608601359080821115613b87578283fd5b506136f98782880161359f565b60008060008060808587031215613ba9578182fd5b8435613bb4816144c8565b93506020850135613bc4816144c8565b92506040850135613bd48161449d565b9396929550929360600135925050565b600080600080600060808688031215613bfb578283fd5b8535613c06816144c8565b94506020860135613c16816144c8565b93506040860135925060608601356001600160401b03811115613c37578182fd5b613b0888828901613559565b600080600060408486031215613c57578081fd5b8335925060208401356001600160401b0380821115613c74578283fd5b818601915086601f830112613c87578283fd5b813581811115613c95578384fd5b8760208260051b8501011115613ca9578384fd5b6020830194508093505050509250925092565b60008060408385031215613cce578182fd5b50508035926020909101359150565b60008060408385031215613cef578182fd5b505080516020909101519092909150565b600060208284031215613d11578081fd5b81516135be816144d8565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452613d5d8160208601602086016143c5565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60008251613d938184602087016143c5565b9190910192915050565b6000808354613dab816143f1565b60018281168015613dc35760018114613dd457613e00565b60ff19841687528287019450613e00565b8786526020808720875b85811015613df75781548a820152908401908201613dde565b50505082870194505b50929695505050505050565b60008351613e1e8184602088016143c5565b835190830190613e328183602088016143c5565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613e6e90830184613d45565b9695505050505050565b6020815260006135be6020830184613d45565b604081526000613e9e6040830185613d45565b90508260208301529392505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526023908201527f4b616e70616950616e6461733a2043616e6e6f74206d696e74203020746f6b656040820152626e732160e81b606082015260800190565b60208082526027908201527f4b616e70616950616e6461733a2053616c6520686173206e6f742073746172746040820152666564207965742160c81b606082015260800190565b60208082526048908201527f4b616e70616950616e6461733a20596f752063616e6e6f74206d696e74206d6f60408201527f7265207468616e206d6178546f6b656e735065724d696e7420746f6b656e73206060820152676174206f6e63652160c01b608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f4b616e70616950616e6461733a206d6178206d696e74206c696d69742072656160408201526318da195960e21b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526027908201527f4b616e70616950616e6461733a20496e636f6e73697374656e7420616d6f756e604082015266742073656e742160c81b606082015260800190565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061413690830186613d45565b841515606084015282810360808401526141508185613d45565b98975050505050505050565b61ffff84168152604060208201526000612286604083018486613d1c565b61ffff861681526080602082015260006141976080830187613d45565b6001600160401b03861660408401528281036060840152614150818587613d1c565b61ffff851681526080602082015260006141d66080830186613d45565b6001600160401b038516604084015282810360608401526141f78185613d45565b979650505050505050565b61ffff871681526000602060c08184015281885461421f816143f1565b8060c087015260e0600180841660008114614241576001811461425657614281565b60ff1985168984015261010089019550614281565b8d8852868820885b858110156142795781548b820186015290830190880161425e565b8a0184019650505b505050505083810360408501526142988189613d45565b9150506142b060608401876001600160a01b03169052565b6001600160a01b038516608084015282810360a08401526142d18185613d45565b9998505050505050505050565b600061ffff8088168352808716602084015250846040830152608060608301526141f7608083018486613d1c565b604051601f8201601f191681016001600160401b038111828210171561433457614334614487565b604052919050565b60006001600160401b0382111561435557614355614487565b50601f01601f191660200190565b600082198211156143765761437661445b565b500190565b60008261438a5761438a614471565b500490565b60008160001904831182151516156143a9576143a961445b565b500290565b6000828210156143c0576143c061445b565b500390565b60005b838110156143e05781810151838201526020016143c8565b83811115610b965750506000910152565b600181811c9082168061440557607f821691505b6020821081141561442657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156144405761444061445b565b5060010190565b60008261445657614456614471565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146113fd57600080fd5b6001600160e01b0319811681146113fd57600080fd5b61ffff811681146113fd57600080fd5b6001600160401b03811681146113fd57600080fdfea26469706673582212204f639de40de0dc81ca92868906cf1a43cffbb2e25ed37cb4398c36fda28c330f64736f6c63430008040033",
  "devdoc": {
    "author": "exakoss",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "_baseTokenURI": "the base URI for computing the tokenURI",
          "_endMintId": "the max number of mints on this chain",
          "_layerZeroEndpoint": "handles message transmission across chains",
          "_maxTokensPerMint": "the max number of tokens that could be minted in a single transaction",
          "_name": "the name of the token",
          "_startMintId": "the starting mint number on this chain, excluded",
          "_symbol": "the token symbol"
        }
      },
      "estimateSendFee(uint16,bytes,uint256,bool,bytes)": {
        "details": "estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenId - token Id to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "sendFrom(address,uint16,bytes,uint256,address,address,bytes)": {
        "details": "send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Interface of the AdvancedONFT standard",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor for the AdvancedONFT"
      },
      "mint(uint256,bytes32[])": {
        "notice": "Mint your ONFTs, whitelisted addresses only"
      },
      "publicMint(uint256)": {
        "notice": "Mint your ONFTs"
      }
    },
    "notice": "this implementation supports: batch mint, payable public and private mint, reveal of metadata and EIP-2981 on-chain royalties",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13893,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 14207,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "failedMessages",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes32)))"
      },
      {
        "astId": 2706,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2708,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2712,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_owners",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2716,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2720,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2726,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3695,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3699,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3702,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_allTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3706,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 243,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_status",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 17659,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "price",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 17661,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "nextMintId",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 17663,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "maxMintId",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 17665,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "maxTokensPerMint",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 17668,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "royaltyBasisPoints",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 17670,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "beneficiary",
        "offset": 0,
        "slot": "19",
        "type": "t_address_payable"
      },
      {
        "astId": 17672,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "20",
        "type": "t_bytes32"
      },
      {
        "astId": 17674,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "contractURI",
        "offset": 0,
        "slot": "21",
        "type": "t_string_storage"
      },
      {
        "astId": 17676,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "baseURI",
        "offset": 0,
        "slot": "22",
        "type": "t_string_storage"
      },
      {
        "astId": 17680,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_boughtCount",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17682,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_publicSaleStarted",
        "offset": 0,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 17684,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "_saleStarted",
        "offset": 1,
        "slot": "24",
        "type": "t_bool"
      },
      {
        "astId": 17686,
        "contract": "contracts/token/onft/extension/KanpaiPandas.sol:KanpaiPandas",
        "label": "revealed",
        "offset": 2,
        "slot": "24",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint256 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint256 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint256,t_bytes32))"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}